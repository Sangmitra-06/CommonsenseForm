{"ast":null,"code":"const loadUserSession = useCallback(async sessionId => {\n  try {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    const user = await api.getUser(sessionId);\n    dispatch({\n      type: 'SET_SESSION_ID',\n      payload: sessionId\n    });\n    dispatch({\n      type: 'SET_USER_INFO',\n      payload: user.userInfo\n    });\n    dispatch({\n      type: 'UPDATE_PROGRESS',\n      payload: user.progress\n    });\n    dispatch({\n      type: 'SET_COMPLETED',\n      payload: user.isCompleted\n    });\n\n    // Load responses\n    const responses = await api.getUserResponses(sessionId);\n    dispatch({\n      type: 'SET_RESPONSES',\n      payload: responses\n    });\n\n    // FIXED: Set current position from user data, not from responses\n    // Find the furthest question answered\n    let furthestPosition = {\n      categoryIndex: 0,\n      subcategoryIndex: 0,\n      topicIndex: 0,\n      questionIndex: 0\n    };\n    if (responses.length > 0) {\n      // Find the last answered question\n      const sortedResponses = responses.sort((a, b) => {\n        if (a.categoryIndex !== b.categoryIndex) return b.categoryIndex - a.categoryIndex;\n        if (a.subcategoryIndex !== b.subcategoryIndex) return b.subcategoryIndex - a.subcategoryIndex;\n        if (a.topicIndex !== b.topicIndex) return b.topicIndex - a.topicIndex;\n        return b.questionIndex - a.questionIndex;\n      });\n      const lastResponse = sortedResponses[0];\n\n      // Set position to the next question after the last answered\n      furthestPosition = {\n        categoryIndex: lastResponse.categoryIndex,\n        subcategoryIndex: lastResponse.subcategoryIndex,\n        topicIndex: lastResponse.topicIndex,\n        questionIndex: lastResponse.questionIndex + 1\n      };\n\n      // If we're at the end of a topic/subcategory/category, move to next\n      // This will be handled by navigation logic\n    }\n    dispatch({\n      type: 'SET_CURRENT_POSITION',\n      payload: furthestPosition\n    });\n  } catch (error) {\n    dispatch({\n      type: 'SET_ERROR',\n      payload: 'Failed to load user session'\n    });\n    throw error;\n  } finally {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: false\n    });\n  }\n}, []);","map":{"version":3,"names":["loadUserSession","useCallback","sessionId","dispatch","type","payload","user","api","getUser","userInfo","progress","isCompleted","responses","getUserResponses","furthestPosition","categoryIndex","subcategoryIndex","topicIndex","questionIndex","length","sortedResponses","sort","a","b","lastResponse","error"],"sources":["C:/Users/sangm/OneDrive - Brock University/CommonsenseForm/client/src/context/FormContext.tsx"],"sourcesContent":["const loadUserSession = useCallback(async (sessionId: string) => {\r\n  try {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    const user = await api.getUser(sessionId);\r\n    dispatch({ type: 'SET_SESSION_ID', payload: sessionId });\r\n    dispatch({ type: 'SET_USER_INFO', payload: user.userInfo });\r\n    dispatch({ type: 'UPDATE_PROGRESS', payload: user.progress });\r\n    dispatch({ type: 'SET_COMPLETED', payload: user.isCompleted });\r\n    \r\n    // Load responses\r\n    const responses = await api.getUserResponses(sessionId);\r\n    dispatch({ type: 'SET_RESPONSES', payload: responses });\r\n    \r\n    // FIXED: Set current position from user data, not from responses\r\n    // Find the furthest question answered\r\n    let furthestPosition = {\r\n      categoryIndex: 0,\r\n      subcategoryIndex: 0,\r\n      topicIndex: 0,\r\n      questionIndex: 0\r\n    };\r\n\r\n    if (responses.length > 0) {\r\n      // Find the last answered question\r\n      const sortedResponses = responses.sort((a, b) => {\r\n        if (a.categoryIndex !== b.categoryIndex) return b.categoryIndex - a.categoryIndex;\r\n        if (a.subcategoryIndex !== b.subcategoryIndex) return b.subcategoryIndex - a.subcategoryIndex;\r\n        if (a.topicIndex !== b.topicIndex) return b.topicIndex - a.topicIndex;\r\n        return b.questionIndex - a.questionIndex;\r\n      });\r\n\r\n      const lastResponse = sortedResponses[0];\r\n      \r\n      // Set position to the next question after the last answered\r\n      furthestPosition = {\r\n        categoryIndex: lastResponse.categoryIndex,\r\n        subcategoryIndex: lastResponse.subcategoryIndex,\r\n        topicIndex: lastResponse.topicIndex,\r\n        questionIndex: lastResponse.questionIndex + 1\r\n      };\r\n\r\n      // If we're at the end of a topic/subcategory/category, move to next\r\n      // This will be handled by navigation logic\r\n    }\r\n\r\n    dispatch({ type: 'SET_CURRENT_POSITION', payload: furthestPosition });\r\n    \r\n  } catch (error) {\r\n    dispatch({ type: 'SET_ERROR', payload: 'Failed to load user session' });\r\n    throw error;\r\n  } finally {\r\n    dispatch({ type: 'SET_LOADING', payload: false });\r\n  }\r\n}, []);"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,WAAW,CAAC,MAAOC,SAAiB,IAAK;EAC/D,IAAI;IACFC,QAAQ,CAAC;MAAEC,IAAI,EAAE,aAAa;MAAEC,OAAO,EAAE;IAAK,CAAC,CAAC;IAChD,MAAMC,IAAI,GAAG,MAAMC,GAAG,CAACC,OAAO,CAACN,SAAS,CAAC;IACzCC,QAAQ,CAAC;MAAEC,IAAI,EAAE,gBAAgB;MAAEC,OAAO,EAAEH;IAAU,CAAC,CAAC;IACxDC,QAAQ,CAAC;MAAEC,IAAI,EAAE,eAAe;MAAEC,OAAO,EAAEC,IAAI,CAACG;IAAS,CAAC,CAAC;IAC3DN,QAAQ,CAAC;MAAEC,IAAI,EAAE,iBAAiB;MAAEC,OAAO,EAAEC,IAAI,CAACI;IAAS,CAAC,CAAC;IAC7DP,QAAQ,CAAC;MAAEC,IAAI,EAAE,eAAe;MAAEC,OAAO,EAAEC,IAAI,CAACK;IAAY,CAAC,CAAC;;IAE9D;IACA,MAAMC,SAAS,GAAG,MAAML,GAAG,CAACM,gBAAgB,CAACX,SAAS,CAAC;IACvDC,QAAQ,CAAC;MAAEC,IAAI,EAAE,eAAe;MAAEC,OAAO,EAAEO;IAAU,CAAC,CAAC;;IAEvD;IACA;IACA,IAAIE,gBAAgB,GAAG;MACrBC,aAAa,EAAE,CAAC;MAChBC,gBAAgB,EAAE,CAAC;MACnBC,UAAU,EAAE,CAAC;MACbC,aAAa,EAAE;IACjB,CAAC;IAED,IAAIN,SAAS,CAACO,MAAM,GAAG,CAAC,EAAE;MACxB;MACA,MAAMC,eAAe,GAAGR,SAAS,CAACS,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAC/C,IAAID,CAAC,CAACP,aAAa,KAAKQ,CAAC,CAACR,aAAa,EAAE,OAAOQ,CAAC,CAACR,aAAa,GAAGO,CAAC,CAACP,aAAa;QACjF,IAAIO,CAAC,CAACN,gBAAgB,KAAKO,CAAC,CAACP,gBAAgB,EAAE,OAAOO,CAAC,CAACP,gBAAgB,GAAGM,CAAC,CAACN,gBAAgB;QAC7F,IAAIM,CAAC,CAACL,UAAU,KAAKM,CAAC,CAACN,UAAU,EAAE,OAAOM,CAAC,CAACN,UAAU,GAAGK,CAAC,CAACL,UAAU;QACrE,OAAOM,CAAC,CAACL,aAAa,GAAGI,CAAC,CAACJ,aAAa;MAC1C,CAAC,CAAC;MAEF,MAAMM,YAAY,GAAGJ,eAAe,CAAC,CAAC,CAAC;;MAEvC;MACAN,gBAAgB,GAAG;QACjBC,aAAa,EAAES,YAAY,CAACT,aAAa;QACzCC,gBAAgB,EAAEQ,YAAY,CAACR,gBAAgB;QAC/CC,UAAU,EAAEO,YAAY,CAACP,UAAU;QACnCC,aAAa,EAAEM,YAAY,CAACN,aAAa,GAAG;MAC9C,CAAC;;MAED;MACA;IACF;IAEAf,QAAQ,CAAC;MAAEC,IAAI,EAAE,sBAAsB;MAAEC,OAAO,EAAES;IAAiB,CAAC,CAAC;EAEvE,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdtB,QAAQ,CAAC;MAAEC,IAAI,EAAE,WAAW;MAAEC,OAAO,EAAE;IAA8B,CAAC,CAAC;IACvE,MAAMoB,KAAK;EACb,CAAC,SAAS;IACRtB,QAAQ,CAAC;MAAEC,IAAI,EAAE,aAAa;MAAEC,OAAO,EAAE;IAAM,CAAC,CAAC;EACnD;AACF,CAAC,EAAE,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}