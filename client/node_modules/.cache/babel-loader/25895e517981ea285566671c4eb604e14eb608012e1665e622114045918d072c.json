{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sangm\\\\OneDrive - Brock University\\\\CommonsenseForm\\\\client\\\\src\\\\context\\\\FormContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { loadQuestionsData } from '../utils/helpers.ts';\nimport * as api from '../services/api.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  sessionId: null,\n  userInfo: null,\n  currentPosition: {\n    categoryIndex: 0,\n    subcategoryIndex: 0,\n    topicIndex: 0,\n    questionIndex: 0\n  },\n  responses: new Map(),\n  progress: {\n    currentCategory: 0,\n    currentSubcategory: 0,\n    currentTopic: 0,\n    currentQuestion: 0,\n    completedQuestions: 0,\n    totalQuestions: 585,\n    completedTopics: [],\n    attentionChecksPassed: 0,\n    attentionChecksFailed: 0\n  },\n  isLoading: false,\n  error: null,\n  questionsData: [],\n  startTime: 0,\n  lastSaveTime: 0,\n  isCompleted: false\n};\nfunction formReducer(state, action) {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SET_SESSION_ID':\n      return {\n        ...state,\n        sessionId: action.payload\n      };\n    case 'SET_USER_INFO':\n      return {\n        ...state,\n        userInfo: action.payload\n      };\n    case 'SET_QUESTIONS_DATA':\n      return {\n        ...state,\n        questionsData: action.payload\n      };\n    case 'SET_CURRENT_POSITION':\n      return {\n        ...state,\n        currentPosition: action.payload\n      };\n    case 'ADD_RESPONSE':\n      const newResponses = new Map(state.responses);\n      newResponses.set(action.payload.questionId, action.payload);\n      return {\n        ...state,\n        responses: newResponses\n      };\n    case 'UPDATE_PROGRESS':\n      return {\n        ...state,\n        progress: {\n          ...state.progress,\n          ...action.payload\n        }\n      };\n    case 'SET_RESPONSES':\n      const responseMap = new Map();\n      action.payload.forEach(response => {\n        responseMap.set(response.questionId, response);\n      });\n      return {\n        ...state,\n        responses: responseMap\n      };\n    case 'SET_START_TIME':\n      return {\n        ...state,\n        startTime: action.payload\n      };\n    case 'SET_LAST_SAVE_TIME':\n      return {\n        ...state,\n        lastSaveTime: action.payload\n      };\n    case 'SET_COMPLETED':\n      return {\n        ...state,\n        isCompleted: action.payload\n      };\n    case 'RESET_FORM':\n      return initialState;\n    default:\n      return state;\n  }\n}\nconst FormContext = /*#__PURE__*/createContext(undefined);\nexport function FormProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(formReducer, initialState);\n  useEffect(() => {\n    // Load questions data on mount\n    const loadData = async () => {\n      try {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: true\n        });\n        const data = await loadQuestionsData();\n        dispatch({\n          type: 'SET_QUESTIONS_DATA',\n          payload: data\n        });\n\n        // Calculate total questions\n        const totalQuestions = data.reduce((total, category) => {\n          return total + category.subcategories.reduce((subTotal, subcategory) => {\n            return subTotal + subcategory.topics.reduce((topicTotal, topic) => {\n              return topicTotal + topic.questions.length;\n            }, 0);\n          }, 0);\n        }, 0);\n        dispatch({\n          type: 'UPDATE_PROGRESS',\n          payload: {\n            totalQuestions\n          }\n        });\n      } catch (error) {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: 'Failed to load questions data'\n        });\n      } finally {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }\n    };\n    loadData();\n  }, []);\n  const createUserSession = async userInfo => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const response = await api.createUser(userInfo);\n      dispatch({\n        type: 'SET_SESSION_ID',\n        payload: response.sessionId\n      });\n      dispatch({\n        type: 'SET_USER_INFO',\n        payload: userInfo\n      });\n      dispatch({\n        type: 'SET_START_TIME',\n        payload: Date.now()\n      });\n\n      // Store session ID in localStorage for recovery\n      localStorage.setItem('culturalSurveySessionId', response.sessionId);\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to create user session'\n      });\n      throw error;\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const loadUserSession = async sessionId => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const user = await api.getUser(sessionId);\n      dispatch({\n        type: 'SET_SESSION_ID',\n        payload: sessionId\n      });\n      dispatch({\n        type: 'SET_USER_INFO',\n        payload: user.userInfo\n      });\n      dispatch({\n        type: 'UPDATE_PROGRESS',\n        payload: user.progress\n      });\n      dispatch({\n        type: 'SET_COMPLETED',\n        payload: user.isCompleted\n      });\n\n      // Load responses\n      const responses = await api.getUserResponses(sessionId);\n      dispatch({\n        type: 'SET_RESPONSES',\n        payload: responses\n      });\n\n      // Set current position\n      dispatch({\n        type: 'SET_CURRENT_POSITION',\n        payload: {\n          categoryIndex: user.progress.currentCategory,\n          subcategoryIndex: user.progress.currentSubcategory,\n          topicIndex: user.progress.currentTopic,\n          questionIndex: user.progress.currentQuestion\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to load user session'\n      });\n      throw error;\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const saveResponse = async response => {\n    try {\n      await api.saveResponse(response);\n      dispatch({\n        type: 'ADD_RESPONSE',\n        payload: response\n      });\n      dispatch({\n        type: 'SET_LAST_SAVE_TIME',\n        payload: Date.now()\n      });\n\n      // Update progress\n      const completedQuestions = state.progress.completedQuestions + 1;\n      dispatch({\n        type: 'UPDATE_PROGRESS',\n        payload: {\n          completedQuestions\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to save response'\n      });\n      throw error;\n    }\n  };\n  const getCurrentQuestionData = () => {\n    const {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex,\n      questionIndex\n    } = state.currentPosition;\n    if (!state.questionsData[categoryIndex]) return null;\n    const category = state.questionsData[categoryIndex];\n    const subcategory = category.subcategories[subcategoryIndex];\n    const topic = subcategory === null || subcategory === void 0 ? void 0 : subcategory.topics[topicIndex];\n    const question = topic === null || topic === void 0 ? void 0 : topic.questions[questionIndex];\n    if (!question) return null;\n    return {\n      category: category.category,\n      subcategory: subcategory.subcategory,\n      topic: topic.topic,\n      question,\n      questionId: `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`\n    };\n  };\n  const getCurrentQuestion = () => {\n    const data = getCurrentQuestionData();\n    return (data === null || data === void 0 ? void 0 : data.question) || null;\n  };\n  const navigateToNext = () => {\n    const {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex,\n      questionIndex\n    } = state.currentPosition;\n    const category = state.questionsData[categoryIndex];\n    if (!category) return;\n    const subcategory = category.subcategories[subcategoryIndex];\n    const topic = subcategory === null || subcategory === void 0 ? void 0 : subcategory.topics[topicIndex];\n    if (!topic) return;\n\n    // Move to next question\n    if (questionIndex < topic.questions.length - 1) {\n      dispatch({\n        type: 'SET_CURRENT_POSITION',\n        payload: {\n          categoryIndex,\n          subcategoryIndex,\n          topicIndex,\n          questionIndex: questionIndex + 1\n        }\n      });\n    }\n    // Move to next topic\n    else if (topicIndex < subcategory.topics.length - 1) {\n      dispatch({\n        type: 'SET_CURRENT_POSITION',\n        payload: {\n          categoryIndex,\n          subcategoryIndex,\n          topicIndex: topicIndex + 1,\n          questionIndex: 0\n        }\n      });\n    }\n    // Move to next subcategory\n    else if (subcategoryIndex < category.subcategories.length - 1) {\n      dispatch({\n        type: 'SET_CURRENT_POSITION',\n        payload: {\n          categoryIndex,\n          subcategoryIndex: subcategoryIndex + 1,\n          topicIndex: 0,\n          questionIndex: 0\n        }\n      });\n    }\n    // Move to next category\n    else if (categoryIndex < state.questionsData.length - 1) {\n      dispatch({\n        type: 'SET_CURRENT_POSITION',\n        payload: {\n          categoryIndex: categoryIndex + 1,\n          subcategoryIndex: 0,\n          topicIndex: 0,\n          questionIndex: 0\n        }\n      });\n    }\n    // Survey completed\n    else {\n      dispatch({\n        type: 'SET_COMPLETED',\n        payload: true\n      });\n    }\n  };\n  const navigateToPrevious = () => {\n    const {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex,\n      questionIndex\n    } = state.currentPosition;\n\n    // Move to previous question\n    if (questionIndex > 0) {\n      dispatch({\n        type: 'SET_CURRENT_POSITION',\n        payload: {\n          categoryIndex,\n          subcategoryIndex,\n          topicIndex,\n          questionIndex: questionIndex - 1\n        }\n      });\n    }\n    // Move to previous topic\n    else if (topicIndex > 0) {\n      const prevTopic = state.questionsData[categoryIndex].subcategories[subcategoryIndex].topics[topicIndex - 1];\n      dispatch({\n        type: 'SET_CURRENT_POSITION',\n        payload: {\n          categoryIndex,\n          subcategoryIndex,\n          topicIndex: topicIndex - 1,\n          questionIndex: prevTopic.questions.length - 1\n        }\n      });\n    }\n    // Move to previous subcategory\n    else if (subcategoryIndex > 0) {\n      const prevSubcategory = state.questionsData[categoryIndex].subcategories[subcategoryIndex - 1];\n      const lastTopic = prevSubcategory.topics[prevSubcategory.topics.length - 1];\n      dispatch({\n        type: 'SET_CURRENT_POSITION',\n        payload: {\n          categoryIndex,\n          subcategoryIndex: subcategoryIndex - 1,\n          topicIndex: prevSubcategory.topics.length - 1,\n          questionIndex: lastTopic.questions.length - 1\n        }\n      });\n    }\n    // Move to previous category\n    else if (categoryIndex > 0) {\n      const prevCategory = state.questionsData[categoryIndex - 1];\n      const lastSubcategory = prevCategory.subcategories[prevCategory.subcategories.length - 1];\n      const lastTopic = lastSubcategory.topics[lastSubcategory.topics.length - 1];\n      dispatch({\n        type: 'SET_CURRENT_POSITION',\n        payload: {\n          categoryIndex: categoryIndex - 1,\n          subcategoryIndex: prevCategory.subcategories.length - 1,\n          topicIndex: lastSubcategory.topics.length - 1,\n          questionIndex: lastTopic.questions.length - 1\n        }\n      });\n    }\n  };\n  const calculateProgress = () => {\n    const totalQuestions = state.progress.totalQuestions;\n    const completedQuestions = state.responses.size;\n    return totalQuestions > 0 ? completedQuestions / totalQuestions * 100 : 0;\n  };\n  const getTotalQuestionsInCurrentTopic = () => {\n    var _state$questionsData$, _state$questionsData$2;\n    const {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex\n    } = state.currentPosition;\n    const topic = (_state$questionsData$ = state.questionsData[categoryIndex]) === null || _state$questionsData$ === void 0 ? void 0 : (_state$questionsData$2 = _state$questionsData$.subcategories[subcategoryIndex]) === null || _state$questionsData$2 === void 0 ? void 0 : _state$questionsData$2.topics[topicIndex];\n    return (topic === null || topic === void 0 ? void 0 : topic.questions.length) || 0;\n  };\n  const getCompletedQuestionsInCurrentTopic = () => {\n    var _state$questionsData$3, _state$questionsData$4;\n    const {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex\n    } = state.currentPosition;\n    let completed = 0;\n    const topic = (_state$questionsData$3 = state.questionsData[categoryIndex]) === null || _state$questionsData$3 === void 0 ? void 0 : (_state$questionsData$4 = _state$questionsData$3.subcategories[subcategoryIndex]) === null || _state$questionsData$4 === void 0 ? void 0 : _state$questionsData$4.topics[topicIndex];\n    if (!topic) return 0;\n    topic.questions.forEach((_, questionIndex) => {\n      const questionId = `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\n      if (state.responses.has(questionId)) {\n        completed++;\n      }\n    });\n    return completed;\n  };\n  const value = {\n    state,\n    dispatch,\n    createUserSession,\n    saveResponse,\n    navigateToNext,\n    navigateToPrevious,\n    calculateProgress,\n    getCurrentQuestion,\n    getCurrentQuestionData,\n    getTotalQuestionsInCurrentTopic,\n    getCompletedQuestionsInCurrentTopic,\n    loadUserSession\n  };\n  return /*#__PURE__*/_jsxDEV(FormContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 380,\n    columnNumber: 5\n  }, this);\n}\n_s(FormProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = FormProvider;\nexport function useForm() {\n  _s2();\n  const context = useContext(FormContext);\n  if (context === undefined) {\n    throw new Error('useForm must be used within a FormProvider');\n  }\n  return context;\n}\n_s2(useForm, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"FormProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","loadQuestionsData","api","jsxDEV","_jsxDEV","initialState","sessionId","userInfo","currentPosition","categoryIndex","subcategoryIndex","topicIndex","questionIndex","responses","Map","progress","currentCategory","currentSubcategory","currentTopic","currentQuestion","completedQuestions","totalQuestions","completedTopics","attentionChecksPassed","attentionChecksFailed","isLoading","error","questionsData","startTime","lastSaveTime","isCompleted","formReducer","state","action","type","payload","newResponses","set","questionId","responseMap","forEach","response","FormContext","undefined","FormProvider","children","_s","dispatch","loadData","data","reduce","total","category","subcategories","subTotal","subcategory","topics","topicTotal","topic","questions","length","createUserSession","createUser","Date","now","localStorage","setItem","loadUserSession","user","getUser","getUserResponses","saveResponse","getCurrentQuestionData","question","getCurrentQuestion","navigateToNext","navigateToPrevious","prevTopic","prevSubcategory","lastTopic","prevCategory","lastSubcategory","calculateProgress","size","getTotalQuestionsInCurrentTopic","_state$questionsData$","_state$questionsData$2","getCompletedQuestionsInCurrentTopic","_state$questionsData$3","_state$questionsData$4","completed","_","has","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useForm","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/sangm/OneDrive - Brock University/CommonsenseForm/client/src/context/FormContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\r\nimport { FormState, UserInfo, QuestionResponse, Category, Progress } from '../types';\r\nimport { loadQuestionsData } from '../utils/helpers.ts';\r\nimport * as api from '../services/api.ts';\r\n\r\ntype FormAction =\r\n  | { type: 'SET_LOADING'; payload: boolean }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'SET_SESSION_ID'; payload: string }\r\n  | { type: 'SET_USER_INFO'; payload: UserInfo }\r\n  | { type: 'SET_QUESTIONS_DATA'; payload: Category[] }\r\n  | { type: 'SET_CURRENT_POSITION'; payload: { categoryIndex: number; subcategoryIndex: number; topicIndex: number; questionIndex: number } }\r\n  | { type: 'ADD_RESPONSE'; payload: QuestionResponse }\r\n  | { type: 'UPDATE_PROGRESS'; payload: Partial<Progress> }\r\n  | { type: 'SET_RESPONSES'; payload: QuestionResponse[] }\r\n  | { type: 'SET_START_TIME'; payload: number }\r\n  | { type: 'SET_LAST_SAVE_TIME'; payload: number }\r\n  | { type: 'SET_COMPLETED'; payload: boolean }\r\n  | { type: 'RESET_FORM' };\r\n\r\nconst initialState: FormState = {\r\n  sessionId: null,\r\n  userInfo: null,\r\n  currentPosition: {\r\n    categoryIndex: 0,\r\n    subcategoryIndex: 0,\r\n    topicIndex: 0,\r\n    questionIndex: 0\r\n  },\r\n  responses: new Map(),\r\n  progress: {\r\n    currentCategory: 0,\r\n    currentSubcategory: 0,\r\n    currentTopic: 0,\r\n    currentQuestion: 0,\r\n    completedQuestions: 0,\r\n    totalQuestions: 585,\r\n    completedTopics: [],\r\n    attentionChecksPassed: 0,\r\n    attentionChecksFailed: 0\r\n  },\r\n  isLoading: false,\r\n  error: null,\r\n  questionsData: [],\r\n  startTime: 0,\r\n  lastSaveTime: 0,\r\n  isCompleted: false\r\n};\r\n\r\nfunction formReducer(state: FormState, action: FormAction): FormState {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    case 'SET_SESSION_ID':\r\n      return { ...state, sessionId: action.payload };\r\n    case 'SET_USER_INFO':\r\n      return { ...state, userInfo: action.payload };\r\n    case 'SET_QUESTIONS_DATA':\r\n      return { ...state, questionsData: action.payload };\r\n    case 'SET_CURRENT_POSITION':\r\n      return { ...state, currentPosition: action.payload };\r\n    case 'ADD_RESPONSE':\r\n      const newResponses = new Map(state.responses);\r\n      newResponses.set(action.payload.questionId, action.payload);\r\n      return { ...state, responses: newResponses };\r\n    case 'UPDATE_PROGRESS':\r\n      return { \r\n        ...state, \r\n        progress: { ...state.progress, ...action.payload }\r\n      };\r\n    case 'SET_RESPONSES':\r\n      const responseMap = new Map();\r\n      action.payload.forEach(response => {\r\n        responseMap.set(response.questionId, response);\r\n      });\r\n      return { ...state, responses: responseMap };\r\n    case 'SET_START_TIME':\r\n      return { ...state, startTime: action.payload };\r\n    case 'SET_LAST_SAVE_TIME':\r\n      return { ...state, lastSaveTime: action.payload };\r\n    case 'SET_COMPLETED':\r\n      return { ...state, isCompleted: action.payload };\r\n    case 'RESET_FORM':\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\ninterface FormContextType {\r\n  state: FormState;\r\n  dispatch: React.Dispatch<FormAction>;\r\n  createUserSession: (userInfo: UserInfo) => Promise<void>;\r\n  saveResponse: (response: QuestionResponse) => Promise<void>;\r\n  navigateToNext: () => void;\r\n  navigateToPrevious: () => void;\r\n  calculateProgress: () => number;\r\n  getCurrentQuestion: () => string | null;\r\n  getCurrentQuestionData: () => {\r\n    category: string;\r\n    subcategory: string;\r\n    topic: string;\r\n    question: string;\r\n    questionId: string;\r\n  } | null;\r\n  getTotalQuestionsInCurrentTopic: () => number;\r\n  getCompletedQuestionsInCurrentTopic: () => number;\r\n  loadUserSession: (sessionId: string) => Promise<void>;\r\n}\r\n\r\nconst FormContext = createContext<FormContextType | undefined>(undefined);\r\n\r\nexport function FormProvider({ children }: { children: ReactNode }) {\r\n  const [state, dispatch] = useReducer(formReducer, initialState);\r\n\r\n  useEffect(() => {\r\n    // Load questions data on mount\r\n    const loadData = async () => {\r\n      try {\r\n        dispatch({ type: 'SET_LOADING', payload: true });\r\n        const data = await loadQuestionsData();\r\n        dispatch({ type: 'SET_QUESTIONS_DATA', payload: data });\r\n        \r\n        // Calculate total questions\r\n        const totalQuestions = data.reduce((total, category) => {\r\n          return total + category.subcategories.reduce((subTotal, subcategory) => {\r\n            return subTotal + subcategory.topics.reduce((topicTotal, topic) => {\r\n              return topicTotal + topic.questions.length;\r\n            }, 0);\r\n          }, 0);\r\n        }, 0);\r\n        \r\n        dispatch({ type: 'UPDATE_PROGRESS', payload: { totalQuestions } });\r\n      } catch (error) {\r\n        dispatch({ type: 'SET_ERROR', payload: 'Failed to load questions data' });\r\n      } finally {\r\n        dispatch({ type: 'SET_LOADING', payload: false });\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  const createUserSession = async (userInfo: UserInfo) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      const response = await api.createUser(userInfo);\r\n      dispatch({ type: 'SET_SESSION_ID', payload: response.sessionId });\r\n      dispatch({ type: 'SET_USER_INFO', payload: userInfo });\r\n      dispatch({ type: 'SET_START_TIME', payload: Date.now() });\r\n      \r\n      // Store session ID in localStorage for recovery\r\n      localStorage.setItem('culturalSurveySessionId', response.sessionId);\r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to create user session' });\r\n      throw error;\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const loadUserSession = async (sessionId: string) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      const user = await api.getUser(sessionId);\r\n      dispatch({ type: 'SET_SESSION_ID', payload: sessionId });\r\n      dispatch({ type: 'SET_USER_INFO', payload: user.userInfo });\r\n      dispatch({ type: 'UPDATE_PROGRESS', payload: user.progress });\r\n      dispatch({ type: 'SET_COMPLETED', payload: user.isCompleted });\r\n      \r\n      // Load responses\r\n      const responses = await api.getUserResponses(sessionId);\r\n      dispatch({ type: 'SET_RESPONSES', payload: responses });\r\n      \r\n      // Set current position\r\n      dispatch({ type: 'SET_CURRENT_POSITION', payload: {\r\n        categoryIndex: user.progress.currentCategory,\r\n        subcategoryIndex: user.progress.currentSubcategory,\r\n        topicIndex: user.progress.currentTopic,\r\n        questionIndex: user.progress.currentQuestion\r\n      }});\r\n      \r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to load user session' });\r\n      throw error;\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const saveResponse = async (response: QuestionResponse) => {\r\n    try {\r\n      await api.saveResponse(response);\r\n      dispatch({ type: 'ADD_RESPONSE', payload: response });\r\n      dispatch({ type: 'SET_LAST_SAVE_TIME', payload: Date.now() });\r\n      \r\n      // Update progress\r\n      const completedQuestions = state.progress.completedQuestions + 1;\r\n      dispatch({ type: 'UPDATE_PROGRESS', payload: { completedQuestions } });\r\n      \r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to save response' });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const getCurrentQuestionData = () => {\r\n    const { categoryIndex, subcategoryIndex, topicIndex, questionIndex } = state.currentPosition;\r\n    \r\n    if (!state.questionsData[categoryIndex]) return null;\r\n    \r\n    const category = state.questionsData[categoryIndex];\r\n    const subcategory = category.subcategories[subcategoryIndex];\r\n    const topic = subcategory?.topics[topicIndex];\r\n    const question = topic?.questions[questionIndex];\r\n    \r\n    if (!question) return null;\r\n    \r\n    return {\r\n      category: category.category,\r\n      subcategory: subcategory.subcategory,\r\n      topic: topic.topic,\r\n      question,\r\n      questionId: `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`\r\n    };\r\n  };\r\n\r\n  const getCurrentQuestion = () => {\r\n    const data = getCurrentQuestionData();\r\n    return data?.question || null;\r\n  };\r\n\r\n  const navigateToNext = () => {\r\n    const { categoryIndex, subcategoryIndex, topicIndex, questionIndex } = state.currentPosition;\r\n    const category = state.questionsData[categoryIndex];\r\n    \r\n    if (!category) return;\r\n    \r\n    const subcategory = category.subcategories[subcategoryIndex];\r\n    const topic = subcategory?.topics[topicIndex];\r\n    \r\n    if (!topic) return;\r\n    \r\n    // Move to next question\r\n    if (questionIndex < topic.questions.length - 1) {\r\n      dispatch({ type: 'SET_CURRENT_POSITION', payload: {\r\n        categoryIndex,\r\n        subcategoryIndex,\r\n        topicIndex,\r\n        questionIndex: questionIndex + 1\r\n      }});\r\n    }\r\n    // Move to next topic\r\n    else if (topicIndex < subcategory.topics.length - 1) {\r\n      dispatch({ type: 'SET_CURRENT_POSITION', payload: {\r\n        categoryIndex,\r\n        subcategoryIndex,\r\n        topicIndex: topicIndex + 1,\r\n        questionIndex: 0\r\n      }});\r\n    }\r\n    // Move to next subcategory\r\n    else if (subcategoryIndex < category.subcategories.length - 1) {\r\n      dispatch({ type: 'SET_CURRENT_POSITION', payload: {\r\n        categoryIndex,\r\n        subcategoryIndex: subcategoryIndex + 1,\r\n        topicIndex: 0,\r\n        questionIndex: 0\r\n      }});\r\n    }\r\n    // Move to next category\r\n    else if (categoryIndex < state.questionsData.length - 1) {\r\n      dispatch({ type: 'SET_CURRENT_POSITION', payload: {\r\n        categoryIndex: categoryIndex + 1,\r\n        subcategoryIndex: 0,\r\n        topicIndex: 0,\r\n        questionIndex: 0\r\n      }});\r\n    }\r\n    // Survey completed\r\n    else {\r\n      dispatch({ type: 'SET_COMPLETED', payload: true });\r\n    }\r\n  };\r\n\r\n  const navigateToPrevious = () => {\r\n    const { categoryIndex, subcategoryIndex, topicIndex, questionIndex } = state.currentPosition;\r\n    \r\n    // Move to previous question\r\n    if (questionIndex > 0) {\r\n      dispatch({ type: 'SET_CURRENT_POSITION', payload: {\r\n        categoryIndex,\r\n        subcategoryIndex,\r\n        topicIndex,\r\n        questionIndex: questionIndex - 1\r\n      }});\r\n    }\r\n    // Move to previous topic\r\n    else if (topicIndex > 0) {\r\n      const prevTopic = state.questionsData[categoryIndex].subcategories[subcategoryIndex].topics[topicIndex - 1];\r\n      dispatch({ type: 'SET_CURRENT_POSITION', payload: {\r\n        categoryIndex,\r\n        subcategoryIndex,\r\n        topicIndex: topicIndex - 1,\r\n        questionIndex: prevTopic.questions.length - 1\r\n      }});\r\n    }\r\n    // Move to previous subcategory\r\n    else if (subcategoryIndex > 0) {\r\n      const prevSubcategory = state.questionsData[categoryIndex].subcategories[subcategoryIndex - 1];\r\n      const lastTopic = prevSubcategory.topics[prevSubcategory.topics.length - 1];\r\n      dispatch({ type: 'SET_CURRENT_POSITION', payload: {\r\n        categoryIndex,\r\n        subcategoryIndex: subcategoryIndex - 1,\r\n        topicIndex: prevSubcategory.topics.length - 1,\r\n        questionIndex: lastTopic.questions.length - 1\r\n      }});\r\n    }\r\n    // Move to previous category\r\n    else if (categoryIndex > 0) {\r\n      const prevCategory = state.questionsData[categoryIndex - 1];\r\n      const lastSubcategory = prevCategory.subcategories[prevCategory.subcategories.length - 1];\r\n      const lastTopic = lastSubcategory.topics[lastSubcategory.topics.length - 1];\r\n      dispatch({ type: 'SET_CURRENT_POSITION', payload: {\r\n        categoryIndex: categoryIndex - 1,\r\n        subcategoryIndex: prevCategory.subcategories.length - 1,\r\n        topicIndex: lastSubcategory.topics.length - 1,\r\n        questionIndex: lastTopic.questions.length - 1\r\n      }});\r\n    }\r\n  };\r\n\r\n  const calculateProgress = () => {\r\n    const totalQuestions = state.progress.totalQuestions;\r\n    const completedQuestions = state.responses.size;\r\n    return totalQuestions > 0 ? (completedQuestions / totalQuestions) * 100 : 0;\r\n  };\r\n\r\n  const getTotalQuestionsInCurrentTopic = () => {\r\n    const { categoryIndex, subcategoryIndex, topicIndex } = state.currentPosition;\r\n    const topic = state.questionsData[categoryIndex]?.subcategories[subcategoryIndex]?.topics[topicIndex];\r\n    return topic?.questions.length || 0;\r\n  };\r\n\r\n  const getCompletedQuestionsInCurrentTopic = () => {\r\n    const { categoryIndex, subcategoryIndex, topicIndex } = state.currentPosition;\r\n    let completed = 0;\r\n    \r\n    const topic = state.questionsData[categoryIndex]?.subcategories[subcategoryIndex]?.topics[topicIndex];\r\n    if (!topic) return 0;\r\n    \r\n    topic.questions.forEach((_, questionIndex) => {\r\n      const questionId = `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\r\n      if (state.responses.has(questionId)) {\r\n        completed++;\r\n      }\r\n    });\r\n    \r\n    return completed;\r\n  };\r\n\r\n  const value: FormContextType = {\r\n    state,\r\n    dispatch,\r\n    createUserSession,\r\n    saveResponse,\r\n    navigateToNext,\r\n    navigateToPrevious,\r\n    calculateProgress,\r\n    getCurrentQuestion,\r\n    getCurrentQuestionData,\r\n    getTotalQuestionsInCurrentTopic,\r\n    getCompletedQuestionsInCurrentTopic,\r\n    loadUserSession\r\n  };\r\n\r\n  return (\r\n    <FormContext.Provider value={value}>\r\n      {children}\r\n    </FormContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useForm() {\r\n  const context = useContext(FormContext);\r\n  if (context === undefined) {\r\n    throw new Error('useForm must be used within a FormProvider');\r\n  }\r\n  return context;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}