{"ast":null,"code":"export const loadQuestionsData = async () => {\n  try {\n    console.log('Loading questions from public/questions.json...');\n    const response = await fetch('/questions.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load questions: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n\n    // Validate the data structure\n    if (!Array.isArray(data) || data.length === 0) {\n      throw new Error('Questions data is not in the expected format');\n    }\n\n    // Validate that each category has the required structure\n    for (const category of data) {\n      if (!category.category || !Array.isArray(category.subcategories)) {\n        throw new Error(`Invalid category structure: ${JSON.stringify(category)}`);\n      }\n      for (const subcategory of category.subcategories) {\n        if (!subcategory.subcategory || !Array.isArray(subcategory.topics)) {\n          throw new Error(`Invalid subcategory structure: ${JSON.stringify(subcategory)}`);\n        }\n        for (const topic of subcategory.topics) {\n          if (!topic.topic || !Array.isArray(topic.questions)) {\n            throw new Error(`Invalid topic structure: ${JSON.stringify(topic)}`);\n          }\n          if (topic.questions.length === 0) {\n            console.warn(`Topic \"${topic.topic}\" has no questions`);\n          }\n        }\n      }\n    }\n    console.log('Questions loaded successfully:', {\n      categories: data.length,\n      totalSubcategories: data.reduce((sum, cat) => sum + cat.subcategories.length, 0),\n      totalTopics: data.reduce((sum, cat) => sum + cat.subcategories.reduce((subSum, sub) => subSum + sub.topics.length, 0), 0),\n      totalQuestions: data.reduce((sum, cat) => sum + cat.subcategories.reduce((subSum, sub) => subSum + sub.topics.reduce((topicSum, topic) => topicSum + topic.questions.length, 0), 0), 0)\n    });\n    return data;\n  } catch (error) {\n    console.error('Error loading questions data:', error);\n\n    // Fallback to test data if loading fails\n    console.log('Falling back to test data...');\n    const fallbackData = [{\n      \"category\": \"Interpersonal Relations\",\n      \"subcategories\": [{\n        \"subcategory\": \"Visiting and hospitality\",\n        \"topics\": [{\n          \"topic\": \"Etiquette in the reception of visitors\",\n          \"questions\": [\"In your region, what are the typical ways people prepare their homes for the arrival of guests? Describe three common preparations that are usually done, such as cleaning, decorating, arranging guest rooms, or any traditional practices.\", \"In your region, what is the first most common thing a visitor does when they enter your house? Focus on actions and not greetings and provide two most common ones.\", \"In your region, if applicable, what are some traditional gifts or souvenirs given to guests during their visit? Specify two most common ones.\", \"In your region, what is the common proper etiquette for sending off a guest who is visiting from another city?\", \"In your region, what specific rituals or traditions are followed when someone visits your home for the first time? Specify two most common.\"]\n        }]\n      }]\n    }];\n    return fallbackData;\n  }\n};\n\n// Rest of your helper functions remain the same...\nexport const generateQuestionId = (categoryIndex, subcategoryIndex, topicIndex, questionIndex) => {\n  return `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\n};\nexport const parseQuestionId = questionId => {\n  const [categoryIndex, subcategoryIndex, topicIndex, questionIndex] = questionId.split('-').map(Number);\n  return {\n    categoryIndex,\n    subcategoryIndex,\n    topicIndex,\n    questionIndex\n  };\n};\nexport const formatTime = seconds => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\n};\nexport const validateAnswer = answer => {\n  if (!answer || answer.trim().length === 0) {\n    return {\n      isValid: false,\n      message: 'Please provide an answer'\n    };\n  }\n  if (answer.trim().length < 4) {\n    return {\n      isValid: false,\n      message: 'Please provide a more detailed answer (at least 4 characters)'\n    };\n  }\n  if (answer.length > 5000) {\n    return {\n      isValid: false,\n      message: 'Answer is too long (maximum 5000 characters)'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\nexport const shouldShowAttentionCheck = questionCount => {\n  // Show attention check every 15 questions, but not on the very first question\n  return questionCount > 0 && questionCount % 15 === 0;\n};\nexport const generateAttentionCheck = (currentCategory, currentTopic, userInfo) => {\n  const checks = [\n  // Memory checks about current context\n  {\n    question: `You are currently answering questions about \"${currentCategory}\". Which category are you working on?`,\n    options: [currentCategory, 'Food and Cuisine', 'Religious Practices', 'Economic Activities'],\n    correctAnswer: 0,\n    type: 'context'\n  }, {\n    question: `Within ${currentCategory}, you're focusing on \"${currentTopic}\". What is your current topic?`,\n    options: [currentTopic, 'Traditional Ceremonies', 'Seasonal Celebrations', 'Community Gatherings'],\n    correctAnswer: 0,\n    type: 'context'\n  },\n  // Basic comprehension checks\n  {\n    question: 'What type of survey are you participating in?',\n    options: ['Cultural practices and traditions in India', 'Political opinions and preferences', 'Product reviews and ratings', 'Medical health assessment'],\n    correctAnswer: 0,\n    type: 'comprehension'\n  }, {\n    question: 'When answering questions, you should base your responses on:',\n    options: ['Your knowledge of cultural practices in your region', 'What you think researchers want to hear', 'Random guesses and made-up information', 'Practices from other countries'],\n    correctAnswer: 0,\n    type: 'comprehension'\n  },\n  // Personal info verification (if available)\n  ...(userInfo ? [{\n    question: `You indicated that you are from ${userInfo.region} India. Which region did you select?`,\n    options: [`${userInfo.region} India`, 'North India', 'South India', 'I did not specify a region'].filter((option, index, array) =>\n    // Remove duplicates if user's region is North/South\n    array.indexOf(option) === index).slice(0, 4),\n    correctAnswer: 0,\n    type: 'personal'\n  }] : []),\n  // Simple logical checks\n  {\n    question: 'If a cultural practice is described as \"widely shared within a cultural group,\" it likely represents:',\n    options: ['Cultural commonsense', 'Individual personal preference', 'Rare or unusual behavior', 'Foreign cultural influence'],\n    correctAnswer: 0,\n    type: 'logical'\n  }, {\n    question: 'Which of the following would be the most appropriate response length for detailed cultural questions?',\n    options: ['A few sentences explaining the practice with examples', 'Single words like \"yes\" or \"no\"', 'Random letters and symbols', 'Copying the same answer for every question'],\n    correctAnswer: 0,\n    type: 'instruction'\n  }];\n\n  // Select a random check\n  const randomCheck = checks[Math.floor(Math.random() * checks.length)];\n\n  // Shuffle options to prevent pattern recognition\n  const correctOption = randomCheck.options[randomCheck.correctAnswer];\n  const shuffledOptions = [...randomCheck.options];\n  for (let i = shuffledOptions.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledOptions[i], shuffledOptions[j]] = [shuffledOptions[j], shuffledOptions[i]];\n  }\n  const newCorrectAnswer = shuffledOptions.indexOf(correctOption);\n  return {\n    question: randomCheck.question,\n    options: shuffledOptions,\n    correctAnswer: newCorrectAnswer,\n    currentTopic,\n    currentCategory,\n    type: randomCheck.type\n  };\n};\n\n// Add quality control functions\nexport const analyzeResponseQuality = answer => {\n  const issues = [];\n  let score = 100; // Start with perfect score\n\n  const text = answer.toLowerCase().trim();\n\n  // Check for common low-quality indicators\n  const lowQualityPatterns = [/^(none|n\\/a|na|nothing|no|idk|i don't know|dk|dunno)$/i, /^(same|similar|normal|usual|regular|typical|standard)$/i, /^(ok|okay|good|fine|nice|cool)$/i, /^.{1,3}$/,\n  // Very short responses\n  /(.)\\1{4,}/,\n  // Repeated characters (aaaaa, 11111)\n  /^[a-z]{8,}$/i,\n  // Random letter strings without spaces\n  /qwerty|asdf|zxcv|abcd|1234|test|xxx/i,\n  // Keyboard mashing\n  /lorem ipsum|placeholder|sample text/i];\n\n  // Check for gibberish patterns\n  const gibberishPatterns = [/^[bcdfghjklmnpqrstvwxyz]{5,}$/i,\n  // Too many consonants\n  /^[aeiou]{5,}$/i,\n  // Too many vowels\n  /(.{2,})\\1{2,}/,\n  // Repeated patterns (abcabc)\n  /^[^a-z]*$/i // No letters at all\n  ];\n\n  // Common spam/lazy responses\n  const spamPhrases = ['none that i know', 'nothing special', 'dont know', 'not sure', 'no idea', 'same as others', 'normal stuff', 'regular things', 'i think', 'maybe', 'probably', 'i guess'];\n\n  // Check patterns\n  lowQualityPatterns.forEach(pattern => {\n    if (pattern.test(text)) {\n      issues.push('Very short or generic response');\n      score -= 30;\n    }\n  });\n  gibberishPatterns.forEach(pattern => {\n    if (pattern.test(text)) {\n      issues.push('Appears to be random characters or gibberish');\n      score -= 50;\n    }\n  });\n\n  // Check for spam phrases\n  spamPhrases.forEach(phrase => {\n    if (text.includes(phrase)) {\n      issues.push('Generic or non-informative response');\n      score -= 20;\n    }\n  });\n\n  // Check for excessive repetition of words\n  const words = text.split(/\\s+/);\n  const wordCount = {};\n  words.forEach(word => {\n    if (word.length > 2) {\n      wordCount[word] = (wordCount[word] || 0) + 1;\n    }\n  });\n  const repeatedWords = Object.entries(wordCount).filter(([word, count]) => count > 3);\n  if (repeatedWords.length > 0) {\n    issues.push('Excessive word repetition');\n    score -= 25;\n  }\n\n  // Check response length relative to question complexity\n  if (text.length < 15 && !issues.includes('Very short or generic response')) {\n    issues.push('Response may be too brief for the question');\n    score -= 15;\n  }\n\n  // Check for lack of specificity\n  const vaguePhrases = ['something', 'things', 'stuff', 'anything', 'everything'];\n  const vagueCount = vaguePhrases.reduce((count, phrase) => count + (text.match(new RegExp(phrase, 'g')) || []).length, 0);\n  if (vagueCount > 2) {\n    issues.push('Response lacks specific details');\n    score -= 20;\n  }\n\n  // Positive indicators (can boost score slightly)\n  const positiveIndicators = [/\\b(example|for instance|specifically|traditionally|commonly|usually|typically)\\b/i, /\\b(in my region|in our area|locally|here we|we usually)\\b/i, /\\b(such as|like|including|consists of)\\b/i];\n  let positiveCount = 0;\n  positiveIndicators.forEach(pattern => {\n    if (pattern.test(text)) positiveCount++;\n  });\n  if (positiveCount > 0) {\n    score += Math.min(positiveCount * 5, 15); // Max 15 point bonus\n  }\n  score = Math.max(0, Math.min(100, score)); // Clamp between 0-100\n\n  return {\n    isLowQuality: score < 40,\n    issues,\n    score\n  };\n};\n\n// Track user patterns\nexport const analyzeUserPattern = responses => {\n  const warnings = [];\n  let suspiciousPattern = false;\n  if (responses.length < 3) return {\n    suspiciousPattern,\n    warnings\n  };\n\n  // Check for consistent low time spent\n  const avgTimeSpent = responses.reduce((sum, r) => sum + r.timeSpent, 0) / responses.length;\n  if (avgTimeSpent < 10) {\n    warnings.push('Consistently very fast responses');\n    suspiciousPattern = true;\n  }\n\n  // Check for similar responses\n  const answers = responses.map(r => r.answer.toLowerCase().trim());\n  const uniqueAnswers = new Set(answers);\n  if (uniqueAnswers.size < answers.length * 0.7) {\n    warnings.push('Many similar or identical responses');\n    suspiciousPattern = true;\n  }\n\n  // Check for quality decline\n  const recentResponses = responses.slice(-5);\n  const recentQualityScores = recentResponses.map(r => analyzeResponseQuality(r.answer).score);\n  const avgRecentQuality = recentQualityScores.reduce((sum, score) => sum + score, 0) / recentQualityScores.length;\n  if (avgRecentQuality < 30) {\n    warnings.push('Recent response quality is very low');\n    suspiciousPattern = true;\n  }\n  return {\n    suspiciousPattern,\n    warnings\n  };\n};\nexport const debounce = (func, wait) => {\n  let timeout;\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(null, args), wait);\n  };\n};\nexport const getEstimatedTimeRemaining = (totalQuestions, completedQuestions, averageTimePerQuestion = 120) => {\n  const remainingQuestions = totalQuestions - completedQuestions;\n  const estimatedSeconds = remainingQuestions * averageTimePerQuestion;\n  if (estimatedSeconds < 3600) {\n    const minutes = Math.ceil(estimatedSeconds / 60);\n    return `~${minutes} minute${minutes !== 1 ? 's' : ''} remaining`;\n  } else {\n    const hours = Math.ceil(estimatedSeconds / 3600);\n    return `~${hours} hour${hours !== 1 ? 's' : ''} remaining`;\n  }\n};","map":{"version":3,"names":["loadQuestionsData","console","log","response","fetch","ok","Error","status","statusText","data","json","Array","isArray","length","category","subcategories","JSON","stringify","subcategory","topics","topic","questions","warn","categories","totalSubcategories","reduce","sum","cat","totalTopics","subSum","sub","totalQuestions","topicSum","error","fallbackData","generateQuestionId","categoryIndex","subcategoryIndex","topicIndex","questionIndex","parseQuestionId","questionId","split","map","Number","formatTime","seconds","mins","Math","floor","secs","toString","padStart","validateAnswer","answer","trim","isValid","message","shouldShowAttentionCheck","questionCount","generateAttentionCheck","currentCategory","currentTopic","userInfo","checks","question","options","correctAnswer","type","region","filter","option","index","array","indexOf","slice","randomCheck","random","correctOption","shuffledOptions","i","j","newCorrectAnswer","analyzeResponseQuality","issues","score","text","toLowerCase","lowQualityPatterns","gibberishPatterns","spamPhrases","forEach","pattern","test","push","phrase","includes","words","wordCount","word","repeatedWords","Object","entries","count","vaguePhrases","vagueCount","match","RegExp","positiveIndicators","positiveCount","min","max","isLowQuality","analyzeUserPattern","responses","warnings","suspiciousPattern","avgTimeSpent","r","timeSpent","answers","uniqueAnswers","Set","size","recentResponses","recentQualityScores","avgRecentQuality","debounce","func","wait","timeout","args","clearTimeout","setTimeout","apply","getEstimatedTimeRemaining","completedQuestions","averageTimePerQuestion","remainingQuestions","estimatedSeconds","minutes","ceil","hours"],"sources":["C:/Users/sangm/OneDrive - Brock University/CommonsenseForm/client/src/utils/helpers.ts"],"sourcesContent":["import { Category, AttentionCheck } from '../types/index.ts';\r\n\r\nexport const loadQuestionsData = async (): Promise<Category[]> => {\r\n  try {\r\n    console.log('Loading questions from public/questions.json...');\r\n    \r\n    const response = await fetch('/questions.json');\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to load questions: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data: Category[] = await response.json();\r\n    \r\n    // Validate the data structure\r\n    if (!Array.isArray(data) || data.length === 0) {\r\n      throw new Error('Questions data is not in the expected format');\r\n    }\r\n    \r\n    // Validate that each category has the required structure\r\n    for (const category of data) {\r\n      if (!category.category || !Array.isArray(category.subcategories)) {\r\n        throw new Error(`Invalid category structure: ${JSON.stringify(category)}`);\r\n      }\r\n      \r\n      for (const subcategory of category.subcategories) {\r\n        if (!subcategory.subcategory || !Array.isArray(subcategory.topics)) {\r\n          throw new Error(`Invalid subcategory structure: ${JSON.stringify(subcategory)}`);\r\n        }\r\n        \r\n        for (const topic of subcategory.topics) {\r\n          if (!topic.topic || !Array.isArray(topic.questions)) {\r\n            throw new Error(`Invalid topic structure: ${JSON.stringify(topic)}`);\r\n          }\r\n          \r\n          if (topic.questions.length === 0) {\r\n            console.warn(`Topic \"${topic.topic}\" has no questions`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log('Questions loaded successfully:', {\r\n      categories: data.length,\r\n      totalSubcategories: data.reduce((sum, cat) => sum + cat.subcategories.length, 0),\r\n      totalTopics: data.reduce((sum, cat) => \r\n        sum + cat.subcategories.reduce((subSum, sub) => subSum + sub.topics.length, 0), 0),\r\n      totalQuestions: data.reduce((sum, cat) => \r\n        sum + cat.subcategories.reduce((subSum, sub) => \r\n          subSum + sub.topics.reduce((topicSum, topic) => topicSum + topic.questions.length, 0), 0), 0)\r\n    });\r\n    \r\n    return data;\r\n    \r\n  } catch (error) {\r\n    console.error('Error loading questions data:', error);\r\n    \r\n    // Fallback to test data if loading fails\r\n    console.log('Falling back to test data...');\r\n    const fallbackData: Category[] = [\r\n      {\r\n        \"category\": \"Interpersonal Relations\",\r\n        \"subcategories\": [\r\n          {\r\n            \"subcategory\": \"Visiting and hospitality\",\r\n            \"topics\": [\r\n              {\r\n                \"topic\": \"Etiquette in the reception of visitors\",\r\n                \"questions\": [\r\n                  \"In your region, what are the typical ways people prepare their homes for the arrival of guests? Describe three common preparations that are usually done, such as cleaning, decorating, arranging guest rooms, or any traditional practices.\",\r\n                  \"In your region, what is the first most common thing a visitor does when they enter your house? Focus on actions and not greetings and provide two most common ones.\",\r\n                  \"In your region, if applicable, what are some traditional gifts or souvenirs given to guests during their visit? Specify two most common ones.\",\r\n                  \"In your region, what is the common proper etiquette for sending off a guest who is visiting from another city?\",\r\n                  \"In your region, what specific rituals or traditions are followed when someone visits your home for the first time? Specify two most common.\"\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ];\r\n    \r\n    return fallbackData;\r\n  }\r\n};\r\n\r\n// Rest of your helper functions remain the same...\r\nexport const generateQuestionId = (\r\n  categoryIndex: number,\r\n  subcategoryIndex: number,\r\n  topicIndex: number,\r\n  questionIndex: number\r\n): string => {\r\n  return `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\r\n};\r\n\r\nexport const parseQuestionId = (questionId: string) => {\r\n  const [categoryIndex, subcategoryIndex, topicIndex, questionIndex] = questionId.split('-').map(Number);\r\n  return { categoryIndex, subcategoryIndex, topicIndex, questionIndex };\r\n};\r\n\r\nexport const formatTime = (seconds: number): string => {\r\n  const mins = Math.floor(seconds / 60);\r\n  const secs = seconds % 60;\r\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\r\n};\r\n\r\nexport const validateAnswer = (answer: string): { isValid: boolean; message?: string } => {\r\n  if (!answer || answer.trim().length === 0) {\r\n    return { isValid: false, message: 'Please provide an answer' };\r\n  }\r\n  \r\n  if (answer.trim().length < 4) {\r\n    return { isValid: false, message: 'Please provide a more detailed answer (at least 4 characters)' };\r\n  }\r\n  \r\n  if (answer.length > 5000) {\r\n    return { isValid: false, message: 'Answer is too long (maximum 5000 characters)' };\r\n  }\r\n  \r\n  return { isValid: true };\r\n};\r\n\r\nexport const shouldShowAttentionCheck = (questionCount: number): boolean => {\r\n  // Show attention check every 15 questions, but not on the very first question\r\n  return questionCount > 0 && questionCount % 15 === 0;\r\n};\r\n\r\nexport const generateAttentionCheck = (\r\n  currentCategory: string,\r\n  currentTopic: string,\r\n  userInfo?: { region: string; age: number }\r\n): AttentionCheck => {\r\n  const checks = [\r\n    // Memory checks about current context\r\n    {\r\n      question: `You are currently answering questions about \"${currentCategory}\". Which category are you working on?`,\r\n      options: [\r\n        currentCategory,\r\n        'Food and Cuisine',\r\n        'Religious Practices',\r\n        'Economic Activities'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'context'\r\n    },\r\n    {\r\n      question: `Within ${currentCategory}, you're focusing on \"${currentTopic}\". What is your current topic?`,\r\n      options: [\r\n        currentTopic,\r\n        'Traditional Ceremonies',\r\n        'Seasonal Celebrations',\r\n        'Community Gatherings'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'context'\r\n    },\r\n    \r\n    // Basic comprehension checks\r\n    {\r\n      question: 'What type of survey are you participating in?',\r\n      options: [\r\n        'Cultural practices and traditions in India',\r\n        'Political opinions and preferences',\r\n        'Product reviews and ratings',\r\n        'Medical health assessment'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'comprehension'\r\n    },\r\n    {\r\n      question: 'When answering questions, you should base your responses on:',\r\n      options: [\r\n        'Your knowledge of cultural practices in your region',\r\n        'What you think researchers want to hear',\r\n        'Random guesses and made-up information',\r\n        'Practices from other countries'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'comprehension'\r\n    },\r\n    \r\n    // Personal info verification (if available)\r\n    ...(userInfo ? [\r\n      {\r\n        question: `You indicated that you are from ${userInfo.region} India. Which region did you select?`,\r\n        options: [\r\n          `${userInfo.region} India`,\r\n          'North India',\r\n          'South India',\r\n          'I did not specify a region'\r\n        ].filter((option, index, array) => \r\n          // Remove duplicates if user's region is North/South\r\n          array.indexOf(option) === index\r\n        ).slice(0, 4),\r\n        correctAnswer: 0,\r\n        type: 'personal'\r\n      }\r\n    ] : []),\r\n    \r\n    // Simple logical checks\r\n    {\r\n      question: 'If a cultural practice is described as \"widely shared within a cultural group,\" it likely represents:',\r\n      options: [\r\n        'Cultural commonsense',\r\n        'Individual personal preference',\r\n        'Rare or unusual behavior',\r\n        'Foreign cultural influence'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'logical'\r\n    },\r\n    {\r\n      question: 'Which of the following would be the most appropriate response length for detailed cultural questions?',\r\n      options: [\r\n        'A few sentences explaining the practice with examples',\r\n        'Single words like \"yes\" or \"no\"',\r\n        'Random letters and symbols',\r\n        'Copying the same answer for every question'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'instruction'\r\n    }\r\n  ];\r\n  \r\n  // Select a random check\r\n  const randomCheck = checks[Math.floor(Math.random() * checks.length)];\r\n  \r\n  // Shuffle options to prevent pattern recognition\r\n  const correctOption = randomCheck.options[randomCheck.correctAnswer];\r\n  const shuffledOptions = [...randomCheck.options];\r\n  \r\n  for (let i = shuffledOptions.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffledOptions[i], shuffledOptions[j]] = [shuffledOptions[j], shuffledOptions[i]];\r\n  }\r\n  \r\n  const newCorrectAnswer = shuffledOptions.indexOf(correctOption);\r\n  \r\n  return {\r\n    question: randomCheck.question,\r\n    options: shuffledOptions,\r\n    correctAnswer: newCorrectAnswer,\r\n    currentTopic,\r\n    currentCategory,\r\n    type: randomCheck.type\r\n  };\r\n};\r\n\r\n// Add quality control functions\r\nexport const analyzeResponseQuality = (answer: string): {\r\n  isLowQuality: boolean;\r\n  issues: string[];\r\n  score: number;\r\n} => {\r\n  const issues: string[] = [];\r\n  let score = 100; // Start with perfect score\r\n\r\n  const text = answer.toLowerCase().trim();\r\n  \r\n  // Check for common low-quality indicators\r\n  const lowQualityPatterns = [\r\n    /^(none|n\\/a|na|nothing|no|idk|i don't know|dk|dunno)$/i,\r\n    /^(same|similar|normal|usual|regular|typical|standard)$/i,\r\n    /^(ok|okay|good|fine|nice|cool)$/i,\r\n    /^.{1,3}$/, // Very short responses\r\n    /(.)\\1{4,}/, // Repeated characters (aaaaa, 11111)\r\n    /^[a-z]{8,}$/i, // Random letter strings without spaces\r\n    /qwerty|asdf|zxcv|abcd|1234|test|xxx/i, // Keyboard mashing\r\n    /lorem ipsum|placeholder|sample text/i,\r\n  ];\r\n\r\n  // Check for gibberish patterns\r\n  const gibberishPatterns = [\r\n    /^[bcdfghjklmnpqrstvwxyz]{5,}$/i, // Too many consonants\r\n    /^[aeiou]{5,}$/i, // Too many vowels\r\n    /(.{2,})\\1{2,}/, // Repeated patterns (abcabc)\r\n    /^[^a-z]*$/i, // No letters at all\r\n  ];\r\n\r\n  // Common spam/lazy responses\r\n  const spamPhrases = [\r\n    'none that i know',\r\n    'nothing special',\r\n    'dont know',\r\n    'not sure',\r\n    'no idea',\r\n    'same as others',\r\n    'normal stuff',\r\n    'regular things',\r\n    'i think',\r\n    'maybe',\r\n    'probably',\r\n    'i guess'\r\n  ];\r\n\r\n  // Check patterns\r\n  lowQualityPatterns.forEach(pattern => {\r\n    if (pattern.test(text)) {\r\n      issues.push('Very short or generic response');\r\n      score -= 30;\r\n    }\r\n  });\r\n\r\n  gibberishPatterns.forEach(pattern => {\r\n    if (pattern.test(text)) {\r\n      issues.push('Appears to be random characters or gibberish');\r\n      score -= 50;\r\n    }\r\n  });\r\n\r\n  // Check for spam phrases\r\n  spamPhrases.forEach(phrase => {\r\n    if (text.includes(phrase)) {\r\n      issues.push('Generic or non-informative response');\r\n      score -= 20;\r\n    }\r\n  });\r\n\r\n  // Check for excessive repetition of words\r\n  const words = text.split(/\\s+/);\r\n  const wordCount = {};\r\n  words.forEach(word => {\r\n    if (word.length > 2) {\r\n      wordCount[word] = (wordCount[word] || 0) + 1;\r\n    }\r\n  });\r\n\r\n  const repeatedWords = Object.entries(wordCount).filter(([word, count]) => (count as number) > 3);\r\n  if (repeatedWords.length > 0) {\r\n    issues.push('Excessive word repetition');\r\n    score -= 25;\r\n  }\r\n\r\n  // Check response length relative to question complexity\r\n  if (text.length < 15 && !issues.includes('Very short or generic response')) {\r\n    issues.push('Response may be too brief for the question');\r\n    score -= 15;\r\n  }\r\n\r\n  // Check for lack of specificity\r\n  const vaguePhrases = ['something', 'things', 'stuff', 'anything', 'everything'];\r\n  const vagueCount = vaguePhrases.reduce((count, phrase) => \r\n    count + (text.match(new RegExp(phrase, 'g')) || []).length, 0\r\n  );\r\n  \r\n  if (vagueCount > 2) {\r\n    issues.push('Response lacks specific details');\r\n    score -= 20;\r\n  }\r\n\r\n  // Positive indicators (can boost score slightly)\r\n  const positiveIndicators = [\r\n    /\\b(example|for instance|specifically|traditionally|commonly|usually|typically)\\b/i,\r\n    /\\b(in my region|in our area|locally|here we|we usually)\\b/i,\r\n    /\\b(such as|like|including|consists of)\\b/i,\r\n  ];\r\n\r\n  let positiveCount = 0;\r\n  positiveIndicators.forEach(pattern => {\r\n    if (pattern.test(text)) positiveCount++;\r\n  });\r\n\r\n  if (positiveCount > 0) {\r\n    score += Math.min(positiveCount * 5, 15); // Max 15 point bonus\r\n  }\r\n\r\n  score = Math.max(0, Math.min(100, score)); // Clamp between 0-100\r\n  \r\n  return {\r\n    isLowQuality: score < 40,\r\n    issues,\r\n    score\r\n  };\r\n};\r\n\r\n// Track user patterns\r\nexport const analyzeUserPattern = (responses: Array<{answer: string, timeSpent: number}>): {\r\n  suspiciousPattern: boolean;\r\n  warnings: string[];\r\n} => {\r\n  const warnings: string[] = [];\r\n  let suspiciousPattern = false;\r\n\r\n  if (responses.length < 3) return { suspiciousPattern, warnings };\r\n\r\n  // Check for consistent low time spent\r\n  const avgTimeSpent = responses.reduce((sum, r) => sum + r.timeSpent, 0) / responses.length;\r\n  if (avgTimeSpent < 10) {\r\n    warnings.push('Consistently very fast responses');\r\n    suspiciousPattern = true;\r\n  }\r\n\r\n  // Check for similar responses\r\n  const answers = responses.map(r => r.answer.toLowerCase().trim());\r\n  const uniqueAnswers = new Set(answers);\r\n  if (uniqueAnswers.size < answers.length * 0.7) {\r\n    warnings.push('Many similar or identical responses');\r\n    suspiciousPattern = true;\r\n  }\r\n\r\n  // Check for quality decline\r\n  const recentResponses = responses.slice(-5);\r\n  const recentQualityScores = recentResponses.map(r => analyzeResponseQuality(r.answer).score);\r\n  const avgRecentQuality = recentQualityScores.reduce((sum, score) => sum + score, 0) / recentQualityScores.length;\r\n  \r\n  if (avgRecentQuality < 30) {\r\n    warnings.push('Recent response quality is very low');\r\n    suspiciousPattern = true;\r\n  }\r\n\r\n  return { suspiciousPattern, warnings };\r\n};\r\n\r\nexport const debounce = <T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait: number\r\n): ((...args: Parameters<T>) => void) => {\r\n  let timeout: ReturnType<typeof setTimeout>;\r\n  \r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func.apply(null, args), wait);\r\n  };\r\n};\r\n\r\nexport const getEstimatedTimeRemaining = (\r\n  totalQuestions: number,\r\n  completedQuestions: number,\r\n  averageTimePerQuestion: number = 120\r\n): string => {\r\n  const remainingQuestions = totalQuestions - completedQuestions;\r\n  const estimatedSeconds = remainingQuestions * averageTimePerQuestion;\r\n  \r\n  if (estimatedSeconds < 3600) {\r\n    const minutes = Math.ceil(estimatedSeconds / 60);\r\n    return `~${minutes} minute${minutes !== 1 ? 's' : ''} remaining`;\r\n  } else {\r\n    const hours = Math.ceil(estimatedSeconds / 3600);\r\n    return `~${hours} hour${hours !== 1 ? 's' : ''} remaining`;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}