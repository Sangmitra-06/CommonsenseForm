{"ast":null,"code":"export const loadQuestionsData = async () => {\n  try {\n    console.log('Loading questions from public/questions.json...');\n    const response = await fetch('/questions.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load questions: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n\n    // Validate the data structure\n    if (!Array.isArray(data) || data.length === 0) {\n      throw new Error('Questions data is not in the expected format');\n    }\n\n    // Calculate totals for logging\n    const totalQuestions = data.reduce((sum, cat) => sum + cat.subcategories.reduce((subSum, sub) => subSum + sub.topics.reduce((topicSum, topic) => topicSum + topic.questions.length, 0), 0), 0);\n    console.log('Questions loaded successfully:', {\n      categories: data.length,\n      totalSubcategories: data.reduce((sum, cat) => sum + cat.subcategories.length, 0),\n      totalTopics: data.reduce((sum, cat) => sum + cat.subcategories.reduce((subSum, sub) => subSum + sub.topics.length, 0), 0),\n      totalQuestions\n    });\n    return data;\n  } catch (error) {\n    console.error('Error loading questions data:', error);\n    throw new Error('Failed to load questions data');\n  }\n};\nexport const validateAnswer = answer => {\n  if (!answer || answer.trim().length === 0) {\n    return {\n      isValid: false,\n      message: 'Please provide an answer or specify \"none\" if no answer exists'\n    };\n  }\n  if (answer.trim().length < 4) {\n    return {\n      isValid: false,\n      message: 'Please provide a more detailed answer (at least 4 characters) or specify \"none\"'\n    };\n  }\n  if (answer.length > 5000) {\n    return {\n      isValid: false,\n      message: 'Answer is too long (maximum 5000 characters)'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// UPDATED: Changed from 15 to 7 questions\nexport const shouldShowAttentionCheck = questionCount => {\n  // Show attention check at questions 7, 14, 21, 28, etc.\n  // But not at 0 (start of survey)\n  console.log('Checking if should show attention check:', {\n    questionCount,\n    isDivisibleBy7: questionCount > 0 && questionCount % 7 === 0,\n    result: questionCount > 0 && questionCount % 7 === 0\n  });\n  return questionCount > 0 && questionCount % 7 === 0;\n};\n\n// Comprehensive quality analysis\nexport const analyzeResponseQuality = answer => {\n  const issues = [];\n  let score = 100;\n  let isNoneResponse = false;\n  let isGibberish = false;\n  const text = answer.toLowerCase().trim();\n\n  // Check for \"none\" type responses\n  const nonePatterns = [/^(none|n\\/a|na|nothing|no|idk|i don't know|dk|dunno)$/i, /^(none that i know|nothing that i know|no idea|not sure|dont know|don't know)$/i, /^(same|similar|normal|usual|regular|typical|standard|common)$/i, /^(not applicable|not available|no information|no data)$/i];\n  nonePatterns.forEach(pattern => {\n    if (pattern.test(text)) {\n      isNoneResponse = true;\n      issues.push('Generic \"none\" or non-informative response');\n      score -= 40;\n    }\n  });\n\n  // Check for gibberish patterns\n  const gibberishPatterns = [/^[bcdfghjklmnpqrstvwxyz]{6,}$/i,\n  // Too many consonants\n  /^[aeiou]{6,}$/i,\n  // Too many vowels\n  /(.{3,})\\1{2,}/,\n  // Repeated patterns (abcabc)\n  /^[^a-z\\s]*$/i,\n  // No letters at all\n  /^[a-z]{8,}$/i // Long strings without spaces\n  ];\n\n  // Keyboard mashing patterns\n  const mashingPatterns = [/qwerty|asdf|zxcv|hjkl|yuiop/i, /abcd|1234|test|xxx|yyy|zzz/i, /(.)\\1{4,}/ // Same character repeated 5+ times\n  ];\n  gibberishPatterns.forEach(pattern => {\n    if (pattern.test(text)) {\n      isGibberish = true;\n      issues.push('Appears to be random characters or gibberish');\n      score -= 60;\n    }\n  });\n  mashingPatterns.forEach(pattern => {\n    if (pattern.test(text)) {\n      isGibberish = true;\n      issues.push('Keyboard mashing or test input detected');\n      score -= 50;\n    }\n  });\n\n  // Check for excessive repetition of words\n  const words = text.split(/\\s+/).filter(word => word.length > 2);\n  const wordCount = {};\n  words.forEach(word => {\n    wordCount[word] = (wordCount[word] || 0) + 1;\n  });\n  const repeatedWords = Object.entries(wordCount).filter(([word, count]) => count > 3);\n  if (repeatedWords.length > 0) {\n    issues.push('Excessive word repetition');\n    score -= 30;\n  }\n\n  // Check for lack of specificity\n  const vaguePhrases = ['something', 'things', 'stuff', 'anything', 'everything'];\n  const vagueCount = vaguePhrases.reduce((count, phrase) => count + (text.match(new RegExp(`\\\\b${phrase}\\\\b`, 'g')) || []).length, 0);\n  if (vagueCount > 3) {\n    issues.push('Response lacks specific details');\n    score -= 15;\n  }\n\n  // Positive indicators\n  const positiveIndicators = [/\\b(example|for instance|specifically|traditionally|commonly|usually|typically)\\b/i, /\\b(in my region|in our area|locally|here we|we usually|in our culture)\\b/i, /\\b(such as|like|including|consists of|involves|includes)\\b/i];\n  let positiveCount = 0;\n  positiveIndicators.forEach(pattern => {\n    if (pattern.test(text)) positiveCount++;\n  });\n  if (positiveCount > 0) {\n    score += Math.min(positiveCount * 8, 20);\n  }\n  score = Math.max(0, Math.min(100, score));\n  return {\n    isLowQuality: score < 30,\n    issues,\n    score,\n    isNoneResponse,\n    isGibberish\n  };\n};\n\n// FIXED: Comprehensive pattern analysis\n// Comprehensive pattern analysis\nexport const analyzeUserPattern = responses => {\n  const warnings = [];\n  let suspiciousPattern = false;\n  if (responses.length < 5) {\n    return {\n      suspiciousPattern,\n      warnings,\n      noneResponseRate: 0,\n      gibberishResponseRate: 0,\n      fastResponseRate: 0,\n      issueType: null\n    };\n  }\n\n  // Analyze response patterns\n  let noneCount = 0;\n  let gibberishCount = 0;\n  let fastResponseCount = 0;\n  responses.forEach(response => {\n    const analysis = analyzeResponseQuality(response.answer);\n    if (analysis.isNoneResponse) noneCount++;\n    if (analysis.isGibberish) gibberishCount++;\n\n    // FIXED: Check for responses that are TOO FAST (less than 8 seconds)\n    // Previously this was checking if timeSpent < 8, which is correct\n    // But make sure we're getting actual time values\n    console.log('Response time check:', {\n      answer: response.answer.substring(0, 20) + '...',\n      timeSpent: response.timeSpent,\n      isFast: response.timeSpent < 8\n    });\n    if (response.timeSpent < 8) fastResponseCount++;\n  });\n  const noneResponseRate = noneCount / responses.length * 100;\n  const gibberishResponseRate = gibberishCount / responses.length * 100;\n  const fastResponseRate = fastResponseCount / responses.length * 100;\n  console.log('Pattern analysis results:', {\n    totalResponses: responses.length,\n    noneCount,\n    gibberishCount,\n    fastResponseCount,\n    noneResponseRate: noneResponseRate.toFixed(1),\n    gibberishResponseRate: gibberishResponseRate.toFixed(1),\n    fastResponseRate: fastResponseRate.toFixed(1)\n  });\n  let issueCount = 0;\n  let primaryIssue = null;\n\n  // Check for problematic patterns (30% threshold for all)\n  if (noneResponseRate >= 30) {\n    warnings.push(`High rate of \"none\" responses (${noneResponseRate.toFixed(1)}%)`);\n    suspiciousPattern = true;\n    issueCount++;\n    if (!primaryIssue) primaryIssue = 'none';\n  }\n  if (gibberishResponseRate >= 30) {\n    warnings.push(`High rate of gibberish responses (${gibberishResponseRate.toFixed(1)}%)`);\n    suspiciousPattern = true;\n    issueCount++;\n    if (!primaryIssue) primaryIssue = 'gibberish';\n  }\n\n  // FIXED: Make sure this is checking for responses that are TOO FAST\n  if (fastResponseRate >= 30) {\n    warnings.push(`High rate of very quick responses (${fastResponseRate.toFixed(1)}% completed in under 8 seconds)`);\n    suspiciousPattern = true;\n    issueCount++;\n    if (!primaryIssue) primaryIssue = 'speed';\n    console.log('Fast response pattern detected:', {\n      fastResponseRate: fastResponseRate.toFixed(1),\n      threshold: '30%',\n      fastResponseCount,\n      totalResponses: responses.length\n    });\n  }\n\n  // Check for similar responses\n  const answers = responses.map(r => r.answer.toLowerCase().trim());\n  const uniqueAnswers = new Set(answers);\n  if (uniqueAnswers.size < answers.length * 0.6) {\n    warnings.push('Many similar or identical responses');\n    suspiciousPattern = true;\n    issueCount++;\n    if (!primaryIssue) primaryIssue = 'repetition';\n  }\n\n  // Check for overall quality decline\n  const recentResponses = responses.slice(-5);\n  const recentQualityScores = recentResponses.map(r => analyzeResponseQuality(r.answer).score);\n  const avgRecentQuality = recentQualityScores.reduce((sum, score) => sum + score, 0) / recentQualityScores.length;\n  if (avgRecentQuality < 25) {\n    warnings.push('Overall response quality is very low');\n    suspiciousPattern = true;\n    issueCount++;\n    if (!primaryIssue) primaryIssue = 'quality';\n  }\n\n  // Set issue type based on count\n  const issueType = issueCount > 1 ? 'multiple' : primaryIssue;\n  console.log('Final pattern analysis:', {\n    suspiciousPattern,\n    warnings,\n    issueType,\n    primaryIssue\n  });\n  return {\n    suspiciousPattern,\n    warnings,\n    noneResponseRate,\n    gibberishResponseRate,\n    fastResponseRate,\n    issueType\n  };\n};\n\n// Enhanced attention check questions\nexport const generateAttentionCheck = (currentCategory, currentTopic, userInfo) => {\n  const checks = [{\n    question: 'What color is the sun? Please type your answer.',\n    correctAnswer: 'yellow',\n    type: 'basic'\n  }, {\n    question: 'How many days are in one week? Please enter the number.',\n    correctAnswer: '7',\n    type: 'basic'\n  }, {\n    question: 'This survey is about cultural practices in which country? Please write the name of the country.',\n    correctAnswer: 'india',\n    type: 'basic'\n  }, {\n    question: 'How many regions of India were you asked to choose from when you started this survey? Please write the number.',\n    correctAnswer: 'five',\n    type: 'basic'\n  }, {\n    question: 'What should you write if you are not familiar with a cultural practice mentioned in a question? Please write the word you should use.',\n    correctAnswer: 'none',\n    type: 'instruction'\n  }, {\n    question: 'This survey focuses on cultural practices and traditions. What type of knowledge should you base your answers on? Please write \"personal\" if you should use your personal knowledge, or \"internet\" if you should look things up online.',\n    correctAnswer: 'personal',\n    type: 'instruction'\n  }];\n\n  // Add personal verification if userInfo available\n  if (userInfo) {\n    checks.push({\n      question: `What region of India did you specify at the beginning of this survey? Please write the name of the region (North, South, East, West, or Central).`,\n      correctAnswer: userInfo.region.toLowerCase(),\n      type: 'personal'\n    });\n  }\n  const randomCheck = checks[Math.floor(Math.random() * checks.length)];\n  return {\n    question: randomCheck.question,\n    options: [randomCheck.correctAnswer],\n    // Keep for compatibility but not used\n    correctAnswer: 0,\n    // Keep for compatibility but not used\n    expectedAnswer: randomCheck.correctAnswer,\n    // New field for text matching\n    currentTopic,\n    currentCategory,\n    type: randomCheck.type\n  };\n};\n\n// Utility functions\nexport const generateQuestionId = (categoryIndex, subcategoryIndex, topicIndex, questionIndex) => {\n  return `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\n};\nexport const formatTime = seconds => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\n};\nexport const debounce = (func, wait) => {\n  let timeout;\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(null, args), wait);\n  };\n};\nexport const getEstimatedTimeRemaining = (totalQuestions, completedQuestions, averageTimePerQuestion = 120) => {\n  const remainingQuestions = totalQuestions - completedQuestions;\n  const estimatedSeconds = remainingQuestions * averageTimePerQuestion;\n  if (estimatedSeconds < 3600) {\n    const minutes = Math.ceil(estimatedSeconds / 60);\n    return `~${minutes} minute${minutes !== 1 ? 's' : ''} remaining`;\n  } else {\n    const hours = Math.ceil(estimatedSeconds / 3600);\n    return `~${hours} hour${hours !== 1 ? 's' : ''} remaining`;\n  }\n};","map":{"version":3,"names":["loadQuestionsData","console","log","response","fetch","ok","Error","status","statusText","data","json","Array","isArray","length","totalQuestions","reduce","sum","cat","subcategories","subSum","sub","topics","topicSum","topic","questions","categories","totalSubcategories","totalTopics","error","validateAnswer","answer","trim","isValid","message","shouldShowAttentionCheck","questionCount","isDivisibleBy7","result","analyzeResponseQuality","issues","score","isNoneResponse","isGibberish","text","toLowerCase","nonePatterns","forEach","pattern","test","push","gibberishPatterns","mashingPatterns","words","split","filter","word","wordCount","repeatedWords","Object","entries","count","vaguePhrases","vagueCount","phrase","match","RegExp","positiveIndicators","positiveCount","Math","min","max","isLowQuality","analyzeUserPattern","responses","warnings","suspiciousPattern","noneResponseRate","gibberishResponseRate","fastResponseRate","issueType","noneCount","gibberishCount","fastResponseCount","analysis","substring","timeSpent","isFast","totalResponses","toFixed","issueCount","primaryIssue","threshold","answers","map","r","uniqueAnswers","Set","size","recentResponses","slice","recentQualityScores","avgRecentQuality","generateAttentionCheck","currentCategory","currentTopic","userInfo","checks","question","correctAnswer","type","region","randomCheck","floor","random","options","expectedAnswer","generateQuestionId","categoryIndex","subcategoryIndex","topicIndex","questionIndex","formatTime","seconds","mins","secs","toString","padStart","debounce","func","wait","timeout","args","clearTimeout","setTimeout","apply","getEstimatedTimeRemaining","completedQuestions","averageTimePerQuestion","remainingQuestions","estimatedSeconds","minutes","ceil","hours"],"sources":["C:/Users/sangm/OneDrive - Brock University/CommonsenseForm/client/src/utils/helpers.ts"],"sourcesContent":["import { Category, AttentionCheck } from '../types/index.ts';\r\n\r\nexport const loadQuestionsData = async (): Promise<Category[]> => {\r\n  try {\r\n    console.log('Loading questions from public/questions.json...');\r\n    \r\n    const response = await fetch('/questions.json');\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to load questions: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data: Category[] = await response.json();\r\n    \r\n    // Validate the data structure\r\n    if (!Array.isArray(data) || data.length === 0) {\r\n      throw new Error('Questions data is not in the expected format');\r\n    }\r\n    \r\n    // Calculate totals for logging\r\n    const totalQuestions = data.reduce((sum, cat) => \r\n      sum + cat.subcategories.reduce((subSum, sub) => \r\n        subSum + sub.topics.reduce((topicSum, topic) => topicSum + topic.questions.length, 0), 0), 0);\r\n    \r\n    console.log('Questions loaded successfully:', {\r\n      categories: data.length,\r\n      totalSubcategories: data.reduce((sum, cat) => sum + cat.subcategories.length, 0),\r\n      totalTopics: data.reduce((sum, cat) => \r\n        sum + cat.subcategories.reduce((subSum, sub) => subSum + sub.topics.length, 0), 0),\r\n      totalQuestions\r\n    });\r\n    \r\n    return data;\r\n    \r\n  } catch (error) {\r\n    console.error('Error loading questions data:', error);\r\n    throw new Error('Failed to load questions data');\r\n  }\r\n};\r\n\r\nexport const validateAnswer = (answer: string): { isValid: boolean; message?: string } => {\r\n  if (!answer || answer.trim().length === 0) {\r\n    return { isValid: false, message: 'Please provide an answer or specify \"none\" if no answer exists' };\r\n  }\r\n  \r\n  if (answer.trim().length < 4) {\r\n    return { isValid: false, message: 'Please provide a more detailed answer (at least 4 characters) or specify \"none\"' };\r\n  }\r\n  \r\n  if (answer.length > 5000) {\r\n    return { isValid: false, message: 'Answer is too long (maximum 5000 characters)' };\r\n  }\r\n  \r\n  return { isValid: true };\r\n};\r\n\r\n// UPDATED: Changed from 15 to 7 questions\r\nexport const shouldShowAttentionCheck = (questionCount: number): boolean => {\r\n  // Show attention check at questions 7, 14, 21, 28, etc.\r\n  // But not at 0 (start of survey)\r\n  console.log('Checking if should show attention check:', {\r\n    questionCount,\r\n    isDivisibleBy7: questionCount > 0 && questionCount % 7 === 0,\r\n    result: questionCount > 0 && questionCount % 7 === 0\r\n  });\r\n  \r\n  return questionCount > 0 && questionCount % 7 === 0;\r\n};\r\n\r\n\r\n\r\n// Comprehensive quality analysis\r\nexport const analyzeResponseQuality = (answer: string): {\r\n  isLowQuality: boolean;\r\n  issues: string[];\r\n  score: number;\r\n  isNoneResponse: boolean;\r\n  isGibberish: boolean;\r\n} => {\r\n  const issues: string[] = [];\r\n  let score = 100;\r\n  let isNoneResponse = false;\r\n  let isGibberish = false;\r\n\r\n  const text = answer.toLowerCase().trim();\r\n  \r\n  // Check for \"none\" type responses\r\n  const nonePatterns = [\r\n    /^(none|n\\/a|na|nothing|no|idk|i don't know|dk|dunno)$/i,\r\n    /^(none that i know|nothing that i know|no idea|not sure|dont know|don't know)$/i,\r\n    /^(same|similar|normal|usual|regular|typical|standard|common)$/i,\r\n    /^(not applicable|not available|no information|no data)$/i,\r\n  ];\r\n\r\n  nonePatterns.forEach(pattern => {\r\n    if (pattern.test(text)) {\r\n      isNoneResponse = true;\r\n      issues.push('Generic \"none\" or non-informative response');\r\n      score -= 40;\r\n    }\r\n  });\r\n\r\n  // Check for gibberish patterns\r\n  const gibberishPatterns = [\r\n    /^[bcdfghjklmnpqrstvwxyz]{6,}$/i, // Too many consonants\r\n    /^[aeiou]{6,}$/i, // Too many vowels\r\n    /(.{3,})\\1{2,}/, // Repeated patterns (abcabc)\r\n    /^[^a-z\\s]*$/i, // No letters at all\r\n    /^[a-z]{8,}$/i, // Long strings without spaces\r\n  ];\r\n\r\n  // Keyboard mashing patterns\r\n  const mashingPatterns = [\r\n    /qwerty|asdf|zxcv|hjkl|yuiop/i,\r\n    /abcd|1234|test|xxx|yyy|zzz/i,\r\n    /(.)\\1{4,}/, // Same character repeated 5+ times\r\n  ];\r\n\r\n  gibberishPatterns.forEach(pattern => {\r\n    if (pattern.test(text)) {\r\n      isGibberish = true;\r\n      issues.push('Appears to be random characters or gibberish');\r\n      score -= 60;\r\n    }\r\n  });\r\n\r\n  mashingPatterns.forEach(pattern => {\r\n    if (pattern.test(text)) {\r\n      isGibberish = true;\r\n      issues.push('Keyboard mashing or test input detected');\r\n      score -= 50;\r\n    }\r\n  });\r\n\r\n  // Check for excessive repetition of words\r\n  const words = text.split(/\\s+/).filter(word => word.length > 2);\r\n  const wordCount = {};\r\n  words.forEach(word => {\r\n    wordCount[word] = (wordCount[word] || 0) + 1;\r\n  });\r\n\r\n  const repeatedWords = Object.entries(wordCount).filter(([word, count]) => (count as number) > 3);\r\n  if (repeatedWords.length > 0) {\r\n    issues.push('Excessive word repetition');\r\n    score -= 30;\r\n  }\r\n\r\n  // Check for lack of specificity\r\n  const vaguePhrases = ['something', 'things', 'stuff', 'anything', 'everything'];\r\n  const vagueCount = vaguePhrases.reduce((count, phrase) => \r\n    count + (text.match(new RegExp(`\\\\b${phrase}\\\\b`, 'g')) || []).length, 0\r\n  );\r\n  \r\n  if (vagueCount > 3) {\r\n    issues.push('Response lacks specific details');\r\n    score -= 15;\r\n  }\r\n\r\n  // Positive indicators\r\n  const positiveIndicators = [\r\n    /\\b(example|for instance|specifically|traditionally|commonly|usually|typically)\\b/i,\r\n    /\\b(in my region|in our area|locally|here we|we usually|in our culture)\\b/i,\r\n    /\\b(such as|like|including|consists of|involves|includes)\\b/i,\r\n  ];\r\n\r\n  let positiveCount = 0;\r\n  positiveIndicators.forEach(pattern => {\r\n    if (pattern.test(text)) positiveCount++;\r\n  });\r\n\r\n  if (positiveCount > 0) {\r\n    score += Math.min(positiveCount * 8, 20);\r\n  }\r\n\r\n  score = Math.max(0, Math.min(100, score));\r\n  \r\n  return {\r\n    isLowQuality: score < 30,\r\n    issues,\r\n    score,\r\n    isNoneResponse,\r\n    isGibberish\r\n  };\r\n};\r\n\r\n// FIXED: Comprehensive pattern analysis\r\n// Comprehensive pattern analysis\r\nexport const analyzeUserPattern = (responses: Array<{answer: string, timeSpent: number}>): {\r\n  suspiciousPattern: boolean;\r\n  warnings: string[];\r\n  noneResponseRate: number;\r\n  gibberishResponseRate: number;\r\n  fastResponseRate: number;\r\n  issueType: string | null;\r\n} => {\r\n  const warnings: string[] = [];\r\n  let suspiciousPattern = false;\r\n\r\n  if (responses.length < 5) {\r\n    return { \r\n      suspiciousPattern, \r\n      warnings, \r\n      noneResponseRate: 0,\r\n      gibberishResponseRate: 0,\r\n      fastResponseRate: 0,\r\n      issueType: null\r\n    };\r\n  }\r\n\r\n  // Analyze response patterns\r\n  let noneCount = 0;\r\n  let gibberishCount = 0;\r\n  let fastResponseCount = 0;\r\n\r\n  responses.forEach(response => {\r\n    const analysis = analyzeResponseQuality(response.answer);\r\n    \r\n    if (analysis.isNoneResponse) noneCount++;\r\n    if (analysis.isGibberish) gibberishCount++;\r\n    \r\n    // FIXED: Check for responses that are TOO FAST (less than 8 seconds)\r\n    // Previously this was checking if timeSpent < 8, which is correct\r\n    // But make sure we're getting actual time values\r\n    console.log('Response time check:', {\r\n      answer: response.answer.substring(0, 20) + '...',\r\n      timeSpent: response.timeSpent,\r\n      isFast: response.timeSpent < 8\r\n    });\r\n    \r\n    if (response.timeSpent < 8) fastResponseCount++;\r\n  });\r\n\r\n  const noneResponseRate = (noneCount / responses.length) * 100;\r\n  const gibberishResponseRate = (gibberishCount / responses.length) * 100;\r\n  const fastResponseRate = (fastResponseCount / responses.length) * 100;\r\n\r\n  console.log('Pattern analysis results:', {\r\n    totalResponses: responses.length,\r\n    noneCount,\r\n    gibberishCount,\r\n    fastResponseCount,\r\n    noneResponseRate: noneResponseRate.toFixed(1),\r\n    gibberishResponseRate: gibberishResponseRate.toFixed(1),\r\n    fastResponseRate: fastResponseRate.toFixed(1)\r\n  });\r\n\r\n  let issueCount = 0;\r\n  let primaryIssue: string | null = null;\r\n\r\n  // Check for problematic patterns (30% threshold for all)\r\n  if (noneResponseRate >= 30) {\r\n    warnings.push(`High rate of \"none\" responses (${noneResponseRate.toFixed(1)}%)`);\r\n    suspiciousPattern = true;\r\n    issueCount++;\r\n    if (!primaryIssue) primaryIssue = 'none';\r\n  }\r\n\r\n  if (gibberishResponseRate >= 30) {\r\n    warnings.push(`High rate of gibberish responses (${gibberishResponseRate.toFixed(1)}%)`);\r\n    suspiciousPattern = true;\r\n    issueCount++;\r\n    if (!primaryIssue) primaryIssue = 'gibberish';\r\n  }\r\n\r\n  // FIXED: Make sure this is checking for responses that are TOO FAST\r\n  if (fastResponseRate >= 30) {\r\n    warnings.push(`High rate of very quick responses (${fastResponseRate.toFixed(1)}% completed in under 8 seconds)`);\r\n    suspiciousPattern = true;\r\n    issueCount++;\r\n    if (!primaryIssue) primaryIssue = 'speed';\r\n    \r\n    console.log('Fast response pattern detected:', {\r\n      fastResponseRate: fastResponseRate.toFixed(1),\r\n      threshold: '30%',\r\n      fastResponseCount,\r\n      totalResponses: responses.length\r\n    });\r\n  }\r\n\r\n  // Check for similar responses\r\n  const answers = responses.map(r => r.answer.toLowerCase().trim());\r\n  const uniqueAnswers = new Set(answers);\r\n  if (uniqueAnswers.size < answers.length * 0.6) {\r\n    warnings.push('Many similar or identical responses');\r\n    suspiciousPattern = true;\r\n    issueCount++;\r\n    if (!primaryIssue) primaryIssue = 'repetition';\r\n  }\r\n\r\n  // Check for overall quality decline\r\n  const recentResponses = responses.slice(-5);\r\n  const recentQualityScores = recentResponses.map(r => analyzeResponseQuality(r.answer).score);\r\n  const avgRecentQuality = recentQualityScores.reduce((sum, score) => sum + score, 0) / recentQualityScores.length;\r\n  \r\n  if (avgRecentQuality < 25) {\r\n    warnings.push('Overall response quality is very low');\r\n    suspiciousPattern = true;\r\n    issueCount++;\r\n    if (!primaryIssue) primaryIssue = 'quality';\r\n  }\r\n\r\n  // Set issue type based on count\r\n  const issueType = issueCount > 1 ? 'multiple' : primaryIssue;\r\n\r\n  console.log('Final pattern analysis:', {\r\n    suspiciousPattern,\r\n    warnings,\r\n    issueType,\r\n    primaryIssue\r\n  });\r\n\r\n  return { \r\n    suspiciousPattern, \r\n    warnings, \r\n    noneResponseRate,\r\n    gibberishResponseRate,\r\n    fastResponseRate,\r\n    issueType\r\n  };\r\n};\r\n\r\n// Enhanced attention check questions\r\nexport const generateAttentionCheck = (\r\n  currentCategory: string,\r\n  currentTopic: string,\r\n  userInfo?: { region: string; age: number }\r\n): AttentionCheck => {\r\n  const checks = [\r\n    {\r\n      question: 'What color is the sun? Please type your answer.',\r\n      correctAnswer: 'yellow',\r\n      type: 'basic'\r\n    },\r\n    {\r\n      question: 'How many days are in one week? Please enter the number.',\r\n      correctAnswer: '7',\r\n      type: 'basic'\r\n    },\r\n    {\r\n      question: 'This survey is about cultural practices in which country? Please write the name of the country.',\r\n      correctAnswer: 'india',\r\n      type: 'basic'\r\n    },\r\n    {\r\n      question: 'How many regions of India were you asked to choose from when you started this survey? Please write the number.',\r\n      correctAnswer: 'five',\r\n      type: 'basic'\r\n    },\r\n    {\r\n      question: 'What should you write if you are not familiar with a cultural practice mentioned in a question? Please write the word you should use.',\r\n      correctAnswer: 'none',\r\n      type: 'instruction'\r\n    },\r\n    {\r\n      question: 'This survey focuses on cultural practices and traditions. What type of knowledge should you base your answers on? Please write \"personal\" if you should use your personal knowledge, or \"internet\" if you should look things up online.',\r\n      correctAnswer: 'personal',\r\n      type: 'instruction'\r\n    }\r\n  ];\r\n\r\n  // Add personal verification if userInfo available\r\n  if (userInfo) {\r\n    checks.push({\r\n      question: `What region of India did you specify at the beginning of this survey? Please write the name of the region (North, South, East, West, or Central).`,\r\n      correctAnswer: userInfo.region.toLowerCase(),\r\n      type: 'personal'\r\n    });\r\n  }\r\n  \r\n  const randomCheck = checks[Math.floor(Math.random() * checks.length)];\r\n  \r\n  return {\r\n    question: randomCheck.question,\r\n    options: [randomCheck.correctAnswer], // Keep for compatibility but not used\r\n    correctAnswer: 0, // Keep for compatibility but not used\r\n    expectedAnswer: randomCheck.correctAnswer, // New field for text matching\r\n    currentTopic,\r\n    currentCategory,\r\n    type: randomCheck.type\r\n  };\r\n};\r\n\r\n// Utility functions\r\nexport const generateQuestionId = (\r\n  categoryIndex: number,\r\n  subcategoryIndex: number,\r\n  topicIndex: number,\r\n  questionIndex: number\r\n): string => {\r\n  return `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\r\n};\r\n\r\nexport const formatTime = (seconds: number): string => {\r\n  const mins = Math.floor(seconds / 60);\r\n  const secs = seconds % 60;\r\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\r\n};\r\n\r\nexport const debounce = <T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait: number\r\n): ((...args: Parameters<T>) => void) => {\r\n  let timeout: ReturnType<typeof setTimeout>;\r\n  \r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func.apply(null, args), wait);\r\n  };\r\n};\r\n\r\nexport const getEstimatedTimeRemaining = (\r\n  totalQuestions: number,\r\n  completedQuestions: number,\r\n  averageTimePerQuestion: number = 120\r\n): string => {\r\n  const remainingQuestions = totalQuestions - completedQuestions;\r\n  const estimatedSeconds = remainingQuestions * averageTimePerQuestion;\r\n  \r\n  if (estimatedSeconds < 3600) {\r\n    const minutes = Math.ceil(estimatedSeconds / 60);\r\n    return `~${minutes} minute${minutes !== 1 ? 's' : ''} remaining`;\r\n  } else {\r\n    const hours = Math.ceil(estimatedSeconds / 3600);\r\n    return `~${hours} hour${hours !== 1 ? 's' : ''} remaining`;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}