{"ast":null,"code":"export const loadQuestionsData = async () => {\n  try {\n    console.log('Loading questions from public/questions.json...');\n    const response = await fetch('/questions.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load questions: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n\n    // Validate the data structure\n    if (!Array.isArray(data) || data.length === 0) {\n      throw new Error('Questions data is not in the expected format');\n    }\n\n    // Validate that each category has the required structure\n    for (const category of data) {\n      if (!category.category || !Array.isArray(category.subcategories)) {\n        throw new Error(`Invalid category structure: ${JSON.stringify(category)}`);\n      }\n      for (const subcategory of category.subcategories) {\n        if (!subcategory.subcategory || !Array.isArray(subcategory.topics)) {\n          throw new Error(`Invalid subcategory structure: ${JSON.stringify(subcategory)}`);\n        }\n        for (const topic of subcategory.topics) {\n          if (!topic.topic || !Array.isArray(topic.questions)) {\n            throw new Error(`Invalid topic structure: ${JSON.stringify(topic)}`);\n          }\n          if (topic.questions.length === 0) {\n            console.warn(`Topic \"${topic.topic}\" has no questions`);\n          }\n        }\n      }\n    }\n    console.log('Questions loaded successfully:', {\n      categories: data.length,\n      totalSubcategories: data.reduce((sum, cat) => sum + cat.subcategories.length, 0),\n      totalTopics: data.reduce((sum, cat) => sum + cat.subcategories.reduce((subSum, sub) => subSum + sub.topics.length, 0), 0),\n      totalQuestions: data.reduce((sum, cat) => sum + cat.subcategories.reduce((subSum, sub) => subSum + sub.topics.reduce((topicSum, topic) => topicSum + topic.questions.length, 0), 0), 0)\n    });\n    return data;\n  } catch (error) {\n    console.error('Error loading questions data:', error);\n\n    // Fallback to test data if loading fails\n    console.log('Falling back to test data...');\n    const fallbackData = [{\n      \"category\": \"Interpersonal Relations\",\n      \"subcategories\": [{\n        \"subcategory\": \"Visiting and hospitality\",\n        \"topics\": [{\n          \"topic\": \"Etiquette in the reception of visitors\",\n          \"questions\": [\"In your region, what are the typical ways people prepare their homes for the arrival of guests? Describe three common preparations that are usually done, such as cleaning, decorating, arranging guest rooms, or any traditional practices.\", \"In your region, what is the first most common thing a visitor does when they enter your house? Focus on actions and not greetings and provide two most common ones.\", \"In your region, if applicable, what are some traditional gifts or souvenirs given to guests during their visit? Specify two most common ones.\", \"In your region, what is the common proper etiquette for sending off a guest who is visiting from another city?\", \"In your region, what specific rituals or traditions are followed when someone visits your home for the first time? Specify two most common.\"]\n        }]\n      }]\n    }];\n    return fallbackData;\n  }\n};\n\n// Rest of your helper functions remain the same...\nexport const generateQuestionId = (categoryIndex, subcategoryIndex, topicIndex, questionIndex) => {\n  return `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\n};\nexport const parseQuestionId = questionId => {\n  const [categoryIndex, subcategoryIndex, topicIndex, questionIndex] = questionId.split('-').map(Number);\n  return {\n    categoryIndex,\n    subcategoryIndex,\n    topicIndex,\n    questionIndex\n  };\n};\nexport const formatTime = seconds => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\n};\nexport const validateAnswer = answer => {\n  if (!answer || answer.trim().length === 0) {\n    return {\n      isValid: false,\n      message: 'Please provide an answer'\n    };\n  }\n  if (answer.trim().length < 4) {\n    return {\n      isValid: false,\n      message: 'Please provide a more detailed answer (at least 4 characters)'\n    };\n  }\n  if (answer.length > 5000) {\n    return {\n      isValid: false,\n      message: 'Answer is too long (maximum 5000 characters)'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\nexport const shouldShowAttentionCheck = questionCount => {\n  // Show attention check every 15 questions, but not on the very first question\n  return questionCount > 0 && questionCount % 15 === 0;\n};\n\n// Add more diverse attention check questions\nexport const generateAttentionCheck = (currentCategory, currentTopic, userInfo) => {\n  const checks = [\n  // Context awareness checks\n  {\n    question: `You are currently answering questions about \"${currentCategory}\". Which category are you working on?`,\n    options: [currentCategory, 'Food and Cuisine', 'Religious Practices', 'Economic Activities'],\n    correctAnswer: 0,\n    type: 'context'\n  }, {\n    question: `Within ${currentCategory}, you're focusing on \"${currentTopic}\". What is your current topic?`,\n    options: [currentTopic, 'Traditional Ceremonies', 'Seasonal Celebrations', 'Community Gatherings'],\n    correctAnswer: 0,\n    type: 'context'\n  },\n  // Survey comprehension checks\n  {\n    question: 'What is the main focus of this cultural survey?',\n    options: ['Understanding cultural practices and traditions in different regions of India', 'Collecting political opinions about government policies', 'Reviewing consumer products and services', 'Gathering medical and health information'],\n    correctAnswer: 0,\n    type: 'comprehension'\n  }, {\n    question: 'When answering questions, you should base your responses on:',\n    options: ['Your personal knowledge and experience of cultural practices in your region', 'What you think researchers want to hear', 'Random guesses or made-up information', 'Practices from other countries or regions you\\'ve seen in movies'],\n    correctAnswer: 0,\n    type: 'instruction'\n  }, {\n    question: 'What should you do if you encounter a question about a practice you\\'re not familiar with?',\n    options: ['Explain what you do know or indicate that the practice is uncommon in your area', 'Just write \"none\" or \"don\\'t know\"', 'Copy your answer from a previous question', 'Make up a detailed but false answer'],\n    correctAnswer: 0,\n    type: 'instruction'\n  },\n  // Basic logical checks\n  {\n    question: 'If a cultural practice is described as \"cultural commonsense,\" it means:',\n    options: ['It is widely shared and considered natural within a cultural group', 'It is a rare or unusual practice', 'It comes from foreign cultural influence', 'It is a personal individual preference'],\n    correctAnswer: 0,\n    type: 'definition'\n  }, {\n    question: 'Which of these would be the BEST type of answer for cultural questions?',\n    options: ['Detailed explanations with specific examples from your region', 'One-word answers like \"yes\" or \"no\"', 'Identical responses copied for every question', 'Random letters and symbols'],\n    correctAnswer: 0,\n    type: 'instruction'\n  },\n  // Reading comprehension\n  {\n    question: 'This survey is about cultural practices in which country?',\n    options: ['India', 'China', 'United States', 'United Kingdom'],\n    correctAnswer: 0,\n    type: 'basic'\n  }, {\n    question: 'How many regions of India are you asked to choose from in this survey?',\n    options: ['Five regions (North, South, East, West, Central)', 'Three regions', 'Ten regions', 'Two regions'],\n    correctAnswer: 0,\n    type: 'basic'\n  },\n  // Personal verification (if userInfo available)\n  ...(userInfo ? [{\n    question: `You indicated that you are from ${userInfo.region} India. Which region did you select at the beginning?`,\n    options: [`${userInfo.region} India`, userInfo.region === 'North' ? 'South India' : 'North India', userInfo.region === 'East' ? 'West India' : 'East India', 'I did not specify a region'],\n    correctAnswer: 0,\n    type: 'personal'\n  }] : []),\n  // Instruction following\n  {\n    question: 'According to the survey instructions, what should you NOT do when answering questions?',\n    options: ['Provide random, meaningless responses or keyboard mashing', 'Share your genuine knowledge about cultural practices', 'Give specific examples when possible', 'Explain regional variations you\\'re aware of'],\n    correctAnswer: 0,\n    type: 'instruction'\n  }, {\n    question: 'If you see a warning about response quality, what should you do?',\n    options: ['Review and improve your answer to be more detailed and helpful', 'Ignore the warning and continue with the same type of responses', 'Close the survey immediately', 'Copy and paste from internet sources'],\n    correctAnswer: 0,\n    type: 'instruction'\n  }];\n\n  // Select a random check\n  const randomCheck = checks[Math.floor(Math.random() * checks.length)];\n\n  // Shuffle options\n  const correctOption = randomCheck.options[randomCheck.correctAnswer];\n  const shuffledOptions = [...randomCheck.options];\n  for (let i = shuffledOptions.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledOptions[i], shuffledOptions[j]] = [shuffledOptions[j], shuffledOptions[i]];\n  }\n  const newCorrectAnswer = shuffledOptions.indexOf(correctOption);\n  return {\n    question: randomCheck.question,\n    options: shuffledOptions,\n    correctAnswer: newCorrectAnswer,\n    currentTopic,\n    currentCategory,\n    type: randomCheck.type\n  };\n};\nexport const analyzeResponseQuality = answer => {\n  const issues = [];\n  let score = 100; // Start with perfect score\n\n  const text = answer.toLowerCase().trim();\n\n  // Check for \"none\" type responses (main focus)\n  const nonePatterns = [/^(none|n\\/a|na|nothing|no|idk|i don't know|dk|dunno)$/i, /^(none that i know|nothing that i know|no idea|not sure|dont know|don't know)$/i, /^(same|similar|normal|usual|regular|typical|standard|common)$/i, /^(not applicable|not available|no information|no data)$/i];\n  let isNoneResponse = false;\n  nonePatterns.forEach(pattern => {\n    if (pattern.test(text)) {\n      isNoneResponse = true;\n      issues.push('Generic \"none\" or non-informative response');\n      score -= 40; // Heavy penalty for none responses\n    }\n  });\n\n  // Check for gibberish patterns (keep this check)\n  const gibberishPatterns = [/^[bcdfghjklmnpqrstvwxyz]{6,}$/i,\n  // Too many consonants\n  /^[aeiou]{6,}$/i,\n  // Too many vowels\n  /(.{3,})\\1{2,}/,\n  // Repeated patterns (abcabc)\n  /^[^a-z\\s]*$/i,\n  // No letters at all (just symbols/numbers)\n  /^[a-z]{8,}$/i // Long strings without spaces (likely gibberish)\n  ];\n  gibberishPatterns.forEach(pattern => {\n    if (pattern.test(text)) {\n      issues.push('Appears to be random characters or gibberish');\n      score -= 60; // Very heavy penalty for gibberish\n    }\n  });\n\n  // Check for keyboard mashing\n  const mashingPatterns = [/qwerty|asdf|zxcv|hjkl|yuiop/i, /abcd|1234|test|xxx|yyy|zzz/i, /(.)\\1{4,}/ // Same character repeated 5+ times\n  ];\n  mashingPatterns.forEach(pattern => {\n    if (pattern.test(text)) {\n      issues.push('Keyboard mashing or test input detected');\n      score -= 50;\n    }\n  });\n\n  // Check for excessive repetition of words\n  const words = text.split(/\\s+/).filter(word => word.length > 2);\n  const wordCount = {};\n  words.forEach(word => {\n    wordCount[word] = (wordCount[word] || 0) + 1;\n  });\n  const repeatedWords = Object.entries(wordCount).filter(([word, count]) => count > 3);\n  if (repeatedWords.length > 0) {\n    issues.push('Excessive word repetition');\n    score -= 30;\n  }\n\n  // Check for lack of specificity (but less harsh)\n  const vaguePhrases = ['something', 'things', 'stuff', 'anything', 'everything'];\n  const vagueCount = vaguePhrases.reduce((count, phrase) => count + (text.match(new RegExp(`\\\\b${phrase}\\\\b`, 'g')) || []).length, 0);\n  if (vagueCount > 3) {\n    issues.push('Response lacks specific details');\n    score -= 15; // Reduced penalty\n  }\n\n  // REMOVED: Short response penalty - let people give concise answers\n\n  // Positive indicators (can boost score)\n  const positiveIndicators = [/\\b(example|for instance|specifically|traditionally|commonly|usually|typically)\\b/i, /\\b(in my region|in our area|locally|here we|we usually|in our culture)\\b/i, /\\b(such as|like|including|consists of|involves|includes)\\b/i];\n  let positiveCount = 0;\n  positiveIndicators.forEach(pattern => {\n    if (pattern.test(text)) positiveCount++;\n  });\n  if (positiveCount > 0) {\n    score += Math.min(positiveCount * 8, 20); // Max 20 point bonus\n  }\n  score = Math.max(0, Math.min(100, score)); // Clamp between 0-100\n\n  return {\n    isLowQuality: score < 30,\n    // Stricter threshold\n    issues,\n    score,\n    noneResponseCount: isNoneResponse ? 1 : 0\n  };\n};\n\n// New function to analyze user's \"none\" response pattern\nexport const analyzeNoneResponsePattern = responses => {\n  let noneCount = 0;\n  responses.forEach(response => {\n    const analysis = analyzeResponseQuality(response.answer);\n    noneCount += analysis.noneResponseCount || 0;\n  });\n  const noneResponseRate = responses.length > 0 ? noneCount / responses.length * 100 : 0;\n  return {\n    noneResponseRate,\n    totalNoneResponses: noneCount,\n    isProblematic: noneResponseRate >= 30 // 30% or more \"none\" responses\n  };\n};\n\n// Updated user pattern analysis\nexport const analyzeUserPattern = responses => {\n  const warnings = [];\n  let suspiciousPattern = false;\n  if (responses.length < 3) return {\n    suspiciousPattern,\n    warnings,\n    nonePattern: {\n      noneResponseRate: 0,\n      totalNoneResponses: 0,\n      isProblematic: false\n    }\n  };\n\n  // Analyze \"none\" response pattern\n  const nonePattern = analyzeNoneResponsePattern(responses);\n  if (nonePattern.isProblematic) {\n    warnings.push(`High rate of \"none\" responses (${nonePattern.noneResponseRate.toFixed(1)}%)`);\n    suspiciousPattern = true;\n  }\n\n  // Check for consistent low time spent\n  const avgTimeSpent = responses.reduce((sum, r) => sum + r.timeSpent, 0) / responses.length;\n  if (avgTimeSpent < 8) {\n    warnings.push('Consistently very fast responses (possible rushing)');\n    suspiciousPattern = true;\n  }\n\n  // Check for similar responses\n  const answers = responses.map(r => r.answer.toLowerCase().trim());\n  const uniqueAnswers = new Set(answers);\n  if (uniqueAnswers.size < answers.length * 0.6) {\n    warnings.push('Many similar or identical responses');\n    suspiciousPattern = true;\n  }\n\n  // Check for quality decline\n  const recentResponses = responses.slice(-5);\n  const recentQualityScores = recentResponses.map(r => analyzeResponseQuality(r.answer).score);\n  const avgRecentQuality = recentQualityScores.reduce((sum, score) => sum + score, 0) / recentQualityScores.length;\n  if (avgRecentQuality < 25) {\n    warnings.push('Recent response quality is very low');\n    suspiciousPattern = true;\n  }\n  return {\n    suspiciousPattern,\n    warnings,\n    nonePattern\n  };\n};\nexport const debounce = (func, wait) => {\n  let timeout;\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(null, args), wait);\n  };\n};\nexport const getEstimatedTimeRemaining = (totalQuestions, completedQuestions, averageTimePerQuestion = 120) => {\n  const remainingQuestions = totalQuestions - completedQuestions;\n  const estimatedSeconds = remainingQuestions * averageTimePerQuestion;\n  if (estimatedSeconds < 3600) {\n    const minutes = Math.ceil(estimatedSeconds / 60);\n    return `~${minutes} minute${minutes !== 1 ? 's' : ''} remaining`;\n  } else {\n    const hours = Math.ceil(estimatedSeconds / 3600);\n    return `~${hours} hour${hours !== 1 ? 's' : ''} remaining`;\n  }\n};","map":{"version":3,"names":["loadQuestionsData","console","log","response","fetch","ok","Error","status","statusText","data","json","Array","isArray","length","category","subcategories","JSON","stringify","subcategory","topics","topic","questions","warn","categories","totalSubcategories","reduce","sum","cat","totalTopics","subSum","sub","totalQuestions","topicSum","error","fallbackData","generateQuestionId","categoryIndex","subcategoryIndex","topicIndex","questionIndex","parseQuestionId","questionId","split","map","Number","formatTime","seconds","mins","Math","floor","secs","toString","padStart","validateAnswer","answer","trim","isValid","message","shouldShowAttentionCheck","questionCount","generateAttentionCheck","currentCategory","currentTopic","userInfo","checks","question","options","correctAnswer","type","region","randomCheck","random","correctOption","shuffledOptions","i","j","newCorrectAnswer","indexOf","analyzeResponseQuality","issues","score","text","toLowerCase","nonePatterns","isNoneResponse","forEach","pattern","test","push","gibberishPatterns","mashingPatterns","words","filter","word","wordCount","repeatedWords","Object","entries","count","vaguePhrases","vagueCount","phrase","match","RegExp","positiveIndicators","positiveCount","min","max","isLowQuality","noneResponseCount","analyzeNoneResponsePattern","responses","noneCount","analysis","noneResponseRate","totalNoneResponses","isProblematic","analyzeUserPattern","warnings","suspiciousPattern","nonePattern","toFixed","avgTimeSpent","r","timeSpent","answers","uniqueAnswers","Set","size","recentResponses","slice","recentQualityScores","avgRecentQuality","debounce","func","wait","timeout","args","clearTimeout","setTimeout","apply","getEstimatedTimeRemaining","completedQuestions","averageTimePerQuestion","remainingQuestions","estimatedSeconds","minutes","ceil","hours"],"sources":["C:/Users/sangm/OneDrive - Brock University/CommonsenseForm/client/src/utils/helpers.ts"],"sourcesContent":["import { Category, AttentionCheck } from '../types/index.ts';\r\n\r\nexport const loadQuestionsData = async (): Promise<Category[]> => {\r\n  try {\r\n    console.log('Loading questions from public/questions.json...');\r\n    \r\n    const response = await fetch('/questions.json');\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to load questions: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data: Category[] = await response.json();\r\n    \r\n    // Validate the data structure\r\n    if (!Array.isArray(data) || data.length === 0) {\r\n      throw new Error('Questions data is not in the expected format');\r\n    }\r\n    \r\n    // Validate that each category has the required structure\r\n    for (const category of data) {\r\n      if (!category.category || !Array.isArray(category.subcategories)) {\r\n        throw new Error(`Invalid category structure: ${JSON.stringify(category)}`);\r\n      }\r\n      \r\n      for (const subcategory of category.subcategories) {\r\n        if (!subcategory.subcategory || !Array.isArray(subcategory.topics)) {\r\n          throw new Error(`Invalid subcategory structure: ${JSON.stringify(subcategory)}`);\r\n        }\r\n        \r\n        for (const topic of subcategory.topics) {\r\n          if (!topic.topic || !Array.isArray(topic.questions)) {\r\n            throw new Error(`Invalid topic structure: ${JSON.stringify(topic)}`);\r\n          }\r\n          \r\n          if (topic.questions.length === 0) {\r\n            console.warn(`Topic \"${topic.topic}\" has no questions`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log('Questions loaded successfully:', {\r\n      categories: data.length,\r\n      totalSubcategories: data.reduce((sum, cat) => sum + cat.subcategories.length, 0),\r\n      totalTopics: data.reduce((sum, cat) => \r\n        sum + cat.subcategories.reduce((subSum, sub) => subSum + sub.topics.length, 0), 0),\r\n      totalQuestions: data.reduce((sum, cat) => \r\n        sum + cat.subcategories.reduce((subSum, sub) => \r\n          subSum + sub.topics.reduce((topicSum, topic) => topicSum + topic.questions.length, 0), 0), 0)\r\n    });\r\n    \r\n    return data;\r\n    \r\n  } catch (error) {\r\n    console.error('Error loading questions data:', error);\r\n    \r\n    // Fallback to test data if loading fails\r\n    console.log('Falling back to test data...');\r\n    const fallbackData: Category[] = [\r\n      {\r\n        \"category\": \"Interpersonal Relations\",\r\n        \"subcategories\": [\r\n          {\r\n            \"subcategory\": \"Visiting and hospitality\",\r\n            \"topics\": [\r\n              {\r\n                \"topic\": \"Etiquette in the reception of visitors\",\r\n                \"questions\": [\r\n                  \"In your region, what are the typical ways people prepare their homes for the arrival of guests? Describe three common preparations that are usually done, such as cleaning, decorating, arranging guest rooms, or any traditional practices.\",\r\n                  \"In your region, what is the first most common thing a visitor does when they enter your house? Focus on actions and not greetings and provide two most common ones.\",\r\n                  \"In your region, if applicable, what are some traditional gifts or souvenirs given to guests during their visit? Specify two most common ones.\",\r\n                  \"In your region, what is the common proper etiquette for sending off a guest who is visiting from another city?\",\r\n                  \"In your region, what specific rituals or traditions are followed when someone visits your home for the first time? Specify two most common.\"\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ];\r\n    \r\n    return fallbackData;\r\n  }\r\n};\r\n\r\n// Rest of your helper functions remain the same...\r\nexport const generateQuestionId = (\r\n  categoryIndex: number,\r\n  subcategoryIndex: number,\r\n  topicIndex: number,\r\n  questionIndex: number\r\n): string => {\r\n  return `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\r\n};\r\n\r\nexport const parseQuestionId = (questionId: string) => {\r\n  const [categoryIndex, subcategoryIndex, topicIndex, questionIndex] = questionId.split('-').map(Number);\r\n  return { categoryIndex, subcategoryIndex, topicIndex, questionIndex };\r\n};\r\n\r\nexport const formatTime = (seconds: number): string => {\r\n  const mins = Math.floor(seconds / 60);\r\n  const secs = seconds % 60;\r\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\r\n};\r\n\r\nexport const validateAnswer = (answer: string): { isValid: boolean; message?: string } => {\r\n  if (!answer || answer.trim().length === 0) {\r\n    return { isValid: false, message: 'Please provide an answer' };\r\n  }\r\n  \r\n  if (answer.trim().length < 4) {\r\n    return { isValid: false, message: 'Please provide a more detailed answer (at least 4 characters)' };\r\n  }\r\n  \r\n  if (answer.length > 5000) {\r\n    return { isValid: false, message: 'Answer is too long (maximum 5000 characters)' };\r\n  }\r\n  \r\n  return { isValid: true };\r\n};\r\n\r\nexport const shouldShowAttentionCheck = (questionCount: number): boolean => {\r\n  // Show attention check every 15 questions, but not on the very first question\r\n  return questionCount > 0 && questionCount % 15 === 0;\r\n};\r\n\r\n// Add more diverse attention check questions\r\nexport const generateAttentionCheck = (\r\n  currentCategory: string,\r\n  currentTopic: string,\r\n  userInfo?: { region: string; age: number }\r\n): AttentionCheck => {\r\n  const checks = [\r\n    // Context awareness checks\r\n    {\r\n      question: `You are currently answering questions about \"${currentCategory}\". Which category are you working on?`,\r\n      options: [currentCategory, 'Food and Cuisine', 'Religious Practices', 'Economic Activities'],\r\n      correctAnswer: 0,\r\n      type: 'context'\r\n    },\r\n    {\r\n      question: `Within ${currentCategory}, you're focusing on \"${currentTopic}\". What is your current topic?`,\r\n      options: [currentTopic, 'Traditional Ceremonies', 'Seasonal Celebrations', 'Community Gatherings'],\r\n      correctAnswer: 0,\r\n      type: 'context'\r\n    },\r\n    \r\n    // Survey comprehension checks\r\n    {\r\n      question: 'What is the main focus of this cultural survey?',\r\n      options: [\r\n        'Understanding cultural practices and traditions in different regions of India',\r\n        'Collecting political opinions about government policies',\r\n        'Reviewing consumer products and services',\r\n        'Gathering medical and health information'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'comprehension'\r\n    },\r\n    {\r\n      question: 'When answering questions, you should base your responses on:',\r\n      options: [\r\n        'Your personal knowledge and experience of cultural practices in your region',\r\n        'What you think researchers want to hear',\r\n        'Random guesses or made-up information',\r\n        'Practices from other countries or regions you\\'ve seen in movies'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'instruction'\r\n    },\r\n    {\r\n      question: 'What should you do if you encounter a question about a practice you\\'re not familiar with?',\r\n      options: [\r\n        'Explain what you do know or indicate that the practice is uncommon in your area',\r\n        'Just write \"none\" or \"don\\'t know\"',\r\n        'Copy your answer from a previous question',\r\n        'Make up a detailed but false answer'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'instruction'\r\n    },\r\n    \r\n    // Basic logical checks\r\n    {\r\n      question: 'If a cultural practice is described as \"cultural commonsense,\" it means:',\r\n      options: [\r\n        'It is widely shared and considered natural within a cultural group',\r\n        'It is a rare or unusual practice',\r\n        'It comes from foreign cultural influence',\r\n        'It is a personal individual preference'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'definition'\r\n    },\r\n    {\r\n      question: 'Which of these would be the BEST type of answer for cultural questions?',\r\n      options: [\r\n        'Detailed explanations with specific examples from your region',\r\n        'One-word answers like \"yes\" or \"no\"',\r\n        'Identical responses copied for every question',\r\n        'Random letters and symbols'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'instruction'\r\n    },\r\n    \r\n    // Reading comprehension\r\n    {\r\n      question: 'This survey is about cultural practices in which country?',\r\n      options: [\r\n        'India',\r\n        'China',\r\n        'United States',\r\n        'United Kingdom'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'basic'\r\n    },\r\n    {\r\n      question: 'How many regions of India are you asked to choose from in this survey?',\r\n      options: [\r\n        'Five regions (North, South, East, West, Central)',\r\n        'Three regions',\r\n        'Ten regions',\r\n        'Two regions'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'basic'\r\n    },\r\n    \r\n    // Personal verification (if userInfo available)\r\n    ...(userInfo ? [\r\n      {\r\n        question: `You indicated that you are from ${userInfo.region} India. Which region did you select at the beginning?`,\r\n        options: [\r\n          `${userInfo.region} India`,\r\n          userInfo.region === 'North' ? 'South India' : 'North India',\r\n          userInfo.region === 'East' ? 'West India' : 'East India',\r\n          'I did not specify a region'\r\n        ],\r\n        correctAnswer: 0,\r\n        type: 'personal'\r\n      }\r\n    ] : []),\r\n    \r\n    // Instruction following\r\n    {\r\n      question: 'According to the survey instructions, what should you NOT do when answering questions?',\r\n      options: [\r\n        'Provide random, meaningless responses or keyboard mashing',\r\n        'Share your genuine knowledge about cultural practices',\r\n        'Give specific examples when possible',\r\n        'Explain regional variations you\\'re aware of'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'instruction'\r\n    },\r\n    {\r\n      question: 'If you see a warning about response quality, what should you do?',\r\n      options: [\r\n        'Review and improve your answer to be more detailed and helpful',\r\n        'Ignore the warning and continue with the same type of responses',\r\n        'Close the survey immediately',\r\n        'Copy and paste from internet sources'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'instruction'\r\n    }\r\n  ];\r\n  \r\n  // Select a random check\r\n  const randomCheck = checks[Math.floor(Math.random() * checks.length)];\r\n  \r\n  // Shuffle options\r\n  const correctOption = randomCheck.options[randomCheck.correctAnswer];\r\n  const shuffledOptions = [...randomCheck.options];\r\n  \r\n  for (let i = shuffledOptions.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffledOptions[i], shuffledOptions[j]] = [shuffledOptions[j], shuffledOptions[i]];\r\n  }\r\n  \r\n  const newCorrectAnswer = shuffledOptions.indexOf(correctOption);\r\n  \r\n  return {\r\n    question: randomCheck.question,\r\n    options: shuffledOptions,\r\n    correctAnswer: newCorrectAnswer,\r\n    currentTopic,\r\n    currentCategory,\r\n    type: randomCheck.type\r\n  };\r\n};\r\n\r\n\r\nexport const analyzeResponseQuality = (answer: string): {\r\n  isLowQuality: boolean;\r\n  issues: string[];\r\n  score: number;\r\n  noneResponseCount?: number;\r\n} => {\r\n  const issues: string[] = [];\r\n  let score = 100; // Start with perfect score\r\n\r\n  const text = answer.toLowerCase().trim();\r\n  \r\n  // Check for \"none\" type responses (main focus)\r\n  const nonePatterns = [\r\n    /^(none|n\\/a|na|nothing|no|idk|i don't know|dk|dunno)$/i,\r\n    /^(none that i know|nothing that i know|no idea|not sure|dont know|don't know)$/i,\r\n    /^(same|similar|normal|usual|regular|typical|standard|common)$/i,\r\n    /^(not applicable|not available|no information|no data)$/i,\r\n  ];\r\n\r\n  let isNoneResponse = false;\r\n  nonePatterns.forEach(pattern => {\r\n    if (pattern.test(text)) {\r\n      isNoneResponse = true;\r\n      issues.push('Generic \"none\" or non-informative response');\r\n      score -= 40; // Heavy penalty for none responses\r\n    }\r\n  });\r\n\r\n  // Check for gibberish patterns (keep this check)\r\n  const gibberishPatterns = [\r\n    /^[bcdfghjklmnpqrstvwxyz]{6,}$/i, // Too many consonants\r\n    /^[aeiou]{6,}$/i, // Too many vowels\r\n    /(.{3,})\\1{2,}/, // Repeated patterns (abcabc)\r\n    /^[^a-z\\s]*$/i, // No letters at all (just symbols/numbers)\r\n    /^[a-z]{8,}$/i, // Long strings without spaces (likely gibberish)\r\n  ];\r\n\r\n  gibberishPatterns.forEach(pattern => {\r\n    if (pattern.test(text)) {\r\n      issues.push('Appears to be random characters or gibberish');\r\n      score -= 60; // Very heavy penalty for gibberish\r\n    }\r\n  });\r\n\r\n  // Check for keyboard mashing\r\n  const mashingPatterns = [\r\n    /qwerty|asdf|zxcv|hjkl|yuiop/i,\r\n    /abcd|1234|test|xxx|yyy|zzz/i,\r\n    /(.)\\1{4,}/, // Same character repeated 5+ times\r\n  ];\r\n\r\n  mashingPatterns.forEach(pattern => {\r\n    if (pattern.test(text)) {\r\n      issues.push('Keyboard mashing or test input detected');\r\n      score -= 50;\r\n    }\r\n  });\r\n\r\n  // Check for excessive repetition of words\r\n  const words = text.split(/\\s+/).filter(word => word.length > 2);\r\n  const wordCount = {};\r\n  words.forEach(word => {\r\n    wordCount[word] = (wordCount[word] || 0) + 1;\r\n  });\r\n\r\n  const repeatedWords = (Object.entries(wordCount) as [string, number][]).filter(([word, count]) => count > 3);\r\n  if (repeatedWords.length > 0) {\r\n    issues.push('Excessive word repetition');\r\n    score -= 30;\r\n  }\r\n\r\n  // Check for lack of specificity (but less harsh)\r\n  const vaguePhrases = ['something', 'things', 'stuff', 'anything', 'everything'];\r\n  const vagueCount = vaguePhrases.reduce((count, phrase) => \r\n    count + (text.match(new RegExp(`\\\\b${phrase}\\\\b`, 'g')) || []).length, 0\r\n  );\r\n  \r\n  if (vagueCount > 3) {\r\n    issues.push('Response lacks specific details');\r\n    score -= 15; // Reduced penalty\r\n  }\r\n\r\n  // REMOVED: Short response penalty - let people give concise answers\r\n\r\n  // Positive indicators (can boost score)\r\n  const positiveIndicators = [\r\n    /\\b(example|for instance|specifically|traditionally|commonly|usually|typically)\\b/i,\r\n    /\\b(in my region|in our area|locally|here we|we usually|in our culture)\\b/i,\r\n    /\\b(such as|like|including|consists of|involves|includes)\\b/i,\r\n  ];\r\n\r\n  let positiveCount = 0;\r\n  positiveIndicators.forEach(pattern => {\r\n    if (pattern.test(text)) positiveCount++;\r\n  });\r\n\r\n  if (positiveCount > 0) {\r\n    score += Math.min(positiveCount * 8, 20); // Max 20 point bonus\r\n  }\r\n\r\n  score = Math.max(0, Math.min(100, score)); // Clamp between 0-100\r\n  \r\n  return {\r\n    isLowQuality: score < 30, // Stricter threshold\r\n    issues,\r\n    score,\r\n    noneResponseCount: isNoneResponse ? 1 : 0\r\n  };\r\n};\r\n\r\n\r\n// New function to analyze user's \"none\" response pattern\r\nexport const analyzeNoneResponsePattern = (responses: Array<{answer: string}>): {\r\n  noneResponseRate: number;\r\n  totalNoneResponses: number;\r\n  isProblematic: boolean;\r\n} => {\r\n  let noneCount = 0;\r\n  \r\n  responses.forEach(response => {\r\n    const analysis = analyzeResponseQuality(response.answer);\r\n    noneCount += analysis.noneResponseCount || 0;\r\n  });\r\n\r\n  const noneResponseRate = responses.length > 0 ? (noneCount / responses.length) * 100 : 0;\r\n  \r\n  return {\r\n    noneResponseRate,\r\n    totalNoneResponses: noneCount,\r\n    isProblematic: noneResponseRate >= 30 // 30% or more \"none\" responses\r\n  };\r\n};\r\n\r\n\r\n\r\n\r\n// Updated user pattern analysis\r\nexport const analyzeUserPattern = (responses: Array<{answer: string, timeSpent: number}>): {\r\n  suspiciousPattern: boolean;\r\n  warnings: string[];\r\n  nonePattern: {noneResponseRate: number; totalNoneResponses: number; isProblematic: boolean};\r\n} => {\r\n  const warnings: string[] = [];\r\n  let suspiciousPattern = false;\r\n\r\n  if (responses.length < 3) return { \r\n    suspiciousPattern, \r\n    warnings, \r\n    nonePattern: { noneResponseRate: 0, totalNoneResponses: 0, isProblematic: false }\r\n  };\r\n\r\n  // Analyze \"none\" response pattern\r\n  const nonePattern = analyzeNoneResponsePattern(responses);\r\n  if (nonePattern.isProblematic) {\r\n    warnings.push(`High rate of \"none\" responses (${nonePattern.noneResponseRate.toFixed(1)}%)`);\r\n    suspiciousPattern = true;\r\n  }\r\n\r\n  // Check for consistent low time spent\r\n  const avgTimeSpent = responses.reduce((sum, r) => sum + r.timeSpent, 0) / responses.length;\r\n  if (avgTimeSpent < 8) {\r\n    warnings.push('Consistently very fast responses (possible rushing)');\r\n    suspiciousPattern = true;\r\n  }\r\n\r\n  // Check for similar responses\r\n  const answers = responses.map(r => r.answer.toLowerCase().trim());\r\n  const uniqueAnswers = new Set(answers);\r\n  if (uniqueAnswers.size < answers.length * 0.6) {\r\n    warnings.push('Many similar or identical responses');\r\n    suspiciousPattern = true;\r\n  }\r\n\r\n  // Check for quality decline\r\n  const recentResponses = responses.slice(-5);\r\n  const recentQualityScores = recentResponses.map(r => analyzeResponseQuality(r.answer).score);\r\n  const avgRecentQuality = recentQualityScores.reduce((sum, score) => sum + score, 0) / recentQualityScores.length;\r\n  \r\n  if (avgRecentQuality < 25) {\r\n    warnings.push('Recent response quality is very low');\r\n    suspiciousPattern = true;\r\n  }\r\n\r\n  return { suspiciousPattern, warnings, nonePattern };\r\n};\r\n\r\nexport const debounce = <T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait: number\r\n): ((...args: Parameters<T>) => void) => {\r\n  let timeout: ReturnType<typeof setTimeout>;\r\n  \r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func.apply(null, args), wait);\r\n  };\r\n};\r\n\r\nexport const getEstimatedTimeRemaining = (\r\n  totalQuestions: number,\r\n  completedQuestions: number,\r\n  averageTimePerQuestion: number = 120\r\n): string => {\r\n  const remainingQuestions = totalQuestions - completedQuestions;\r\n  const estimatedSeconds = remainingQuestions * averageTimePerQuestion;\r\n  \r\n  if (estimatedSeconds < 3600) {\r\n    const minutes = Math.ceil(estimatedSeconds / 60);\r\n    return `~${minutes} minute${minutes !== 1 ? 's' : ''} remaining`;\r\n  } else {\r\n    const hours = Math.ceil(estimatedSeconds / 3600);\r\n    return `~${hours} hour${hours !== 1 ? 's' : ''} remaining`;\r\n  }\r\n};"],"mappings":"AAEA,OAAO,MAAMA,iBAAiB,GAAG,MAAAA,CAAA,KAAiC;EAChE,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;IAE9D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,CAAC;IAE/C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6BH,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACK,UAAU,EAAE,CAAC;IACxF;IAEA,MAAMC,IAAgB,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;;IAE9C;IACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,IAAIA,IAAI,CAACI,MAAM,KAAK,CAAC,EAAE;MAC7C,MAAM,IAAIP,KAAK,CAAC,8CAA8C,CAAC;IACjE;;IAEA;IACA,KAAK,MAAMQ,QAAQ,IAAIL,IAAI,EAAE;MAC3B,IAAI,CAACK,QAAQ,CAACA,QAAQ,IAAI,CAACH,KAAK,CAACC,OAAO,CAACE,QAAQ,CAACC,aAAa,CAAC,EAAE;QAChE,MAAM,IAAIT,KAAK,CAAC,+BAA+BU,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC,EAAE,CAAC;MAC5E;MAEA,KAAK,MAAMI,WAAW,IAAIJ,QAAQ,CAACC,aAAa,EAAE;QAChD,IAAI,CAACG,WAAW,CAACA,WAAW,IAAI,CAACP,KAAK,CAACC,OAAO,CAACM,WAAW,CAACC,MAAM,CAAC,EAAE;UAClE,MAAM,IAAIb,KAAK,CAAC,kCAAkCU,IAAI,CAACC,SAAS,CAACC,WAAW,CAAC,EAAE,CAAC;QAClF;QAEA,KAAK,MAAME,KAAK,IAAIF,WAAW,CAACC,MAAM,EAAE;UACtC,IAAI,CAACC,KAAK,CAACA,KAAK,IAAI,CAACT,KAAK,CAACC,OAAO,CAACQ,KAAK,CAACC,SAAS,CAAC,EAAE;YACnD,MAAM,IAAIf,KAAK,CAAC,4BAA4BU,IAAI,CAACC,SAAS,CAACG,KAAK,CAAC,EAAE,CAAC;UACtE;UAEA,IAAIA,KAAK,CAACC,SAAS,CAACR,MAAM,KAAK,CAAC,EAAE;YAChCZ,OAAO,CAACqB,IAAI,CAAC,UAAUF,KAAK,CAACA,KAAK,oBAAoB,CAAC;UACzD;QACF;MACF;IACF;IAEAnB,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE;MAC5CqB,UAAU,EAAEd,IAAI,CAACI,MAAM;MACvBW,kBAAkB,EAAEf,IAAI,CAACgB,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,CAACZ,aAAa,CAACF,MAAM,EAAE,CAAC,CAAC;MAChFe,WAAW,EAAEnB,IAAI,CAACgB,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAChCD,GAAG,GAAGC,GAAG,CAACZ,aAAa,CAACU,MAAM,CAAC,CAACI,MAAM,EAAEC,GAAG,KAAKD,MAAM,GAAGC,GAAG,CAACX,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MACpFkB,cAAc,EAAEtB,IAAI,CAACgB,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KACnCD,GAAG,GAAGC,GAAG,CAACZ,aAAa,CAACU,MAAM,CAAC,CAACI,MAAM,EAAEC,GAAG,KACzCD,MAAM,GAAGC,GAAG,CAACX,MAAM,CAACM,MAAM,CAAC,CAACO,QAAQ,EAAEZ,KAAK,KAAKY,QAAQ,GAAGZ,KAAK,CAACC,SAAS,CAACR,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;IAClG,CAAC,CAAC;IAEF,OAAOJ,IAAI;EAEb,CAAC,CAAC,OAAOwB,KAAK,EAAE;IACdhC,OAAO,CAACgC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;;IAErD;IACAhC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3C,MAAMgC,YAAwB,GAAG,CAC/B;MACE,UAAU,EAAE,yBAAyB;MACrC,eAAe,EAAE,CACf;QACE,aAAa,EAAE,0BAA0B;QACzC,QAAQ,EAAE,CACR;UACE,OAAO,EAAE,wCAAwC;UACjD,WAAW,EAAE,CACX,8OAA8O,EAC9O,qKAAqK,EACrK,+IAA+I,EAC/I,gHAAgH,EAChH,6IAA6I;QAEjJ,CAAC;MAEL,CAAC;IAEL,CAAC,CACF;IAED,OAAOA,YAAY;EACrB;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAGA,CAChCC,aAAqB,EACrBC,gBAAwB,EACxBC,UAAkB,EAClBC,aAAqB,KACV;EACX,OAAO,GAAGH,aAAa,IAAIC,gBAAgB,IAAIC,UAAU,IAAIC,aAAa,EAAE;AAC9E,CAAC;AAED,OAAO,MAAMC,eAAe,GAAIC,UAAkB,IAAK;EACrD,MAAM,CAACL,aAAa,EAAEC,gBAAgB,EAAEC,UAAU,EAAEC,aAAa,CAAC,GAAGE,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;EACtG,OAAO;IAAER,aAAa;IAAEC,gBAAgB;IAAEC,UAAU;IAAEC;EAAc,CAAC;AACvE,CAAC;AAED,OAAO,MAAMM,UAAU,GAAIC,OAAe,IAAa;EACrD,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC;EACrC,MAAMI,IAAI,GAAGJ,OAAO,GAAG,EAAE;EACzB,OAAO,GAAGC,IAAI,IAAIG,IAAI,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;AACtD,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIC,MAAc,IAA6C;EACxF,IAAI,CAACA,MAAM,IAAIA,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC1C,MAAM,KAAK,CAAC,EAAE;IACzC,OAAO;MAAE2C,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAA2B,CAAC;EAChE;EAEA,IAAIH,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC1C,MAAM,GAAG,CAAC,EAAE;IAC5B,OAAO;MAAE2C,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAgE,CAAC;EACrG;EAEA,IAAIH,MAAM,CAACzC,MAAM,GAAG,IAAI,EAAE;IACxB,OAAO;MAAE2C,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAA+C,CAAC;EACpF;EAEA,OAAO;IAAED,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;AAED,OAAO,MAAME,wBAAwB,GAAIC,aAAqB,IAAc;EAC1E;EACA,OAAOA,aAAa,GAAG,CAAC,IAAIA,aAAa,GAAG,EAAE,KAAK,CAAC;AACtD,CAAC;;AAED;AACA,OAAO,MAAMC,sBAAsB,GAAGA,CACpCC,eAAuB,EACvBC,YAAoB,EACpBC,QAA0C,KACvB;EACnB,MAAMC,MAAM,GAAG;EACb;EACA;IACEC,QAAQ,EAAE,gDAAgDJ,eAAe,uCAAuC;IAChHK,OAAO,EAAE,CAACL,eAAe,EAAE,kBAAkB,EAAE,qBAAqB,EAAE,qBAAqB,CAAC;IAC5FM,aAAa,EAAE,CAAC;IAChBC,IAAI,EAAE;EACR,CAAC,EACD;IACEH,QAAQ,EAAE,UAAUJ,eAAe,yBAAyBC,YAAY,gCAAgC;IACxGI,OAAO,EAAE,CAACJ,YAAY,EAAE,wBAAwB,EAAE,uBAAuB,EAAE,sBAAsB,CAAC;IAClGK,aAAa,EAAE,CAAC;IAChBC,IAAI,EAAE;EACR,CAAC;EAED;EACA;IACEH,QAAQ,EAAE,iDAAiD;IAC3DC,OAAO,EAAE,CACP,+EAA+E,EAC/E,yDAAyD,EACzD,0CAA0C,EAC1C,0CAA0C,CAC3C;IACDC,aAAa,EAAE,CAAC;IAChBC,IAAI,EAAE;EACR,CAAC,EACD;IACEH,QAAQ,EAAE,8DAA8D;IACxEC,OAAO,EAAE,CACP,6EAA6E,EAC7E,yCAAyC,EACzC,uCAAuC,EACvC,kEAAkE,CACnE;IACDC,aAAa,EAAE,CAAC;IAChBC,IAAI,EAAE;EACR,CAAC,EACD;IACEH,QAAQ,EAAE,4FAA4F;IACtGC,OAAO,EAAE,CACP,iFAAiF,EACjF,oCAAoC,EACpC,2CAA2C,EAC3C,qCAAqC,CACtC;IACDC,aAAa,EAAE,CAAC;IAChBC,IAAI,EAAE;EACR,CAAC;EAED;EACA;IACEH,QAAQ,EAAE,0EAA0E;IACpFC,OAAO,EAAE,CACP,oEAAoE,EACpE,kCAAkC,EAClC,0CAA0C,EAC1C,wCAAwC,CACzC;IACDC,aAAa,EAAE,CAAC;IAChBC,IAAI,EAAE;EACR,CAAC,EACD;IACEH,QAAQ,EAAE,yEAAyE;IACnFC,OAAO,EAAE,CACP,+DAA+D,EAC/D,qCAAqC,EACrC,+CAA+C,EAC/C,4BAA4B,CAC7B;IACDC,aAAa,EAAE,CAAC;IAChBC,IAAI,EAAE;EACR,CAAC;EAED;EACA;IACEH,QAAQ,EAAE,2DAA2D;IACrEC,OAAO,EAAE,CACP,OAAO,EACP,OAAO,EACP,eAAe,EACf,gBAAgB,CACjB;IACDC,aAAa,EAAE,CAAC;IAChBC,IAAI,EAAE;EACR,CAAC,EACD;IACEH,QAAQ,EAAE,wEAAwE;IAClFC,OAAO,EAAE,CACP,kDAAkD,EAClD,eAAe,EACf,aAAa,EACb,aAAa,CACd;IACDC,aAAa,EAAE,CAAC;IAChBC,IAAI,EAAE;EACR,CAAC;EAED;EACA,IAAIL,QAAQ,GAAG,CACb;IACEE,QAAQ,EAAE,mCAAmCF,QAAQ,CAACM,MAAM,uDAAuD;IACnHH,OAAO,EAAE,CACP,GAAGH,QAAQ,CAACM,MAAM,QAAQ,EAC1BN,QAAQ,CAACM,MAAM,KAAK,OAAO,GAAG,aAAa,GAAG,aAAa,EAC3DN,QAAQ,CAACM,MAAM,KAAK,MAAM,GAAG,YAAY,GAAG,YAAY,EACxD,4BAA4B,CAC7B;IACDF,aAAa,EAAE,CAAC;IAChBC,IAAI,EAAE;EACR,CAAC,CACF,GAAG,EAAE,CAAC;EAEP;EACA;IACEH,QAAQ,EAAE,wFAAwF;IAClGC,OAAO,EAAE,CACP,2DAA2D,EAC3D,uDAAuD,EACvD,sCAAsC,EACtC,8CAA8C,CAC/C;IACDC,aAAa,EAAE,CAAC;IAChBC,IAAI,EAAE;EACR,CAAC,EACD;IACEH,QAAQ,EAAE,kEAAkE;IAC5EC,OAAO,EAAE,CACP,gEAAgE,EAChE,iEAAiE,EACjE,8BAA8B,EAC9B,sCAAsC,CACvC;IACDC,aAAa,EAAE,CAAC;IAChBC,IAAI,EAAE;EACR,CAAC,CACF;;EAED;EACA,MAAME,WAAW,GAAGN,MAAM,CAAChB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACuB,MAAM,CAAC,CAAC,GAAGP,MAAM,CAACnD,MAAM,CAAC,CAAC;;EAErE;EACA,MAAM2D,aAAa,GAAGF,WAAW,CAACJ,OAAO,CAACI,WAAW,CAACH,aAAa,CAAC;EACpE,MAAMM,eAAe,GAAG,CAAC,GAAGH,WAAW,CAACJ,OAAO,CAAC;EAEhD,KAAK,IAAIQ,CAAC,GAAGD,eAAe,CAAC5D,MAAM,GAAG,CAAC,EAAE6D,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACnD,MAAMC,CAAC,GAAG3B,IAAI,CAACC,KAAK,CAACD,IAAI,CAACuB,MAAM,CAAC,CAAC,IAAIG,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,CAACD,eAAe,CAACC,CAAC,CAAC,EAAED,eAAe,CAACE,CAAC,CAAC,CAAC,GAAG,CAACF,eAAe,CAACE,CAAC,CAAC,EAAEF,eAAe,CAACC,CAAC,CAAC,CAAC;EACrF;EAEA,MAAME,gBAAgB,GAAGH,eAAe,CAACI,OAAO,CAACL,aAAa,CAAC;EAE/D,OAAO;IACLP,QAAQ,EAAEK,WAAW,CAACL,QAAQ;IAC9BC,OAAO,EAAEO,eAAe;IACxBN,aAAa,EAAES,gBAAgB;IAC/Bd,YAAY;IACZD,eAAe;IACfO,IAAI,EAAEE,WAAW,CAACF;EACpB,CAAC;AACH,CAAC;AAGD,OAAO,MAAMU,sBAAsB,GAAIxB,MAAc,IAKhD;EACH,MAAMyB,MAAgB,GAAG,EAAE;EAC3B,IAAIC,KAAK,GAAG,GAAG,CAAC,CAAC;;EAEjB,MAAMC,IAAI,GAAG3B,MAAM,CAAC4B,WAAW,CAAC,CAAC,CAAC3B,IAAI,CAAC,CAAC;;EAExC;EACA,MAAM4B,YAAY,GAAG,CACnB,wDAAwD,EACxD,iFAAiF,EACjF,gEAAgE,EAChE,0DAA0D,CAC3D;EAED,IAAIC,cAAc,GAAG,KAAK;EAC1BD,YAAY,CAACE,OAAO,CAACC,OAAO,IAAI;IAC9B,IAAIA,OAAO,CAACC,IAAI,CAACN,IAAI,CAAC,EAAE;MACtBG,cAAc,GAAG,IAAI;MACrBL,MAAM,CAACS,IAAI,CAAC,4CAA4C,CAAC;MACzDR,KAAK,IAAI,EAAE,CAAC,CAAC;IACf;EACF,CAAC,CAAC;;EAEF;EACA,MAAMS,iBAAiB,GAAG,CACxB,gCAAgC;EAAE;EAClC,gBAAgB;EAAE;EAClB,eAAe;EAAE;EACjB,cAAc;EAAE;EAChB,cAAc,CAAE;EAAA,CACjB;EAEDA,iBAAiB,CAACJ,OAAO,CAACC,OAAO,IAAI;IACnC,IAAIA,OAAO,CAACC,IAAI,CAACN,IAAI,CAAC,EAAE;MACtBF,MAAM,CAACS,IAAI,CAAC,8CAA8C,CAAC;MAC3DR,KAAK,IAAI,EAAE,CAAC,CAAC;IACf;EACF,CAAC,CAAC;;EAEF;EACA,MAAMU,eAAe,GAAG,CACtB,8BAA8B,EAC9B,6BAA6B,EAC7B,WAAW,CAAE;EAAA,CACd;EAEDA,eAAe,CAACL,OAAO,CAACC,OAAO,IAAI;IACjC,IAAIA,OAAO,CAACC,IAAI,CAACN,IAAI,CAAC,EAAE;MACtBF,MAAM,CAACS,IAAI,CAAC,yCAAyC,CAAC;MACtDR,KAAK,IAAI,EAAE;IACb;EACF,CAAC,CAAC;;EAEF;EACA,MAAMW,KAAK,GAAGV,IAAI,CAACvC,KAAK,CAAC,KAAK,CAAC,CAACkD,MAAM,CAACC,IAAI,IAAIA,IAAI,CAAChF,MAAM,GAAG,CAAC,CAAC;EAC/D,MAAMiF,SAAS,GAAG,CAAC,CAAC;EACpBH,KAAK,CAACN,OAAO,CAACQ,IAAI,IAAI;IACpBC,SAAS,CAACD,IAAI,CAAC,GAAG,CAACC,SAAS,CAACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;EAC9C,CAAC,CAAC;EAEF,MAAME,aAAa,GAAIC,MAAM,CAACC,OAAO,CAACH,SAAS,CAAC,CAAwBF,MAAM,CAAC,CAAC,CAACC,IAAI,EAAEK,KAAK,CAAC,KAAKA,KAAK,GAAG,CAAC,CAAC;EAC5G,IAAIH,aAAa,CAAClF,MAAM,GAAG,CAAC,EAAE;IAC5BkE,MAAM,CAACS,IAAI,CAAC,2BAA2B,CAAC;IACxCR,KAAK,IAAI,EAAE;EACb;;EAEA;EACA,MAAMmB,YAAY,GAAG,CAAC,WAAW,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,YAAY,CAAC;EAC/E,MAAMC,UAAU,GAAGD,YAAY,CAAC1E,MAAM,CAAC,CAACyE,KAAK,EAAEG,MAAM,KACnDH,KAAK,GAAG,CAACjB,IAAI,CAACqB,KAAK,CAAC,IAAIC,MAAM,CAAC,MAAMF,MAAM,KAAK,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,EAAExF,MAAM,EAAE,CACzE,CAAC;EAED,IAAIuF,UAAU,GAAG,CAAC,EAAE;IAClBrB,MAAM,CAACS,IAAI,CAAC,iCAAiC,CAAC;IAC9CR,KAAK,IAAI,EAAE,CAAC,CAAC;EACf;;EAEA;;EAEA;EACA,MAAMwB,kBAAkB,GAAG,CACzB,mFAAmF,EACnF,2EAA2E,EAC3E,6DAA6D,CAC9D;EAED,IAAIC,aAAa,GAAG,CAAC;EACrBD,kBAAkB,CAACnB,OAAO,CAACC,OAAO,IAAI;IACpC,IAAIA,OAAO,CAACC,IAAI,CAACN,IAAI,CAAC,EAAEwB,aAAa,EAAE;EACzC,CAAC,CAAC;EAEF,IAAIA,aAAa,GAAG,CAAC,EAAE;IACrBzB,KAAK,IAAIhC,IAAI,CAAC0D,GAAG,CAACD,aAAa,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EAC5C;EAEAzB,KAAK,GAAGhC,IAAI,CAAC2D,GAAG,CAAC,CAAC,EAAE3D,IAAI,CAAC0D,GAAG,CAAC,GAAG,EAAE1B,KAAK,CAAC,CAAC,CAAC,CAAC;;EAE3C,OAAO;IACL4B,YAAY,EAAE5B,KAAK,GAAG,EAAE;IAAE;IAC1BD,MAAM;IACNC,KAAK;IACL6B,iBAAiB,EAAEzB,cAAc,GAAG,CAAC,GAAG;EAC1C,CAAC;AACH,CAAC;;AAGD;AACA,OAAO,MAAM0B,0BAA0B,GAAIC,SAAkC,IAIxE;EACH,IAAIC,SAAS,GAAG,CAAC;EAEjBD,SAAS,CAAC1B,OAAO,CAAClF,QAAQ,IAAI;IAC5B,MAAM8G,QAAQ,GAAGnC,sBAAsB,CAAC3E,QAAQ,CAACmD,MAAM,CAAC;IACxD0D,SAAS,IAAIC,QAAQ,CAACJ,iBAAiB,IAAI,CAAC;EAC9C,CAAC,CAAC;EAEF,MAAMK,gBAAgB,GAAGH,SAAS,CAAClG,MAAM,GAAG,CAAC,GAAImG,SAAS,GAAGD,SAAS,CAAClG,MAAM,GAAI,GAAG,GAAG,CAAC;EAExF,OAAO;IACLqG,gBAAgB;IAChBC,kBAAkB,EAAEH,SAAS;IAC7BI,aAAa,EAAEF,gBAAgB,IAAI,EAAE,CAAC;EACxC,CAAC;AACH,CAAC;;AAKD;AACA,OAAO,MAAMG,kBAAkB,GAAIN,SAAqD,IAInF;EACH,MAAMO,QAAkB,GAAG,EAAE;EAC7B,IAAIC,iBAAiB,GAAG,KAAK;EAE7B,IAAIR,SAAS,CAAClG,MAAM,GAAG,CAAC,EAAE,OAAO;IAC/B0G,iBAAiB;IACjBD,QAAQ;IACRE,WAAW,EAAE;MAAEN,gBAAgB,EAAE,CAAC;MAAEC,kBAAkB,EAAE,CAAC;MAAEC,aAAa,EAAE;IAAM;EAClF,CAAC;;EAED;EACA,MAAMI,WAAW,GAAGV,0BAA0B,CAACC,SAAS,CAAC;EACzD,IAAIS,WAAW,CAACJ,aAAa,EAAE;IAC7BE,QAAQ,CAAC9B,IAAI,CAAC,kCAAkCgC,WAAW,CAACN,gBAAgB,CAACO,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IAC5FF,iBAAiB,GAAG,IAAI;EAC1B;;EAEA;EACA,MAAMG,YAAY,GAAGX,SAAS,CAACtF,MAAM,CAAC,CAACC,GAAG,EAAEiG,CAAC,KAAKjG,GAAG,GAAGiG,CAAC,CAACC,SAAS,EAAE,CAAC,CAAC,GAAGb,SAAS,CAAClG,MAAM;EAC1F,IAAI6G,YAAY,GAAG,CAAC,EAAE;IACpBJ,QAAQ,CAAC9B,IAAI,CAAC,qDAAqD,CAAC;IACpE+B,iBAAiB,GAAG,IAAI;EAC1B;;EAEA;EACA,MAAMM,OAAO,GAAGd,SAAS,CAACpE,GAAG,CAACgF,CAAC,IAAIA,CAAC,CAACrE,MAAM,CAAC4B,WAAW,CAAC,CAAC,CAAC3B,IAAI,CAAC,CAAC,CAAC;EACjE,MAAMuE,aAAa,GAAG,IAAIC,GAAG,CAACF,OAAO,CAAC;EACtC,IAAIC,aAAa,CAACE,IAAI,GAAGH,OAAO,CAAChH,MAAM,GAAG,GAAG,EAAE;IAC7CyG,QAAQ,CAAC9B,IAAI,CAAC,qCAAqC,CAAC;IACpD+B,iBAAiB,GAAG,IAAI;EAC1B;;EAEA;EACA,MAAMU,eAAe,GAAGlB,SAAS,CAACmB,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3C,MAAMC,mBAAmB,GAAGF,eAAe,CAACtF,GAAG,CAACgF,CAAC,IAAI7C,sBAAsB,CAAC6C,CAAC,CAACrE,MAAM,CAAC,CAAC0B,KAAK,CAAC;EAC5F,MAAMoD,gBAAgB,GAAGD,mBAAmB,CAAC1G,MAAM,CAAC,CAACC,GAAG,EAAEsD,KAAK,KAAKtD,GAAG,GAAGsD,KAAK,EAAE,CAAC,CAAC,GAAGmD,mBAAmB,CAACtH,MAAM;EAEhH,IAAIuH,gBAAgB,GAAG,EAAE,EAAE;IACzBd,QAAQ,CAAC9B,IAAI,CAAC,qCAAqC,CAAC;IACpD+B,iBAAiB,GAAG,IAAI;EAC1B;EAEA,OAAO;IAAEA,iBAAiB;IAAED,QAAQ;IAAEE;EAAY,CAAC;AACrD,CAAC;AAED,OAAO,MAAMa,QAAQ,GAAGA,CACtBC,IAAO,EACPC,IAAY,KAC2B;EACvC,IAAIC,OAAsC;EAE1C,OAAO,CAAC,GAAGC,IAAmB,KAAK;IACjCC,YAAY,CAACF,OAAO,CAAC;IACrBA,OAAO,GAAGG,UAAU,CAAC,MAAML,IAAI,CAACM,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC,EAAEF,IAAI,CAAC;EAC1D,CAAC;AACH,CAAC;AAED,OAAO,MAAMM,yBAAyB,GAAGA,CACvC9G,cAAsB,EACtB+G,kBAA0B,EAC1BC,sBAA8B,GAAG,GAAG,KACzB;EACX,MAAMC,kBAAkB,GAAGjH,cAAc,GAAG+G,kBAAkB;EAC9D,MAAMG,gBAAgB,GAAGD,kBAAkB,GAAGD,sBAAsB;EAEpE,IAAIE,gBAAgB,GAAG,IAAI,EAAE;IAC3B,MAAMC,OAAO,GAAGlG,IAAI,CAACmG,IAAI,CAACF,gBAAgB,GAAG,EAAE,CAAC;IAChD,OAAO,IAAIC,OAAO,UAAUA,OAAO,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,YAAY;EAClE,CAAC,MAAM;IACL,MAAME,KAAK,GAAGpG,IAAI,CAACmG,IAAI,CAACF,gBAAgB,GAAG,IAAI,CAAC;IAChD,OAAO,IAAIG,KAAK,QAAQA,KAAK,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,YAAY;EAC5D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}