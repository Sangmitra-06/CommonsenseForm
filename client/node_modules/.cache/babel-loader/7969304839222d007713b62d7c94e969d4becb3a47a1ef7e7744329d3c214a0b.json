{"ast":null,"code":"export const loadQuestionsData = async () => {\n  try {\n    console.log('Loading questions from public/questions.json...');\n    const response = await fetch('/questions.json');\n    if (!response.ok) {\n      throw new Error(`Failed to load questions: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n\n    // Validate the data structure\n    if (!Array.isArray(data) || data.length === 0) {\n      throw new Error('Questions data is not in the expected format');\n    }\n\n    // Calculate totals for logging\n    const totalQuestions = data.reduce((sum, cat) => sum + cat.subcategories.reduce((subSum, sub) => subSum + sub.topics.reduce((topicSum, topic) => topicSum + topic.questions.length, 0), 0), 0);\n    console.log('Questions loaded successfully:', {\n      categories: data.length,\n      totalSubcategories: data.reduce((sum, cat) => sum + cat.subcategories.length, 0),\n      totalTopics: data.reduce((sum, cat) => sum + cat.subcategories.reduce((subSum, sub) => subSum + sub.topics.length, 0), 0),\n      totalQuestions\n    });\n    return data;\n  } catch (error) {\n    console.error('Error loading questions data:', error);\n    throw new Error('Failed to load questions data');\n  }\n};\nexport const validateAnswer = answer => {\n  if (!answer || answer.trim().length === 0) {\n    return {\n      isValid: false,\n      message: 'Please provide an answer'\n    };\n  }\n  if (answer.trim().length < 4) {\n    return {\n      isValid: false,\n      message: 'Please provide a more detailed answer (at least 4 characters)'\n    };\n  }\n  if (answer.length > 5000) {\n    return {\n      isValid: false,\n      message: 'Answer is too long (maximum 5000 characters)'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\nexport const shouldShowAttentionCheck = questionCount => {\n  return questionCount > 0 && questionCount % 15 === 0;\n};\n\n// Comprehensive quality analysis\nexport const analyzeResponseQuality = answer => {\n  const issues = [];\n  let score = 100;\n  let isNoneResponse = false;\n  let isGibberish = false;\n  const text = answer.toLowerCase().trim();\n\n  // Check for \"none\" type responses\n  const nonePatterns = [/^(none|n\\/a|na|nothing|no|idk|i don't know|dk|dunno)$/i, /^(none that i know|nothing that i know|no idea|not sure|dont know|don't know)$/i, /^(same|similar|normal|usual|regular|typical|standard|common)$/i, /^(not applicable|not available|no information|no data)$/i];\n  nonePatterns.forEach(pattern => {\n    if (pattern.test(text)) {\n      isNoneResponse = true;\n      issues.push('Generic \"none\" or non-informative response');\n      score -= 40;\n    }\n  });\n\n  // Check for gibberish patterns\n  const gibberishPatterns = [/^[bcdfghjklmnpqrstvwxyz]{6,}$/i,\n  // Too many consonants\n  /^[aeiou]{6,}$/i,\n  // Too many vowels\n  /(.{3,})\\1{2,}/,\n  // Repeated patterns (abcabc)\n  /^[^a-z\\s]*$/i,\n  // No letters at all\n  /^[a-z]{8,}$/i // Long strings without spaces\n  ];\n\n  // Keyboard mashing patterns\n  const mashingPatterns = [/qwerty|asdf|zxcv|hjkl|yuiop/i, /abcd|1234|test|xxx|yyy|zzz/i, /(.)\\1{4,}/ // Same character repeated 5+ times\n  ];\n  gibberishPatterns.forEach(pattern => {\n    if (pattern.test(text)) {\n      isGibberish = true;\n      issues.push('Appears to be random characters or gibberish');\n      score -= 60;\n    }\n  });\n  mashingPatterns.forEach(pattern => {\n    if (pattern.test(text)) {\n      isGibberish = true;\n      issues.push('Keyboard mashing or test input detected');\n      score -= 50;\n    }\n  });\n\n  // Check for excessive repetition of words\n  const words = text.split(/\\s+/).filter(word => word.length > 2);\n  const wordCount = {};\n  words.forEach(word => {\n    wordCount[word] = (wordCount[word] || 0) + 1;\n  });\n  const repeatedWords = Object.entries(wordCount).filter(([word, count]) => count > 3);\n  if (repeatedWords.length > 0) {\n    issues.push('Excessive word repetition');\n    score -= 30;\n  }\n\n  // Check for lack of specificity\n  const vaguePhrases = ['something', 'things', 'stuff', 'anything', 'everything'];\n  const vagueCount = vaguePhrases.reduce((count, phrase) => count + (text.match(new RegExp(`\\\\b${phrase}\\\\b`, 'g')) || []).length, 0);\n  if (vagueCount > 3) {\n    issues.push('Response lacks specific details');\n    score -= 15;\n  }\n\n  // Positive indicators\n  const positiveIndicators = [/\\b(example|for instance|specifically|traditionally|commonly|usually|typically)\\b/i, /\\b(in my region|in our area|locally|here we|we usually|in our culture)\\b/i, /\\b(such as|like|including|consists of|involves|includes)\\b/i];\n  let positiveCount = 0;\n  positiveIndicators.forEach(pattern => {\n    if (pattern.test(text)) positiveCount++;\n  });\n  if (positiveCount > 0) {\n    score += Math.min(positiveCount * 8, 20);\n  }\n  score = Math.max(0, Math.min(100, score));\n  return {\n    isLowQuality: score < 30,\n    issues,\n    score,\n    isNoneResponse,\n    isGibberish\n  };\n};\n\n// Comprehensive pattern analysis\nexport const analyzeUserPattern = responses => {\n  const warnings = [];\n  let suspiciousPattern = false;\n  if (responses.length < 5) {\n    return {\n      suspiciousPattern,\n      warnings,\n      noneResponseRate: 0,\n      gibberishResponseRate: 0,\n      fastResponseRate: 0,\n      issueType: null\n    };\n  }\n\n  // Analyze response patterns\n  let noneCount = 0;\n  let gibberishCount = 0;\n  let fastResponseCount = 0;\n  responses.forEach(response => {\n    const analysis = analyzeResponseQuality(response.answer);\n    if (analysis.isNoneResponse) noneCount++;\n    if (analysis.isGibberish) gibberishCount++;\n    if (response.timeSpent < 8) fastResponseCount++;\n  });\n  const noneResponseRate = noneCount / responses.length * 100;\n  const gibberishResponseRate = gibberishCount / responses.length * 100;\n  const fastResponseRate = fastResponseCount / responses.length * 100;\n  let issueType = null;\n\n  // Check for problematic patterns (30% threshold for all)\n  if (noneResponseRate >= 30) {\n    warnings.push(`High rate of \"none\" responses (${noneResponseRate.toFixed(1)}%)`);\n    suspiciousPattern = true;\n    issueType = 'none';\n  }\n  if (gibberishResponseRate >= 30) {\n    warnings.push(`High rate of gibberish responses (${gibberishResponseRate.toFixed(1)}%)`);\n    suspiciousPattern = true;\n    issueType = issueType ? 'multiple' : 'gibberish';\n  }\n  if (fastResponseRate >= 30) {\n    warnings.push(`High rate of very fast responses (${fastResponseRate.toFixed(1)}%)`);\n    suspiciousPattern = true;\n    issueType = issueType ? 'multiple' : 'speed';\n  }\n\n  // Check for similar responses\n  const answers = responses.map(r => r.answer.toLowerCase().trim());\n  const uniqueAnswers = new Set(answers);\n  if (uniqueAnswers.size < answers.length * 0.6) {\n    warnings.push('Many similar or identical responses');\n    suspiciousPattern = true;\n    issueType = issueType ? 'multiple' : 'repetition';\n  }\n\n  // Check for overall quality decline\n  const recentResponses = responses.slice(-5);\n  const recentQualityScores = recentResponses.map(r => analyzeResponseQuality(r.answer).score);\n  const avgRecentQuality = recentQualityScores.reduce((sum, score) => sum + score, 0) / recentQualityScores.length;\n  if (avgRecentQuality < 25) {\n    warnings.push('Overall response quality is very low');\n    suspiciousPattern = true;\n    issueType = issueType ? 'multiple' : 'quality';\n  }\n  return {\n    suspiciousPattern,\n    warnings,\n    noneResponseRate,\n    gibberishResponseRate,\n    fastResponseRate,\n    issueType\n  };\n};\n\n// Enhanced attention check questions\nexport const generateAttentionCheck = (currentCategory, currentTopic, userInfo) => {\n  const checks = [{\n    question: `You are currently answering questions about \"${currentCategory}\". Which category are you working on?`,\n    options: [currentCategory, 'Food and Cuisine', 'Religious Practices', 'Economic Activities'],\n    correctAnswer: 0,\n    type: 'context'\n  }, {\n    question: `Within ${currentCategory}, you're focusing on \"${currentTopic}\". What is your current topic?`,\n    options: [currentTopic, 'Traditional Ceremonies', 'Seasonal Celebrations', 'Community Gatherings'],\n    correctAnswer: 0,\n    type: 'context'\n  }, {\n    question: 'What is the main focus of this cultural survey?',\n    options: ['Understanding cultural practices and traditions in different regions of India', 'Collecting political opinions about government policies', 'Reviewing consumer products and services', 'Gathering medical and health information'],\n    correctAnswer: 0,\n    type: 'comprehension'\n  }, {\n    question: 'When answering questions, you should base your responses on:',\n    options: ['Your personal knowledge and experience of cultural practices in your region', 'What you think researchers want to hear', 'Random guesses or made-up information', 'Practices from other countries or regions you\\'ve seen in movies'],\n    correctAnswer: 0,\n    type: 'instruction'\n  }, {\n    question: 'What should you do if you encounter a question about a practice you\\'re not familiar with?',\n    options: ['Explain what you do know or indicate that the practice is uncommon in your area', 'Just write \"none\" or \"don\\'t know\"', 'Copy your answer from a previous question', 'Make up a detailed but false answer'],\n    correctAnswer: 0,\n    type: 'instruction'\n  }, {\n    question: 'If a cultural practice is described as \"cultural commonsense,\" it means:',\n    options: ['It is widely shared and considered natural within a cultural group', 'It is a rare or unusual practice', 'It comes from foreign cultural influence', 'It is a personal individual preference'],\n    correctAnswer: 0,\n    type: 'definition'\n  }, {\n    question: 'Which of these would be the BEST type of answer for cultural questions?',\n    options: ['Detailed explanations with specific examples from your region', 'One-word answers like \"yes\" or \"no\"', 'Identical responses copied for every question', 'Random letters and symbols'],\n    correctAnswer: 0,\n    type: 'instruction'\n  }, {\n    question: 'This survey is about cultural practices in which country?',\n    options: ['India', 'China', 'United States', 'United Kingdom'],\n    correctAnswer: 0,\n    type: 'basic'\n  }, {\n    question: 'How many regions of India are you asked to choose from in this survey?',\n    options: ['Five regions (North, South, East, West, Central)', 'Three regions', 'Ten regions', 'Two regions'],\n    correctAnswer: 0,\n    type: 'basic'\n  }, {\n    question: 'According to the survey instructions, what should you NOT do when answering questions?',\n    options: ['Provide random, meaningless responses or keyboard mashing', 'Share your genuine knowledge about cultural practices', 'Give specific examples when possible', 'Explain regional variations you\\'re aware of'],\n    correctAnswer: 0,\n    type: 'instruction'\n  }];\n\n  // Add personal verification if userInfo available\n  if (userInfo) {\n    checks.push({\n      question: `You indicated that you are from ${userInfo.region} India. Which region did you select?`,\n      options: [`${userInfo.region} India`, userInfo.region === 'North' ? 'South India' : 'North India', userInfo.region === 'East' ? 'West India' : 'East India', 'I did not specify a region'],\n      correctAnswer: 0,\n      type: 'personal'\n    });\n  }\n\n  // Select random check and shuffle options\n  const randomCheck = checks[Math.floor(Math.random() * checks.length)];\n  const correctOption = randomCheck.options[randomCheck.correctAnswer];\n  const shuffledOptions = [...randomCheck.options];\n  for (let i = shuffledOptions.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledOptions[i], shuffledOptions[j]] = [shuffledOptions[j], shuffledOptions[i]];\n  }\n  return {\n    question: randomCheck.question,\n    options: shuffledOptions,\n    correctAnswer: shuffledOptions.indexOf(correctOption),\n    currentTopic,\n    currentCategory,\n    type: randomCheck.type\n  };\n};\n\n// Utility functions\nexport const generateQuestionId = (categoryIndex, subcategoryIndex, topicIndex, questionIndex) => {\n  return `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\n};\nexport const formatTime = seconds => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\n};\nexport const debounce = (func, wait) => {\n  let timeout;\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(null, args), wait);\n  };\n};\nexport const getEstimatedTimeRemaining = (totalQuestions, completedQuestions, averageTimePerQuestion = 120) => {\n  const remainingQuestions = totalQuestions - completedQuestions;\n  const estimatedSeconds = remainingQuestions * averageTimePerQuestion;\n  if (estimatedSeconds < 3600) {\n    const minutes = Math.ceil(estimatedSeconds / 60);\n    return `~${minutes} minute${minutes !== 1 ? 's' : ''} remaining`;\n  } else {\n    const hours = Math.ceil(estimatedSeconds / 3600);\n    return `~${hours} hour${hours !== 1 ? 's' : ''} remaining`;\n  }\n};","map":{"version":3,"names":["loadQuestionsData","console","log","response","fetch","ok","Error","status","statusText","data","json","Array","isArray","length","totalQuestions","reduce","sum","cat","subcategories","subSum","sub","topics","topicSum","topic","questions","categories","totalSubcategories","totalTopics","error","validateAnswer","answer","trim","isValid","message","shouldShowAttentionCheck","questionCount","analyzeResponseQuality","issues","score","isNoneResponse","isGibberish","text","toLowerCase","nonePatterns","forEach","pattern","test","push","gibberishPatterns","mashingPatterns","words","split","filter","word","wordCount","repeatedWords","Object","entries","count","vaguePhrases","vagueCount","phrase","match","RegExp","positiveIndicators","positiveCount","Math","min","max","isLowQuality","analyzeUserPattern","responses","warnings","suspiciousPattern","noneResponseRate","gibberishResponseRate","fastResponseRate","issueType","noneCount","gibberishCount","fastResponseCount","analysis","timeSpent","toFixed","answers","map","r","uniqueAnswers","Set","size","recentResponses","slice","recentQualityScores","avgRecentQuality","generateAttentionCheck","currentCategory","currentTopic","userInfo","checks","question","options","correctAnswer","type","region","randomCheck","floor","random","correctOption","shuffledOptions","i","j","indexOf","generateQuestionId","categoryIndex","subcategoryIndex","topicIndex","questionIndex","formatTime","seconds","mins","secs","toString","padStart","debounce","func","wait","timeout","args","clearTimeout","setTimeout","apply","getEstimatedTimeRemaining","completedQuestions","averageTimePerQuestion","remainingQuestions","estimatedSeconds","minutes","ceil","hours"],"sources":["C:/Users/sangm/OneDrive - Brock University/CommonsenseForm/client/src/utils/helpers.ts"],"sourcesContent":["import { Category, AttentionCheck } from '../types/index.ts';\r\n\r\nexport const loadQuestionsData = async (): Promise<Category[]> => {\r\n  try {\r\n    console.log('Loading questions from public/questions.json...');\r\n    \r\n    const response = await fetch('/questions.json');\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to load questions: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data: Category[] = await response.json();\r\n    \r\n    // Validate the data structure\r\n    if (!Array.isArray(data) || data.length === 0) {\r\n      throw new Error('Questions data is not in the expected format');\r\n    }\r\n    \r\n    // Calculate totals for logging\r\n    const totalQuestions = data.reduce((sum, cat) => \r\n      sum + cat.subcategories.reduce((subSum, sub) => \r\n        subSum + sub.topics.reduce((topicSum, topic) => topicSum + topic.questions.length, 0), 0), 0);\r\n    \r\n    console.log('Questions loaded successfully:', {\r\n      categories: data.length,\r\n      totalSubcategories: data.reduce((sum, cat) => sum + cat.subcategories.length, 0),\r\n      totalTopics: data.reduce((sum, cat) => \r\n        sum + cat.subcategories.reduce((subSum, sub) => subSum + sub.topics.length, 0), 0),\r\n      totalQuestions\r\n    });\r\n    \r\n    return data;\r\n    \r\n  } catch (error) {\r\n    console.error('Error loading questions data:', error);\r\n    throw new Error('Failed to load questions data');\r\n  }\r\n};\r\n\r\nexport const validateAnswer = (answer: string): { isValid: boolean; message?: string } => {\r\n  if (!answer || answer.trim().length === 0) {\r\n    return { isValid: false, message: 'Please provide an answer' };\r\n  }\r\n  \r\n  if (answer.trim().length < 4) {\r\n    return { isValid: false, message: 'Please provide a more detailed answer (at least 4 characters)' };\r\n  }\r\n  \r\n  if (answer.length > 5000) {\r\n    return { isValid: false, message: 'Answer is too long (maximum 5000 characters)' };\r\n  }\r\n  \r\n  return { isValid: true };\r\n};\r\n\r\nexport const shouldShowAttentionCheck = (questionCount: number): boolean => {\r\n  return questionCount > 0 && questionCount % 15 === 0;\r\n};\r\n\r\n// Comprehensive quality analysis\r\nexport const analyzeResponseQuality = (answer: string): {\r\n  isLowQuality: boolean;\r\n  issues: string[];\r\n  score: number;\r\n  isNoneResponse: boolean;\r\n  isGibberish: boolean;\r\n} => {\r\n  const issues: string[] = [];\r\n  let score = 100;\r\n  let isNoneResponse = false;\r\n  let isGibberish = false;\r\n\r\n  const text = answer.toLowerCase().trim();\r\n  \r\n  // Check for \"none\" type responses\r\n  const nonePatterns = [\r\n    /^(none|n\\/a|na|nothing|no|idk|i don't know|dk|dunno)$/i,\r\n    /^(none that i know|nothing that i know|no idea|not sure|dont know|don't know)$/i,\r\n    /^(same|similar|normal|usual|regular|typical|standard|common)$/i,\r\n    /^(not applicable|not available|no information|no data)$/i,\r\n  ];\r\n\r\n  nonePatterns.forEach(pattern => {\r\n    if (pattern.test(text)) {\r\n      isNoneResponse = true;\r\n      issues.push('Generic \"none\" or non-informative response');\r\n      score -= 40;\r\n    }\r\n  });\r\n\r\n  // Check for gibberish patterns\r\n  const gibberishPatterns = [\r\n    /^[bcdfghjklmnpqrstvwxyz]{6,}$/i, // Too many consonants\r\n    /^[aeiou]{6,}$/i, // Too many vowels\r\n    /(.{3,})\\1{2,}/, // Repeated patterns (abcabc)\r\n    /^[^a-z\\s]*$/i, // No letters at all\r\n    /^[a-z]{8,}$/i, // Long strings without spaces\r\n  ];\r\n\r\n  // Keyboard mashing patterns\r\n  const mashingPatterns = [\r\n    /qwerty|asdf|zxcv|hjkl|yuiop/i,\r\n    /abcd|1234|test|xxx|yyy|zzz/i,\r\n    /(.)\\1{4,}/, // Same character repeated 5+ times\r\n  ];\r\n\r\n  gibberishPatterns.forEach(pattern => {\r\n    if (pattern.test(text)) {\r\n      isGibberish = true;\r\n      issues.push('Appears to be random characters or gibberish');\r\n      score -= 60;\r\n    }\r\n  });\r\n\r\n  mashingPatterns.forEach(pattern => {\r\n    if (pattern.test(text)) {\r\n      isGibberish = true;\r\n      issues.push('Keyboard mashing or test input detected');\r\n      score -= 50;\r\n    }\r\n  });\r\n\r\n  // Check for excessive repetition of words\r\n  const words = text.split(/\\s+/).filter(word => word.length > 2);\r\n  const wordCount = {};\r\n  words.forEach(word => {\r\n    wordCount[word] = (wordCount[word] || 0) + 1;\r\n  });\r\n\r\n  const repeatedWords = Object.entries(wordCount).filter(([word, count]) => (count as number) > 3);\r\n  if (repeatedWords.length > 0) {\r\n    issues.push('Excessive word repetition');\r\n    score -= 30;\r\n  }\r\n\r\n  // Check for lack of specificity\r\n  const vaguePhrases = ['something', 'things', 'stuff', 'anything', 'everything'];\r\n  const vagueCount = vaguePhrases.reduce((count, phrase) => \r\n    count + (text.match(new RegExp(`\\\\b${phrase}\\\\b`, 'g')) || []).length, 0\r\n  );\r\n  \r\n  if (vagueCount > 3) {\r\n    issues.push('Response lacks specific details');\r\n    score -= 15;\r\n  }\r\n\r\n  // Positive indicators\r\n  const positiveIndicators = [\r\n    /\\b(example|for instance|specifically|traditionally|commonly|usually|typically)\\b/i,\r\n    /\\b(in my region|in our area|locally|here we|we usually|in our culture)\\b/i,\r\n    /\\b(such as|like|including|consists of|involves|includes)\\b/i,\r\n  ];\r\n\r\n  let positiveCount = 0;\r\n  positiveIndicators.forEach(pattern => {\r\n    if (pattern.test(text)) positiveCount++;\r\n  });\r\n\r\n  if (positiveCount > 0) {\r\n    score += Math.min(positiveCount * 8, 20);\r\n  }\r\n\r\n  score = Math.max(0, Math.min(100, score));\r\n  \r\n  return {\r\n    isLowQuality: score < 30,\r\n    issues,\r\n    score,\r\n    isNoneResponse,\r\n    isGibberish\r\n  };\r\n};\r\n\r\n// Comprehensive pattern analysis\r\nexport const analyzeUserPattern = (responses: Array<{answer: string, timeSpent: number}>): {\r\n  suspiciousPattern: boolean;\r\n  warnings: string[];\r\n  noneResponseRate: number;\r\n  gibberishResponseRate: number;\r\n  fastResponseRate: number;\r\n  issueType: 'none' | 'gibberish' | 'speed' | 'repetition' | 'quality' | 'multiple' | null;\r\n} => {\r\n  const warnings: string[] = [];\r\n  let suspiciousPattern = false;\r\n\r\n  if (responses.length < 5) {\r\n    return { \r\n      suspiciousPattern, \r\n      warnings, \r\n      noneResponseRate: 0,\r\n      gibberishResponseRate: 0,\r\n      fastResponseRate: 0,\r\n      issueType: null\r\n    };\r\n  }\r\n\r\n  // Analyze response patterns\r\n  let noneCount = 0;\r\n  let gibberishCount = 0;\r\n  let fastResponseCount = 0;\r\n\r\n  responses.forEach(response => {\r\n    const analysis = analyzeResponseQuality(response.answer);\r\n    \r\n    if (analysis.isNoneResponse) noneCount++;\r\n    if (analysis.isGibberish) gibberishCount++;\r\n    if (response.timeSpent < 8) fastResponseCount++;\r\n  });\r\n\r\n  const noneResponseRate = (noneCount / responses.length) * 100;\r\n  const gibberishResponseRate = (gibberishCount / responses.length) * 100;\r\n  const fastResponseRate = (fastResponseCount / responses.length) * 100;\r\n\r\n  let issueType: 'none' | 'gibberish' | 'speed' | 'repetition' | 'quality' | 'multiple' | null = null;\r\n\r\n  // Check for problematic patterns (30% threshold for all)\r\n  if (noneResponseRate >= 30) {\r\n    warnings.push(`High rate of \"none\" responses (${noneResponseRate.toFixed(1)}%)`);\r\n    suspiciousPattern = true;\r\n    issueType = 'none';\r\n  }\r\n\r\n  if (gibberishResponseRate >= 30) {\r\n    warnings.push(`High rate of gibberish responses (${gibberishResponseRate.toFixed(1)}%)`);\r\n    suspiciousPattern = true;\r\n    issueType = issueType ? 'multiple' : 'gibberish';\r\n  }\r\n\r\n  if (fastResponseRate >= 30) {\r\n    warnings.push(`High rate of very fast responses (${fastResponseRate.toFixed(1)}%)`);\r\n    suspiciousPattern = true;\r\n    issueType = issueType ? 'multiple' : 'speed';\r\n  }\r\n\r\n  // Check for similar responses\r\n  const answers = responses.map(r => r.answer.toLowerCase().trim());\r\n  const uniqueAnswers = new Set(answers);\r\n  if (uniqueAnswers.size < answers.length * 0.6) {\r\n    warnings.push('Many similar or identical responses');\r\n    suspiciousPattern = true;\r\n    issueType = issueType ? 'multiple' : 'repetition';\r\n  }\r\n\r\n  // Check for overall quality decline\r\n  const recentResponses = responses.slice(-5);\r\n  const recentQualityScores = recentResponses.map(r => analyzeResponseQuality(r.answer).score);\r\n  const avgRecentQuality = recentQualityScores.reduce((sum, score) => sum + score, 0) / recentQualityScores.length;\r\n  \r\n  if (avgRecentQuality < 25) {\r\n    warnings.push('Overall response quality is very low');\r\n    suspiciousPattern = true;\r\n    issueType = issueType ? 'multiple' : 'quality';\r\n  }\r\n\r\n  return { \r\n    suspiciousPattern, \r\n    warnings, \r\n    noneResponseRate,\r\n    gibberishResponseRate,\r\n    fastResponseRate,\r\n    issueType\r\n  };\r\n};\r\n\r\n// Enhanced attention check questions\r\nexport const generateAttentionCheck = (\r\n  currentCategory: string,\r\n  currentTopic: string,\r\n  userInfo?: { region: string; age: number }\r\n): AttentionCheck => {\r\n  const checks = [\r\n    {\r\n      question: `You are currently answering questions about \"${currentCategory}\". Which category are you working on?`,\r\n      options: [currentCategory, 'Food and Cuisine', 'Religious Practices', 'Economic Activities'],\r\n      correctAnswer: 0,\r\n      type: 'context'\r\n    },\r\n    {\r\n      question: `Within ${currentCategory}, you're focusing on \"${currentTopic}\". What is your current topic?`,\r\n      options: [currentTopic, 'Traditional Ceremonies', 'Seasonal Celebrations', 'Community Gatherings'],\r\n      correctAnswer: 0,\r\n      type: 'context'\r\n    },\r\n    {\r\n      question: 'What is the main focus of this cultural survey?',\r\n      options: [\r\n        'Understanding cultural practices and traditions in different regions of India',\r\n        'Collecting political opinions about government policies',\r\n        'Reviewing consumer products and services',\r\n        'Gathering medical and health information'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'comprehension'\r\n    },\r\n    {\r\n      question: 'When answering questions, you should base your responses on:',\r\n      options: [\r\n        'Your personal knowledge and experience of cultural practices in your region',\r\n        'What you think researchers want to hear',\r\n        'Random guesses or made-up information',\r\n        'Practices from other countries or regions you\\'ve seen in movies'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'instruction'\r\n    },\r\n    {\r\n      question: 'What should you do if you encounter a question about a practice you\\'re not familiar with?',\r\n      options: [\r\n        'Explain what you do know or indicate that the practice is uncommon in your area',\r\n        'Just write \"none\" or \"don\\'t know\"',\r\n        'Copy your answer from a previous question',\r\n        'Make up a detailed but false answer'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'instruction'\r\n    },\r\n    {\r\n      question: 'If a cultural practice is described as \"cultural commonsense,\" it means:',\r\n      options: [\r\n        'It is widely shared and considered natural within a cultural group',\r\n        'It is a rare or unusual practice',\r\n        'It comes from foreign cultural influence',\r\n        'It is a personal individual preference'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'definition'\r\n    },\r\n    {\r\n      question: 'Which of these would be the BEST type of answer for cultural questions?',\r\n      options: [\r\n        'Detailed explanations with specific examples from your region',\r\n        'One-word answers like \"yes\" or \"no\"',\r\n        'Identical responses copied for every question',\r\n        'Random letters and symbols'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'instruction'\r\n    },\r\n    {\r\n      question: 'This survey is about cultural practices in which country?',\r\n      options: ['India', 'China', 'United States', 'United Kingdom'],\r\n      correctAnswer: 0,\r\n      type: 'basic'\r\n    },\r\n    {\r\n      question: 'How many regions of India are you asked to choose from in this survey?',\r\n      options: [\r\n        'Five regions (North, South, East, West, Central)',\r\n        'Three regions',\r\n        'Ten regions',\r\n        'Two regions'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'basic'\r\n    },\r\n    {\r\n      question: 'According to the survey instructions, what should you NOT do when answering questions?',\r\n      options: [\r\n        'Provide random, meaningless responses or keyboard mashing',\r\n        'Share your genuine knowledge about cultural practices',\r\n        'Give specific examples when possible',\r\n        'Explain regional variations you\\'re aware of'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'instruction'\r\n    }\r\n  ];\r\n\r\n  // Add personal verification if userInfo available\r\n  if (userInfo) {\r\n    checks.push({\r\n      question: `You indicated that you are from ${userInfo.region} India. Which region did you select?`,\r\n      options: [\r\n        `${userInfo.region} India`,\r\n        userInfo.region === 'North' ? 'South India' : 'North India',\r\n        userInfo.region === 'East' ? 'West India' : 'East India',\r\n        'I did not specify a region'\r\n      ],\r\n      correctAnswer: 0,\r\n      type: 'personal'\r\n    });\r\n  }\r\n  \r\n  // Select random check and shuffle options\r\n  const randomCheck = checks[Math.floor(Math.random() * checks.length)];\r\n  const correctOption = randomCheck.options[randomCheck.correctAnswer];\r\n  const shuffledOptions = [...randomCheck.options];\r\n  \r\n  for (let i = shuffledOptions.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffledOptions[i], shuffledOptions[j]] = [shuffledOptions[j], shuffledOptions[i]];\r\n  }\r\n  \r\n  return {\r\n    question: randomCheck.question,\r\n    options: shuffledOptions,\r\n    correctAnswer: shuffledOptions.indexOf(correctOption),\r\n    currentTopic,\r\n    currentCategory,\r\n    type: randomCheck.type\r\n  };\r\n};\r\n\r\n// Utility functions\r\nexport const generateQuestionId = (\r\n  categoryIndex: number,\r\n  subcategoryIndex: number,\r\n  topicIndex: number,\r\n  questionIndex: number\r\n): string => {\r\n  return `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\r\n};\r\n\r\nexport const formatTime = (seconds: number): string => {\r\n  const mins = Math.floor(seconds / 60);\r\n  const secs = seconds % 60;\r\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\r\n};\r\n\r\nexport const debounce = <T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait: number\r\n): ((...args: Parameters<T>) => void) => {\r\n  let timeout: ReturnType<typeof setTimeout>;\r\n  \r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func.apply(null, args), wait);\r\n  };\r\n};\r\n\r\nexport const getEstimatedTimeRemaining = (\r\n  totalQuestions: number,\r\n  completedQuestions: number,\r\n  averageTimePerQuestion: number = 120\r\n): string => {\r\n  const remainingQuestions = totalQuestions - completedQuestions;\r\n  const estimatedSeconds = remainingQuestions * averageTimePerQuestion;\r\n  \r\n  if (estimatedSeconds < 3600) {\r\n    const minutes = Math.ceil(estimatedSeconds / 60);\r\n    return `~${minutes} minute${minutes !== 1 ? 's' : ''} remaining`;\r\n  } else {\r\n    const hours = Math.ceil(estimatedSeconds / 3600);\r\n    return `~${hours} hour${hours !== 1 ? 's' : ''} remaining`;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}