{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sangm\\\\OneDrive - Brock University\\\\CommonsenseForm\\\\client\\\\src\\\\context\\\\FormContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useCallback } from 'react';\nimport { loadQuestionsData } from '../utils/helpers.ts';\nimport * as api from '../services/api.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  sessionId: null,\n  userInfo: null,\n  currentPosition: {\n    categoryIndex: 0,\n    subcategoryIndex: 0,\n    topicIndex: 0,\n    questionIndex: 0\n  },\n  responses: new Map(),\n  progress: {\n    currentCategory: 0,\n    currentSubcategory: 0,\n    currentTopic: 0,\n    currentQuestion: 0,\n    completedQuestions: 0,\n    totalQuestions: 610,\n    // Updated to match your data\n    completedTopics: [],\n    attentionChecksPassed: 0,\n    attentionChecksFailed: 0\n  },\n  isLoading: false,\n  error: null,\n  questionsData: [],\n  startTime: 0,\n  lastSaveTime: 0,\n  isCompleted: false\n};\nfunction formReducer(state, action) {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SET_SESSION_ID':\n      return {\n        ...state,\n        sessionId: action.payload\n      };\n    case 'SET_USER_INFO':\n      return {\n        ...state,\n        userInfo: action.payload\n      };\n    case 'SET_QUESTIONS_DATA':\n      return {\n        ...state,\n        questionsData: action.payload\n      };\n    case 'SET_CURRENT_POSITION':\n      return {\n        ...state,\n        currentPosition: action.payload\n      };\n    case 'ADD_RESPONSE':\n      const newResponses = new Map(state.responses);\n      newResponses.set(action.payload.questionId, action.payload);\n      return {\n        ...state,\n        responses: newResponses\n      };\n    case 'UPDATE_PROGRESS':\n      return {\n        ...state,\n        progress: {\n          ...state.progress,\n          ...action.payload\n        }\n      };\n    case 'SET_RESPONSES':\n      const responseMap = new Map();\n      action.payload.forEach(response => {\n        responseMap.set(response.questionId, response);\n      });\n      return {\n        ...state,\n        responses: responseMap\n      };\n    case 'SET_START_TIME':\n      return {\n        ...state,\n        startTime: action.payload\n      };\n    case 'SET_LAST_SAVE_TIME':\n      return {\n        ...state,\n        lastSaveTime: action.payload\n      };\n    case 'SET_COMPLETED':\n      return {\n        ...state,\n        isCompleted: action.payload\n      };\n    case 'RESET_FORM':\n      return initialState;\n    default:\n      return state;\n  }\n}\n\n// Add this to the FormContextType interface (around line 80)\n\nconst FormContext = /*#__PURE__*/createContext(undefined);\nexport function FormProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(formReducer, initialState);\n\n  // Load questions data only once on mount\n  // In the FormProvider component, update the useEffect that loads questions:\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: true\n        });\n        dispatch({\n          type: 'SET_ERROR',\n          payload: null\n        });\n        console.log('FormContext: Loading questions data...');\n        const data = await loadQuestionsData();\n        console.log('FormContext: Questions loaded:', data.length, 'categories');\n        dispatch({\n          type: 'SET_QUESTIONS_DATA',\n          payload: data\n        });\n\n        // Calculate total questions\n        const getTotalQuestions = questionsData => {\n          return questionsData.reduce((total, category) => {\n            return total + category.subcategories.reduce((subTotal, subcategory) => {\n              return subTotal + subcategory.topics.reduce((topicTotal, topic) => {\n                return topicTotal + topic.questions.length;\n              }, 0);\n            }, 0);\n          }, 0);\n        };\n        const totalQuestions = getTotalQuestions(data);\n        console.log('FormContext: Total questions calculated:', totalQuestions);\n        dispatch({\n          type: 'UPDATE_PROGRESS',\n          payload: {\n            totalQuestions\n          }\n        });\n      } catch (error) {\n        console.error('FormContext: Error loading questions:', error);\n        dispatch({\n          type: 'SET_ERROR',\n          payload: 'Failed to load questions data. Please refresh the page.'\n        });\n      } finally {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }\n    };\n    loadData();\n  }, []); // Empty dependency array - only run once\n\n  const createUserSession = useCallback(async userInfo => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const response = await api.createUser(userInfo);\n      dispatch({\n        type: 'SET_SESSION_ID',\n        payload: response.sessionId\n      });\n      dispatch({\n        type: 'SET_USER_INFO',\n        payload: userInfo\n      });\n      dispatch({\n        type: 'SET_START_TIME',\n        payload: Date.now()\n      });\n\n      // Store session ID in localStorage for recovery\n      localStorage.setItem('culturalSurveySessionId', response.sessionId);\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to create user session'\n      });\n      throw error;\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  }, []);\n  const loadUserSession = useCallback(async sessionId => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const user = await api.getUser(sessionId);\n      dispatch({\n        type: 'SET_SESSION_ID',\n        payload: sessionId\n      });\n      dispatch({\n        type: 'SET_USER_INFO',\n        payload: user.userInfo\n      });\n      dispatch({\n        type: 'UPDATE_PROGRESS',\n        payload: user.progress\n      });\n      dispatch({\n        type: 'SET_COMPLETED',\n        payload: user.isCompleted\n      });\n\n      // Load responses\n      const responses = await api.getUserResponses(sessionId);\n      dispatch({\n        type: 'SET_RESPONSES',\n        payload: responses\n      });\n\n      // FIXED: Set current position from user data, not from responses\n      // Find the furthest question answered\n      let furthestPosition = {\n        categoryIndex: 0,\n        subcategoryIndex: 0,\n        topicIndex: 0,\n        questionIndex: 0\n      };\n      if (responses.length > 0) {\n        // Find the last answered question\n        const sortedResponses = responses.sort((a, b) => {\n          if (a.categoryIndex !== b.categoryIndex) return b.categoryIndex - a.categoryIndex;\n          if (a.subcategoryIndex !== b.subcategoryIndex) return b.subcategoryIndex - a.subcategoryIndex;\n          if (a.topicIndex !== b.topicIndex) return b.topicIndex - a.topicIndex;\n          return b.questionIndex - a.questionIndex;\n        });\n        const lastResponse = sortedResponses[0];\n\n        // Set position to the next question after the last answered\n        furthestPosition = {\n          categoryIndex: lastResponse.categoryIndex,\n          subcategoryIndex: lastResponse.subcategoryIndex,\n          topicIndex: lastResponse.topicIndex,\n          questionIndex: lastResponse.questionIndex + 1\n        };\n\n        // If we're at the end of a topic/subcategory/category, move to next\n        // This will be handled by navigation logic\n      }\n      dispatch({\n        type: 'SET_CURRENT_POSITION',\n        payload: furthestPosition\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to load user session'\n      });\n      throw error;\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  }, []);\n  const resetSession = useCallback(() => {\n    localStorage.removeItem('culturalSurveySessionId');\n    dispatch({\n      type: 'RESET_FORM'\n    });\n  }, []);\n  const saveResponse = useCallback(async response => {\n    try {\n      console.log('FormContext: Saving response:', response);\n      await api.saveResponse(response);\n      dispatch({\n        type: 'ADD_RESPONSE',\n        payload: response\n      });\n      dispatch({\n        type: 'SET_LAST_SAVE_TIME',\n        payload: Date.now()\n      });\n\n      // Update progress - but don't increment if we're updating an existing response\n      const isNewResponse = !state.responses.has(response.questionId);\n      if (isNewResponse) {\n        const completedQuestions = state.progress.completedQuestions + 1;\n        dispatch({\n          type: 'UPDATE_PROGRESS',\n          payload: {\n            completedQuestions\n          }\n        });\n      }\n    } catch (error) {\n      console.error('FormContext: Error saving response:', error);\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to save response'\n      });\n      throw error;\n    }\n  }, [state.responses, state.progress.completedQuestions]);\n  const navigateToPosition = useCallback(async (categoryIndex, subcategoryIndex, topicIndex, questionIndex) => {\n    try {\n      // Set the new position\n      dispatch({\n        type: 'SET_CURRENT_POSITION',\n        payload: {\n          categoryIndex,\n          subcategoryIndex,\n          topicIndex,\n          questionIndex\n        }\n      });\n\n      // Save position to database\n      if (state.sessionId) {\n        await api.updateUserProgress(state.sessionId, {\n          currentCategory: categoryIndex,\n          currentSubcategory: subcategoryIndex,\n          currentTopic: topicIndex,\n          currentQuestion: questionIndex\n        });\n      }\n    } catch (error) {\n      console.error('Failed to navigate to position:', error);\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to navigate to the selected question'\n      });\n    }\n  }, [state.sessionId]);\n  const getCurrentQuestionData = useCallback(() => {\n    const {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex,\n      questionIndex\n    } = state.currentPosition;\n    if (!state.questionsData[categoryIndex]) return null;\n    const category = state.questionsData[categoryIndex];\n    const subcategory = category.subcategories[subcategoryIndex];\n    const topic = subcategory === null || subcategory === void 0 ? void 0 : subcategory.topics[topicIndex];\n    const question = topic === null || topic === void 0 ? void 0 : topic.questions[questionIndex];\n    if (!question) return null;\n    return {\n      category: category.category,\n      subcategory: subcategory.subcategory,\n      topic: topic.topic,\n      question,\n      questionId: `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`\n    };\n  }, [state.currentPosition, state.questionsData]);\n  const getCurrentQuestion = useCallback(() => {\n    const data = getCurrentQuestionData();\n    return (data === null || data === void 0 ? void 0 : data.question) || null;\n  }, [getCurrentQuestionData]);\n  const navigateToNext = useCallback(async () => {\n    const {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex,\n      questionIndex\n    } = state.currentPosition;\n    const category = state.questionsData[categoryIndex];\n    if (!category) return;\n    const subcategory = category.subcategories[subcategoryIndex];\n    const topic = subcategory === null || subcategory === void 0 ? void 0 : subcategory.topics[topicIndex];\n    if (!topic) return;\n    let newPosition = {\n      ...state.currentPosition\n    };\n\n    // Move to next question\n    if (questionIndex < topic.questions.length - 1) {\n      newPosition.questionIndex = questionIndex + 1;\n    }\n    // Move to next topic\n    else if (topicIndex < subcategory.topics.length - 1) {\n      newPosition.topicIndex = topicIndex + 1;\n      newPosition.questionIndex = 0;\n    }\n    // Move to next subcategory\n    else if (subcategoryIndex < category.subcategories.length - 1) {\n      newPosition.subcategoryIndex = subcategoryIndex + 1;\n      newPosition.topicIndex = 0;\n      newPosition.questionIndex = 0;\n    }\n    // Move to next category\n    else if (categoryIndex < state.questionsData.length - 1) {\n      newPosition.categoryIndex = categoryIndex + 1;\n      newPosition.subcategoryIndex = 0;\n      newPosition.topicIndex = 0;\n      newPosition.questionIndex = 0;\n    }\n    // Survey completed\n    else {\n      dispatch({\n        type: 'SET_COMPLETED',\n        payload: true\n      });\n      return;\n    }\n    dispatch({\n      type: 'SET_CURRENT_POSITION',\n      payload: newPosition\n    });\n\n    // Save position to database\n    if (state.sessionId) {\n      try {\n        await api.updateUserProgress(state.sessionId, {\n          currentCategory: newPosition.categoryIndex,\n          currentSubcategory: newPosition.subcategoryIndex,\n          currentTopic: newPosition.topicIndex,\n          currentQuestion: newPosition.questionIndex\n        });\n      } catch (error) {\n        console.error('Failed to save progress:', error);\n      }\n    }\n  }, [state.currentPosition, state.questionsData, state.sessionId]);\n  const navigateToPrevious = useCallback(async () => {\n    const {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex,\n      questionIndex\n    } = state.currentPosition;\n    let newPosition = {\n      ...state.currentPosition\n    };\n\n    // Move to previous question\n    if (questionIndex > 0) {\n      newPosition.questionIndex = questionIndex - 1;\n    }\n    // Move to previous topic\n    else if (topicIndex > 0) {\n      const prevTopic = state.questionsData[categoryIndex].subcategories[subcategoryIndex].topics[topicIndex - 1];\n      newPosition.topicIndex = topicIndex - 1;\n      newPosition.questionIndex = prevTopic.questions.length - 1;\n    }\n    // Move to previous subcategory\n    else if (subcategoryIndex > 0) {\n      const prevSubcategory = state.questionsData[categoryIndex].subcategories[subcategoryIndex - 1];\n      const lastTopic = prevSubcategory.topics[prevSubcategory.topics.length - 1];\n      newPosition.subcategoryIndex = subcategoryIndex - 1;\n      newPosition.topicIndex = prevSubcategory.topics.length - 1;\n      newPosition.questionIndex = lastTopic.questions.length - 1;\n    }\n    // Move to previous category\n    else if (categoryIndex > 0) {\n      const prevCategory = state.questionsData[categoryIndex - 1];\n      const lastSubcategory = prevCategory.subcategories[prevCategory.subcategories.length - 1];\n      const lastTopic = lastSubcategory.topics[lastSubcategory.topics.length - 1];\n      newPosition.categoryIndex = categoryIndex - 1;\n      newPosition.subcategoryIndex = prevCategory.subcategories.length - 1;\n      newPosition.topicIndex = lastSubcategory.topics.length - 1;\n      newPosition.questionIndex = lastTopic.questions.length - 1;\n    }\n    dispatch({\n      type: 'SET_CURRENT_POSITION',\n      payload: newPosition\n    });\n\n    // Save position to database\n    if (state.sessionId) {\n      try {\n        await api.updateUserProgress(state.sessionId, {\n          currentCategory: newPosition.categoryIndex,\n          currentSubcategory: newPosition.subcategoryIndex,\n          currentTopic: newPosition.topicIndex,\n          currentQuestion: newPosition.questionIndex\n        });\n      } catch (error) {\n        console.error('Failed to save progress:', error);\n      }\n    }\n  }, [state.currentPosition, state.questionsData, state.sessionId]);\n  const calculateProgress = useCallback(() => {\n    const totalQuestions = state.progress.totalQuestions;\n    const completedQuestions = state.responses.size;\n    return totalQuestions > 0 ? completedQuestions / totalQuestions * 100 : 0;\n  }, [state.progress.totalQuestions, state.responses.size]);\n  const getTotalQuestionsInCurrentTopic = useCallback(() => {\n    var _state$questionsData$, _state$questionsData$2;\n    const {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex\n    } = state.currentPosition;\n    const topic = (_state$questionsData$ = state.questionsData[categoryIndex]) === null || _state$questionsData$ === void 0 ? void 0 : (_state$questionsData$2 = _state$questionsData$.subcategories[subcategoryIndex]) === null || _state$questionsData$2 === void 0 ? void 0 : _state$questionsData$2.topics[topicIndex];\n    return (topic === null || topic === void 0 ? void 0 : topic.questions.length) || 0;\n  }, [state.currentPosition, state.questionsData]);\n  const getCompletedQuestionsInCurrentTopic = useCallback(() => {\n    var _state$questionsData$3, _state$questionsData$4;\n    const {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex\n    } = state.currentPosition;\n    let completed = 0;\n    const topic = (_state$questionsData$3 = state.questionsData[categoryIndex]) === null || _state$questionsData$3 === void 0 ? void 0 : (_state$questionsData$4 = _state$questionsData$3.subcategories[subcategoryIndex]) === null || _state$questionsData$4 === void 0 ? void 0 : _state$questionsData$4.topics[topicIndex];\n    if (!topic) return 0;\n    topic.questions.forEach((_, questionIndex) => {\n      const questionId = `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\n      if (state.responses.has(questionId)) {\n        completed++;\n      }\n    });\n    return completed;\n  }, [state.currentPosition, state.questionsData, state.responses]);\n  const value = {\n    state,\n    dispatch,\n    createUserSession,\n    saveResponse,\n    navigateToNext,\n    navigateToPrevious,\n    calculateProgress,\n    getCurrentQuestion,\n    getCurrentQuestionData,\n    getTotalQuestionsInCurrentTopic,\n    getCompletedQuestionsInCurrentTopic,\n    loadUserSession,\n    navigateToPosition,\n    resetSession // Add this line\n  };\n  return /*#__PURE__*/_jsxDEV(FormContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 470,\n    columnNumber: 5\n  }, this);\n}\n_s(FormProvider, \"3S6BLHO7hkpX/2P1jUKp0+MUBPQ=\");\n_c = FormProvider;\nexport function useForm() {\n  _s2();\n  const context = useContext(FormContext);\n  if (context === undefined) {\n    throw new Error('useForm must be used within a FormProvider');\n  }\n  return context;\n}\n_s2(useForm, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"FormProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useCallback","loadQuestionsData","api","jsxDEV","_jsxDEV","initialState","sessionId","userInfo","currentPosition","categoryIndex","subcategoryIndex","topicIndex","questionIndex","responses","Map","progress","currentCategory","currentSubcategory","currentTopic","currentQuestion","completedQuestions","totalQuestions","completedTopics","attentionChecksPassed","attentionChecksFailed","isLoading","error","questionsData","startTime","lastSaveTime","isCompleted","formReducer","state","action","type","payload","newResponses","set","questionId","responseMap","forEach","response","FormContext","undefined","FormProvider","children","_s","dispatch","loadData","console","log","data","length","getTotalQuestions","reduce","total","category","subcategories","subTotal","subcategory","topics","topicTotal","topic","questions","createUserSession","createUser","Date","now","localStorage","setItem","loadUserSession","user","getUser","getUserResponses","furthestPosition","sortedResponses","sort","a","b","lastResponse","resetSession","removeItem","saveResponse","isNewResponse","has","navigateToPosition","updateUserProgress","getCurrentQuestionData","question","getCurrentQuestion","navigateToNext","newPosition","navigateToPrevious","prevTopic","prevSubcategory","lastTopic","prevCategory","lastSubcategory","calculateProgress","size","getTotalQuestionsInCurrentTopic","_state$questionsData$","_state$questionsData$2","getCompletedQuestionsInCurrentTopic","_state$questionsData$3","_state$questionsData$4","completed","_","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useForm","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/sangm/OneDrive - Brock University/CommonsenseForm/client/src/context/FormContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode, useCallback } from 'react';\r\nimport { FormState, UserInfo, QuestionResponse, Category, Progress } from '../types/index.ts';\r\nimport { loadQuestionsData } from '../utils/helpers.ts';\r\nimport * as api from '../services/api.ts';\r\n\r\ntype FormAction =\r\n  | { type: 'SET_LOADING'; payload: boolean }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'SET_SESSION_ID'; payload: string }\r\n  | { type: 'SET_USER_INFO'; payload: UserInfo }\r\n  | { type: 'SET_QUESTIONS_DATA'; payload: Category[] }\r\n  | { type: 'SET_CURRENT_POSITION'; payload: { categoryIndex: number; subcategoryIndex: number; topicIndex: number; questionIndex: number } }\r\n  | { type: 'ADD_RESPONSE'; payload: QuestionResponse }\r\n  | { type: 'UPDATE_PROGRESS'; payload: Partial<Progress> }\r\n  | { type: 'SET_RESPONSES'; payload: QuestionResponse[] }\r\n  | { type: 'SET_START_TIME'; payload: number }\r\n  | { type: 'SET_LAST_SAVE_TIME'; payload: number }\r\n  | { type: 'SET_COMPLETED'; payload: boolean }\r\n  | { type: 'RESET_FORM' };\r\n\r\nconst initialState: FormState = {\r\n  sessionId: null,\r\n  userInfo: null,\r\n  currentPosition: {\r\n    categoryIndex: 0,\r\n    subcategoryIndex: 0,\r\n    topicIndex: 0,\r\n    questionIndex: 0\r\n  },\r\n  responses: new Map(),\r\n  progress: {\r\n    currentCategory: 0,\r\n    currentSubcategory: 0,\r\n    currentTopic: 0,\r\n    currentQuestion: 0,\r\n    completedQuestions: 0,\r\n    totalQuestions: 610, // Updated to match your data\r\n    completedTopics: [],\r\n    attentionChecksPassed: 0,\r\n    attentionChecksFailed: 0\r\n  },\r\n  isLoading: false,\r\n  error: null,\r\n  questionsData: [],\r\n  startTime: 0,\r\n  lastSaveTime: 0,\r\n  isCompleted: false\r\n};\r\n\r\nfunction formReducer(state: FormState, action: FormAction): FormState {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    case 'SET_SESSION_ID':\r\n      return { ...state, sessionId: action.payload };\r\n    case 'SET_USER_INFO':\r\n      return { ...state, userInfo: action.payload };\r\n    case 'SET_QUESTIONS_DATA':\r\n      return { ...state, questionsData: action.payload };\r\n    case 'SET_CURRENT_POSITION':\r\n      return { ...state, currentPosition: action.payload };\r\n    case 'ADD_RESPONSE':\r\n      const newResponses = new Map(state.responses);\r\n      newResponses.set(action.payload.questionId, action.payload);\r\n      return { ...state, responses: newResponses };\r\n    case 'UPDATE_PROGRESS':\r\n      return { \r\n        ...state, \r\n        progress: { ...state.progress, ...action.payload }\r\n      };\r\n    case 'SET_RESPONSES':\r\n      const responseMap = new Map();\r\n      action.payload.forEach(response => {\r\n        responseMap.set(response.questionId, response);\r\n      });\r\n      return { ...state, responses: responseMap };\r\n    case 'SET_START_TIME':\r\n      return { ...state, startTime: action.payload };\r\n    case 'SET_LAST_SAVE_TIME':\r\n      return { ...state, lastSaveTime: action.payload };\r\n    case 'SET_COMPLETED':\r\n      return { ...state, isCompleted: action.payload };\r\n    case 'RESET_FORM':\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Add this to the FormContextType interface (around line 80)\r\ninterface FormContextType {\r\n  state: FormState;\r\n  dispatch: React.Dispatch<FormAction>;\r\n  createUserSession: (userInfo: UserInfo) => Promise<void>;\r\n  saveResponse: (response: QuestionResponse) => Promise<void>;\r\n  navigateToNext: () => void;\r\n  navigateToPrevious: () => void;\r\n  navigateToPosition: (categoryIndex: number, subcategoryIndex: number, topicIndex: number, questionIndex: number) => Promise<void>; // Add this line\r\n  calculateProgress: () => number;\r\n  getCurrentQuestion: () => string | null;\r\n  getCurrentQuestionData: () => {\r\n    category: string;\r\n    subcategory: string;\r\n    topic: string;\r\n    question: string;\r\n    questionId: string;\r\n  } | null;\r\n  getTotalQuestionsInCurrentTopic: () => number;\r\n  getCompletedQuestionsInCurrentTopic: () => number;\r\n  loadUserSession: (sessionId: string) => Promise<void>;\r\n  resetSession: () => void; // Add this line\r\n}\r\n\r\nconst FormContext = createContext<FormContextType | undefined>(undefined);\r\n\r\nexport function FormProvider({ children }: { children: ReactNode }) {\r\n  const [state, dispatch] = useReducer(formReducer, initialState);\r\n\r\n  // Load questions data only once on mount\r\n  // In the FormProvider component, update the useEffect that loads questions:\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        dispatch({ type: 'SET_LOADING', payload: true });\r\n        dispatch({ type: 'SET_ERROR', payload: null });\r\n        \r\n        console.log('FormContext: Loading questions data...');\r\n        const data = await loadQuestionsData();\r\n        console.log('FormContext: Questions loaded:', data.length, 'categories');\r\n        \r\n        dispatch({ type: 'SET_QUESTIONS_DATA', payload: data });\r\n        \r\n      // Calculate total questions\r\n      const getTotalQuestions = (questionsData: Category[]): number => {\r\n        return questionsData.reduce((total, category) => {\r\n          return total + category.subcategories.reduce((subTotal, subcategory) => {\r\n            return subTotal + subcategory.topics.reduce((topicTotal, topic) => {\r\n              return topicTotal + topic.questions.length;\r\n            }, 0);\r\n          }, 0);\r\n        }, 0);\r\n      };\r\n      const totalQuestions = getTotalQuestions(data);\r\n      console.log('FormContext: Total questions calculated:', totalQuestions);\r\n      dispatch({ type: 'UPDATE_PROGRESS', payload: { totalQuestions } });\r\n        \r\n      } catch (error) {\r\n        console.error('FormContext: Error loading questions:', error);\r\n        dispatch({ type: 'SET_ERROR', payload: 'Failed to load questions data. Please refresh the page.' });\r\n      } finally {\r\n        dispatch({ type: 'SET_LOADING', payload: false });\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, []); // Empty dependency array - only run once\r\n\r\n  const createUserSession = useCallback(async (userInfo: UserInfo) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      const response = await api.createUser(userInfo);\r\n      dispatch({ type: 'SET_SESSION_ID', payload: response.sessionId });\r\n      dispatch({ type: 'SET_USER_INFO', payload: userInfo });\r\n      dispatch({ type: 'SET_START_TIME', payload: Date.now() });\r\n      \r\n      // Store session ID in localStorage for recovery\r\n      localStorage.setItem('culturalSurveySessionId', response.sessionId);\r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to create user session' });\r\n      throw error;\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  }, []);\r\n\r\n  const loadUserSession = useCallback(async (sessionId: string) => {\r\n  try {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    const user = await api.getUser(sessionId);\r\n    dispatch({ type: 'SET_SESSION_ID', payload: sessionId });\r\n    dispatch({ type: 'SET_USER_INFO', payload: user.userInfo });\r\n    dispatch({ type: 'UPDATE_PROGRESS', payload: user.progress });\r\n    dispatch({ type: 'SET_COMPLETED', payload: user.isCompleted });\r\n    \r\n    // Load responses\r\n    const responses = await api.getUserResponses(sessionId);\r\n    dispatch({ type: 'SET_RESPONSES', payload: responses });\r\n    \r\n    // FIXED: Set current position from user data, not from responses\r\n    // Find the furthest question answered\r\n    let furthestPosition = {\r\n      categoryIndex: 0,\r\n      subcategoryIndex: 0,\r\n      topicIndex: 0,\r\n      questionIndex: 0\r\n    };\r\n\r\n    if (responses.length > 0) {\r\n      // Find the last answered question\r\n      const sortedResponses = responses.sort((a, b) => {\r\n        if (a.categoryIndex !== b.categoryIndex) return b.categoryIndex - a.categoryIndex;\r\n        if (a.subcategoryIndex !== b.subcategoryIndex) return b.subcategoryIndex - a.subcategoryIndex;\r\n        if (a.topicIndex !== b.topicIndex) return b.topicIndex - a.topicIndex;\r\n        return b.questionIndex - a.questionIndex;\r\n      });\r\n\r\n      const lastResponse = sortedResponses[0];\r\n      \r\n      // Set position to the next question after the last answered\r\n      furthestPosition = {\r\n        categoryIndex: lastResponse.categoryIndex,\r\n        subcategoryIndex: lastResponse.subcategoryIndex,\r\n        topicIndex: lastResponse.topicIndex,\r\n        questionIndex: lastResponse.questionIndex + 1\r\n      };\r\n\r\n      // If we're at the end of a topic/subcategory/category, move to next\r\n      // This will be handled by navigation logic\r\n    }\r\n\r\n    dispatch({ type: 'SET_CURRENT_POSITION', payload: furthestPosition });\r\n    \r\n  } catch (error) {\r\n    dispatch({ type: 'SET_ERROR', payload: 'Failed to load user session' });\r\n    throw error;\r\n  } finally {\r\n    dispatch({ type: 'SET_LOADING', payload: false });\r\n  }\r\n}, []);\r\n\r\n  const resetSession = useCallback(() => {\r\n    localStorage.removeItem('culturalSurveySessionId');\r\n    dispatch({ type: 'RESET_FORM' });\r\n  }, []);\r\n\r\n\r\n  const saveResponse = useCallback(async (response: QuestionResponse) => {\r\n  try {\r\n    console.log('FormContext: Saving response:', response);\r\n    await api.saveResponse(response);\r\n    dispatch({ type: 'ADD_RESPONSE', payload: response });\r\n    dispatch({ type: 'SET_LAST_SAVE_TIME', payload: Date.now() });\r\n    \r\n    // Update progress - but don't increment if we're updating an existing response\r\n    const isNewResponse = !state.responses.has(response.questionId);\r\n    if (isNewResponse) {\r\n      const completedQuestions = state.progress.completedQuestions + 1;\r\n      dispatch({ type: 'UPDATE_PROGRESS', payload: { completedQuestions } });\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('FormContext: Error saving response:', error);\r\n    dispatch({ type: 'SET_ERROR', payload: 'Failed to save response' });\r\n    throw error;\r\n  }\r\n}, [state.responses, state.progress.completedQuestions]);\r\n\r\nconst navigateToPosition = useCallback(async (categoryIndex: number, subcategoryIndex: number, topicIndex: number, questionIndex: number) => {\r\n  try {\r\n    // Set the new position\r\n    dispatch({ type: 'SET_CURRENT_POSITION', payload: {\r\n      categoryIndex,\r\n      subcategoryIndex,\r\n      topicIndex,\r\n      questionIndex\r\n    }});\r\n\r\n    // Save position to database\r\n    if (state.sessionId) {\r\n      await api.updateUserProgress(state.sessionId, {\r\n        currentCategory: categoryIndex,\r\n        currentSubcategory: subcategoryIndex,\r\n        currentTopic: topicIndex,\r\n        currentQuestion: questionIndex\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to navigate to position:', error);\r\n    dispatch({ type: 'SET_ERROR', payload: 'Failed to navigate to the selected question' });\r\n  }\r\n}, [state.sessionId]);\r\n\r\n  const getCurrentQuestionData = useCallback(() => {\r\n    const { categoryIndex, subcategoryIndex, topicIndex, questionIndex } = state.currentPosition;\r\n    \r\n    if (!state.questionsData[categoryIndex]) return null;\r\n    \r\n    const category = state.questionsData[categoryIndex];\r\n    const subcategory = category.subcategories[subcategoryIndex];\r\n    const topic = subcategory?.topics[topicIndex];\r\n    const question = topic?.questions[questionIndex];\r\n    \r\n    if (!question) return null;\r\n    \r\n    return {\r\n      category: category.category,\r\n      subcategory: subcategory.subcategory,\r\n      topic: topic.topic,\r\n      question,\r\n      questionId: `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`\r\n    };\r\n  }, [state.currentPosition, state.questionsData]);\r\n\r\n  const getCurrentQuestion = useCallback(() => {\r\n    const data = getCurrentQuestionData();\r\n    return data?.question || null;\r\n  }, [getCurrentQuestionData]);\r\n\r\n  const navigateToNext = useCallback(async () => {\r\n  const { categoryIndex, subcategoryIndex, topicIndex, questionIndex } = state.currentPosition;\r\n  const category = state.questionsData[categoryIndex];\r\n  \r\n  if (!category) return;\r\n  \r\n  const subcategory = category.subcategories[subcategoryIndex];\r\n  const topic = subcategory?.topics[topicIndex];\r\n  \r\n  if (!topic) return;\r\n\r\n  let newPosition = { ...state.currentPosition };\r\n\r\n  // Move to next question\r\n  if (questionIndex < topic.questions.length - 1) {\r\n    newPosition.questionIndex = questionIndex + 1;\r\n  }\r\n  // Move to next topic\r\n  else if (topicIndex < subcategory.topics.length - 1) {\r\n    newPosition.topicIndex = topicIndex + 1;\r\n    newPosition.questionIndex = 0;\r\n  }\r\n  // Move to next subcategory\r\n  else if (subcategoryIndex < category.subcategories.length - 1) {\r\n    newPosition.subcategoryIndex = subcategoryIndex + 1;\r\n    newPosition.topicIndex = 0;\r\n    newPosition.questionIndex = 0;\r\n  }\r\n  // Move to next category\r\n  else if (categoryIndex < state.questionsData.length - 1) {\r\n    newPosition.categoryIndex = categoryIndex + 1;\r\n    newPosition.subcategoryIndex = 0;\r\n    newPosition.topicIndex = 0;\r\n    newPosition.questionIndex = 0;\r\n  }\r\n  // Survey completed\r\n  else {\r\n    dispatch({ type: 'SET_COMPLETED', payload: true });\r\n    return;\r\n  }\r\n\r\n  dispatch({ type: 'SET_CURRENT_POSITION', payload: newPosition });\r\n\r\n  // Save position to database\r\n  if (state.sessionId) {\r\n    try {\r\n      await api.updateUserProgress(state.sessionId, {\r\n        currentCategory: newPosition.categoryIndex,\r\n        currentSubcategory: newPosition.subcategoryIndex,\r\n        currentTopic: newPosition.topicIndex,\r\n        currentQuestion: newPosition.questionIndex\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to save progress:', error);\r\n    }\r\n  }\r\n}, [state.currentPosition, state.questionsData, state.sessionId]);\r\n\r\nconst navigateToPrevious = useCallback(async () => {\r\n  const { categoryIndex, subcategoryIndex, topicIndex, questionIndex } = state.currentPosition;\r\n  \r\n  let newPosition = { ...state.currentPosition };\r\n\r\n  // Move to previous question\r\n  if (questionIndex > 0) {\r\n    newPosition.questionIndex = questionIndex - 1;\r\n  }\r\n  // Move to previous topic\r\n  else if (topicIndex > 0) {\r\n    const prevTopic = state.questionsData[categoryIndex].subcategories[subcategoryIndex].topics[topicIndex - 1];\r\n    newPosition.topicIndex = topicIndex - 1;\r\n    newPosition.questionIndex = prevTopic.questions.length - 1;\r\n  }\r\n  // Move to previous subcategory\r\n  else if (subcategoryIndex > 0) {\r\n    const prevSubcategory = state.questionsData[categoryIndex].subcategories[subcategoryIndex - 1];\r\n    const lastTopic = prevSubcategory.topics[prevSubcategory.topics.length - 1];\r\n    newPosition.subcategoryIndex = subcategoryIndex - 1;\r\n    newPosition.topicIndex = prevSubcategory.topics.length - 1;\r\n    newPosition.questionIndex = lastTopic.questions.length - 1;\r\n  }\r\n  // Move to previous category\r\n  else if (categoryIndex > 0) {\r\n    const prevCategory = state.questionsData[categoryIndex - 1];\r\n    const lastSubcategory = prevCategory.subcategories[prevCategory.subcategories.length - 1];\r\n    const lastTopic = lastSubcategory.topics[lastSubcategory.topics.length - 1];\r\n    newPosition.categoryIndex = categoryIndex - 1;\r\n    newPosition.subcategoryIndex = prevCategory.subcategories.length - 1;\r\n    newPosition.topicIndex = lastSubcategory.topics.length - 1;\r\n    newPosition.questionIndex = lastTopic.questions.length - 1;\r\n  }\r\n\r\n  dispatch({ type: 'SET_CURRENT_POSITION', payload: newPosition });\r\n\r\n  // Save position to database\r\n  if (state.sessionId) {\r\n    try {\r\n      await api.updateUserProgress(state.sessionId, {\r\n        currentCategory: newPosition.categoryIndex,\r\n        currentSubcategory: newPosition.subcategoryIndex,\r\n        currentTopic: newPosition.topicIndex,\r\n        currentQuestion: newPosition.questionIndex\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to save progress:', error);\r\n    }\r\n  }\r\n}, [state.currentPosition, state.questionsData, state.sessionId]);\r\n\r\n  \r\n\r\n  const calculateProgress = useCallback(() => {\r\n    const totalQuestions = state.progress.totalQuestions;\r\n    const completedQuestions = state.responses.size;\r\n    return totalQuestions > 0 ? (completedQuestions / totalQuestions) * 100 : 0;\r\n  }, [state.progress.totalQuestions, state.responses.size]);\r\n\r\n  const getTotalQuestionsInCurrentTopic = useCallback(() => {\r\n    const { categoryIndex, subcategoryIndex, topicIndex } = state.currentPosition;\r\n    const topic = state.questionsData[categoryIndex]?.subcategories[subcategoryIndex]?.topics[topicIndex];\r\n    return topic?.questions.length || 0;\r\n  }, [state.currentPosition, state.questionsData]);\r\n\r\n  const getCompletedQuestionsInCurrentTopic = useCallback(() => {\r\n    const { categoryIndex, subcategoryIndex, topicIndex } = state.currentPosition;\r\n    let completed = 0;\r\n    \r\n    const topic = state.questionsData[categoryIndex]?.subcategories[subcategoryIndex]?.topics[topicIndex];\r\n    if (!topic) return 0;\r\n    \r\n    topic.questions.forEach((_, questionIndex) => {\r\n      const questionId = `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\r\n      if (state.responses.has(questionId)) {\r\n        completed++;\r\n      }\r\n    });\r\n    \r\n    return completed;\r\n  }, [state.currentPosition, state.questionsData, state.responses]);\r\n\r\n  const value: FormContextType = {\r\n    state,\r\n    dispatch,\r\n    createUserSession,\r\n    saveResponse,\r\n    navigateToNext,\r\n    navigateToPrevious,\r\n    calculateProgress,\r\n    getCurrentQuestion,\r\n    getCurrentQuestionData,\r\n    getTotalQuestionsInCurrentTopic,\r\n    getCompletedQuestionsInCurrentTopic,\r\n    loadUserSession,\r\n    navigateToPosition,\r\n    resetSession // Add this line\r\n  };\r\n\r\n  return (\r\n    <FormContext.Provider value={value}>\r\n      {children}\r\n    </FormContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useForm() {\r\n  const context = useContext(FormContext);\r\n  if (context === undefined) {\r\n    throw new Error('useForm must be used within a FormProvider');\r\n  }\r\n  return context;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}