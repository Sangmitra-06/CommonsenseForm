{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sangm\\\\OneDrive - Brock University\\\\CommonsenseForm\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { FormProvider, useForm } from './context/FormContext.tsx';\nimport Introduction from './components/Introduction.tsx';\nimport UserInfo from './components/UserInfo.tsx';\nimport QuestionForm from './components/QuestionForm.tsx';\nimport CompletionPage from './components/CompletionPage.tsx';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AppContent() {\n  _s();\n  const {\n    state,\n    createUserSession,\n    loadUserSession\n  } = useForm();\n  const [currentStage, setCurrentStage] = useState('introduction');\n  const [isInitializing, setIsInitializing] = useState(true);\n  const [hasCheckedSession, setHasCheckedSession] = useState(false);\n  const [hasExistingSession, setHasExistingSession] = useState(false);\n  const [existingSessionId, setExistingSessionId] = useState(null);\n\n  // Check for existing session on load\n  useEffect(() => {\n    if (hasCheckedSession) return;\n    const checkExistingSession = async () => {\n      const savedSessionId = localStorage.getItem('culturalSurveySessionId');\n      console.log('Checking for existing session:', savedSessionId);\n      if (savedSessionId) {\n        try {\n          // Just check if the session exists, don't load it yet\n          const response = await fetch(`http://localhost:5000/api/users/${savedSessionId}`);\n          if (response.ok) {\n            const userData = await response.json();\n            console.log('Found existing session:', userData);\n            if (userData.isCompleted) {\n              // If survey is completed, start fresh\n              localStorage.removeItem('culturalSurveySessionId');\n              setHasExistingSession(false);\n            } else {\n              // Valid incomplete session found\n              setHasExistingSession(true);\n              setExistingSessionId(savedSessionId);\n            }\n          } else {\n            // Session doesn't exist on server, remove from localStorage\n            localStorage.removeItem('culturalSurveySessionId');\n            setHasExistingSession(false);\n          }\n        } catch (error) {\n          console.error('Error checking existing session:', error);\n          localStorage.removeItem('culturalSurveySessionId');\n          setHasExistingSession(false);\n        }\n      }\n      setHasCheckedSession(true);\n      setIsInitializing(false);\n    };\n    checkExistingSession();\n  }, [hasCheckedSession]);\n\n  // Update stage based on form state\n  useEffect(() => {\n    if (!hasCheckedSession) return;\n    if (state.isCompleted) {\n      setCurrentStage('completed');\n    } else if (state.sessionId && state.userInfo) {\n      setCurrentStage('questions');\n    }\n  }, [state.isCompleted, state.sessionId, state.userInfo, hasCheckedSession]);\n  const handleStartNewSurvey = () => {\n    // Clear any existing session\n    if (hasExistingSession) {\n      localStorage.removeItem('culturalSurveySessionId');\n      setHasExistingSession(false);\n      setExistingSessionId(null);\n    }\n    setCurrentStage('userInfo');\n  };\n  const handleResumeSurvey = async () => {\n    if (existingSessionId) {\n      try {\n        console.log('Resuming survey with session:', existingSessionId);\n        await loadUserSession(existingSessionId);\n        setCurrentStage('questions');\n      } catch (error) {\n        console.error('Failed to resume session:', error);\n        // If resume fails, start fresh\n        localStorage.removeItem('culturalSurveySessionId');\n        setHasExistingSession(false);\n        setExistingSessionId(null);\n        alert('Unable to resume previous session. Starting fresh.');\n        setCurrentStage('userInfo');\n      }\n    }\n  };\n  const handleUserInfoSubmit = async userInfo => {\n    try {\n      await createUserSession(userInfo);\n      setCurrentStage('questions');\n    } catch (error) {\n      console.error('Failed to create user session:', error);\n    }\n  };\n  if (isInitializing) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-gray-100 flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600\",\n          children: \"Checking for existing survey...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  }\n  if (state.error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-red-50 flex items-center justify-center p-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-md mx-auto bg-white rounded-lg shadow-lg p-6 text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-red-600 text-4xl mb-4\",\n          children: \"\\u26A0\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-red-800 mb-2\",\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-red-600 mb-4\",\n          children: state.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => window.location.reload(),\n          className: \"bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\",\n          children: \"Reload Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  }\n  switch (currentStage) {\n    case 'introduction':\n      return /*#__PURE__*/_jsxDEV(Introduction, {\n        onStartNew: handleStartNewSurvey,\n        onResume: handleResumeSurvey,\n        hasExistingSession: hasExistingSession\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this);\n    case 'userInfo':\n      return /*#__PURE__*/_jsxDEV(UserInfo, {\n        onSubmit: handleUserInfoSubmit,\n        isLoading: state.isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 14\n      }, this);\n    case 'questions':\n      return /*#__PURE__*/_jsxDEV(QuestionForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 14\n      }, this);\n    case 'completed':\n      return /*#__PURE__*/_jsxDEV(CompletionPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 14\n      }, this);\n    default:\n      return /*#__PURE__*/_jsxDEV(Introduction, {\n        onStartNew: handleStartNewSurvey,\n        onResume: handleResumeSurvey,\n        hasExistingSession: hasExistingSession\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this);\n  }\n}\n_s(AppContent, \"2SdIwfLN3kTdMuLZhLdcVEM8D5w=\", false, function () {\n  return [useForm];\n});\n_c = AppContent;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(FormProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(AppContent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","FormProvider","useForm","Introduction","UserInfo","QuestionForm","CompletionPage","jsxDEV","_jsxDEV","AppContent","_s","state","createUserSession","loadUserSession","currentStage","setCurrentStage","isInitializing","setIsInitializing","hasCheckedSession","setHasCheckedSession","hasExistingSession","setHasExistingSession","existingSessionId","setExistingSessionId","checkExistingSession","savedSessionId","localStorage","getItem","console","log","response","fetch","ok","userData","json","isCompleted","removeItem","error","sessionId","userInfo","handleStartNewSurvey","handleResumeSurvey","alert","handleUserInfoSubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","location","reload","onStartNew","onResume","onSubmit","isLoading","_c","App","_c2","$RefreshReg$"],"sources":["C:/Users/sangm/OneDrive - Brock University/CommonsenseForm/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { FormProvider, useForm } from './context/FormContext.tsx';\r\nimport Introduction from './components/Introduction.tsx';\r\nimport UserInfo from './components/UserInfo.tsx';\r\nimport QuestionForm from './components/QuestionForm.tsx';\r\nimport CompletionPage from './components/CompletionPage.tsx';\r\nimport './App.css';\r\n\r\ntype AppStage = 'introduction' | 'userInfo' | 'questions' | 'completed';\r\n\r\nfunction AppContent() {\r\n  const { state, createUserSession, loadUserSession } = useForm();\r\n  const [currentStage, setCurrentStage] = useState<AppStage>('introduction');\r\n  const [isInitializing, setIsInitializing] = useState(true);\r\n  const [hasCheckedSession, setHasCheckedSession] = useState(false);\r\n  const [hasExistingSession, setHasExistingSession] = useState(false);\r\n  const [existingSessionId, setExistingSessionId] = useState<string | null>(null);\r\n\r\n  // Check for existing session on load\r\n  useEffect(() => {\r\n    if (hasCheckedSession) return;\r\n    \r\n    const checkExistingSession = async () => {\r\n      const savedSessionId = localStorage.getItem('culturalSurveySessionId');\r\n      console.log('Checking for existing session:', savedSessionId);\r\n      \r\n      if (savedSessionId) {\r\n        try {\r\n          // Just check if the session exists, don't load it yet\r\n          const response = await fetch(`http://localhost:5000/api/users/${savedSessionId}`);\r\n          if (response.ok) {\r\n            const userData = await response.json();\r\n            console.log('Found existing session:', userData);\r\n            \r\n            if (userData.isCompleted) {\r\n              // If survey is completed, start fresh\r\n              localStorage.removeItem('culturalSurveySessionId');\r\n              setHasExistingSession(false);\r\n            } else {\r\n              // Valid incomplete session found\r\n              setHasExistingSession(true);\r\n              setExistingSessionId(savedSessionId);\r\n            }\r\n          } else {\r\n            // Session doesn't exist on server, remove from localStorage\r\n            localStorage.removeItem('culturalSurveySessionId');\r\n            setHasExistingSession(false);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error checking existing session:', error);\r\n          localStorage.removeItem('culturalSurveySessionId');\r\n          setHasExistingSession(false);\r\n        }\r\n      }\r\n      \r\n      setHasCheckedSession(true);\r\n      setIsInitializing(false);\r\n    };\r\n\r\n    checkExistingSession();\r\n  }, [hasCheckedSession]);\r\n\r\n  // Update stage based on form state\r\n  useEffect(() => {\r\n    if (!hasCheckedSession) return;\r\n    \r\n    if (state.isCompleted) {\r\n      setCurrentStage('completed');\r\n    } else if (state.sessionId && state.userInfo) {\r\n      setCurrentStage('questions');\r\n    }\r\n  }, [state.isCompleted, state.sessionId, state.userInfo, hasCheckedSession]);\r\n\r\n  const handleStartNewSurvey = () => {\r\n    // Clear any existing session\r\n    if (hasExistingSession) {\r\n      localStorage.removeItem('culturalSurveySessionId');\r\n      setHasExistingSession(false);\r\n      setExistingSessionId(null);\r\n    }\r\n    setCurrentStage('userInfo');\r\n  };\r\n\r\n  const handleResumeSurvey = async () => {\r\n    if (existingSessionId) {\r\n      try {\r\n        console.log('Resuming survey with session:', existingSessionId);\r\n        await loadUserSession(existingSessionId);\r\n        setCurrentStage('questions');\r\n      } catch (error) {\r\n        console.error('Failed to resume session:', error);\r\n        // If resume fails, start fresh\r\n        localStorage.removeItem('culturalSurveySessionId');\r\n        setHasExistingSession(false);\r\n        setExistingSessionId(null);\r\n        alert('Unable to resume previous session. Starting fresh.');\r\n        setCurrentStage('userInfo');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUserInfoSubmit = async (userInfo: any) => {\r\n    try {\r\n      await createUserSession(userInfo);\r\n      setCurrentStage('questions');\r\n    } catch (error) {\r\n      console.error('Failed to create user session:', error);\r\n    }\r\n  };\r\n\r\n  if (isInitializing) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-100 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600\">Checking for existing survey...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (state.error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-red-50 flex items-center justify-center p-4\">\r\n        <div className=\"max-w-md mx-auto bg-white rounded-lg shadow-lg p-6 text-center\">\r\n          <div className=\"text-red-600 text-4xl mb-4\">⚠️</div>\r\n          <h2 className=\"text-xl font-bold text-red-800 mb-2\">Error</h2>\r\n          <p className=\"text-red-600 mb-4\">{state.error}</p>\r\n          <button\r\n            onClick={() => window.location.reload()}\r\n            className=\"bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\"\r\n          >\r\n            Reload Page\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  switch (currentStage) {\r\n    case 'introduction':\r\n      return (\r\n        <Introduction \r\n          onStartNew={handleStartNewSurvey}\r\n          onResume={handleResumeSurvey}\r\n          hasExistingSession={hasExistingSession}\r\n        />\r\n      );\r\n    case 'userInfo':\r\n      return <UserInfo onSubmit={handleUserInfoSubmit} isLoading={state.isLoading} />;\r\n    case 'questions':\r\n      return <QuestionForm />;\r\n    case 'completed':\r\n      return <CompletionPage />;\r\n    default:\r\n      return (\r\n        <Introduction \r\n          onStartNew={handleStartNewSurvey}\r\n          onResume={handleResumeSurvey}\r\n          hasExistingSession={hasExistingSession}\r\n        />\r\n      );\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <FormProvider>\r\n      <div className=\"App\">\r\n        <AppContent />\r\n      </div>\r\n    </FormProvider>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}