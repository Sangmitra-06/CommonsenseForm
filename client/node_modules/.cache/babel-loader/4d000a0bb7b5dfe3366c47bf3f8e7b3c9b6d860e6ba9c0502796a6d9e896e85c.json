{"ast":null,"code":"export const loadQuestionsData=async()=>{try{console.log('Loading questions from public/questions.json...');const response=await fetch('/questions.json');if(!response.ok){throw new Error(\"Failed to load questions: \".concat(response.status,\" \").concat(response.statusText));}const data=await response.json();// Validate the data structure\nif(!Array.isArray(data)||data.length===0){throw new Error('Questions data is not in the expected format');}// Calculate totals for logging\nconst totalQuestions=data.reduce((sum,cat)=>sum+cat.subcategories.reduce((subSum,sub)=>subSum+sub.topics.reduce((topicSum,topic)=>topicSum+topic.questions.length,0),0),0);console.log('Questions loaded successfully:',{categories:data.length,totalSubcategories:data.reduce((sum,cat)=>sum+cat.subcategories.length,0),totalTopics:data.reduce((sum,cat)=>sum+cat.subcategories.reduce((subSum,sub)=>subSum+sub.topics.length,0),0),totalQuestions});return data;}catch(error){console.error('Error loading questions data:',error);throw new Error('Failed to load questions data');}};export const validateAnswer=answer=>{if(!answer||answer.trim().length===0){return{isValid:false,message:'Please provide an answer or specify \"none\" if no answer exists'};}if(answer.trim().length<4){return{isValid:false,message:'Please provide a more detailed answer (at least 4 characters) or specify \"none\"'};}if(answer.length>5000){return{isValid:false,message:'Answer is too long (maximum 5000 characters)'};}return{isValid:true};};export const shouldShowAttentionCheck=questionCount=>{console.log('Checking if should show attention check:',{questionCount,isDivisibleBy7:questionCount>0&&questionCount%7===0,result:questionCount>0&&questionCount%7===0});return questionCount>0&&questionCount%7===0;};// NEW: Improved attention check validation\nexport const validateAttentionCheck=(userAnswer,expectedAnswers)=>{if(!userAnswer||typeof userAnswer!=='string'){console.log('Attention check failed: Empty or invalid answer');return false;}// Clean and normalize the user's answer\nconst cleanAnswer=userAnswer.toLowerCase().trim().replace(/[^\\w\\s]/g,'')// Remove punctuation\n.replace(/\\s+/g,' ');// Normalize whitespace\nconsole.log('Validating attention check:',{originalAnswer:userAnswer,cleanAnswer:cleanAnswer,expectedAnswers:expectedAnswers});// Check against all accepted answers\nconst isValid=expectedAnswers.some(acceptedAnswer=>{const cleanAccepted=acceptedAnswer.toLowerCase().trim();// Exact match\nif(cleanAnswer===cleanAccepted){console.log('Attention check passed: Exact match');return true;}// Check if the answer contains the expected word (for cases like \"the sun is yellow\")\nif(cleanAnswer.includes(cleanAccepted)){console.log('Attention check passed: Contains expected answer');return true;}// Check for common variations\nif(cleanAccepted==='yellow'&&(cleanAnswer.includes('gold')||cleanAnswer==='golden')){console.log('Attention check passed: Yellow variation');return true;}if(cleanAccepted==='tuesday'&&cleanAnswer==='tue'){console.log('Attention check passed: Tuesday abbreviation');return true;}return false;});console.log('Attention check result:',isValid);return isValid;};// Comprehensive quality analysis\n// Fixed version for helpers.ts\nexport const analyzeResponseQuality=answer=>{const issues=[];let score=100;let isNoneResponse=false;let isGibberish=false;const text=answer.toLowerCase().trim();// Check for \"none\" type responses\nconst nonePatterns=[/^(none|n\\/a|na|nothing|no|idk|i don't know|dk|dunno)$/i,/^(none that i know|nothing that i know|no idea|not sure|dont know|don't know)$/i,/^(same|similar|normal|usual|regular|typical|standard|common)$/i,/^(not applicable|not available|no information|no data)$/i];// Check for none responses (only add message once)\nconst hasNoneResponse=nonePatterns.some(pattern=>pattern.test(text));if(hasNoneResponse){isNoneResponse=true;issues.push('Generic \"none\" or non-informative response');score-=40;}// Check for gibberish patterns\nconst gibberishPatterns=[/^[bcdfghjklmnpqrstvwxyz]{6,}$/i,// Too many consonants\n/^[aeiou]{6,}$/i,// Too many vowels\n/(.{3,})\\1{2,}/,// Repeated patterns (abcabc)\n/^[^a-z\\s]*$/i,// No letters at all\n/^[a-z]{8,}$/i// Long strings without spaces\n];// Keyboard mashing patterns\nconst mashingPatterns=[/qwerty|asdf|zxcv|hjkl|yuiop/i,/abcd|1234|test|xxx|yyy|zzz/i,/(.)\\1{4,}/// Same character repeated 5+ times\n];// Check for gibberish (only add message once)\nconst hasGibberish=gibberishPatterns.some(pattern=>pattern.test(text));if(hasGibberish){isGibberish=true;issues.push('Appears to be random characters or gibberish');score-=60;}// Check for keyboard mashing (only add message once)\nconst hasMashing=mashingPatterns.some(pattern=>pattern.test(text));if(hasMashing&&!hasGibberish){// Only add if not already marked as gibberish\nisGibberish=true;issues.push('Keyboard mashing or test input detected');score-=50;}// Check for excessive repetition of words\nconst words=text.split(/\\s+/).filter(word=>word.length>2);const wordCount={};words.forEach(word=>{wordCount[word]=(wordCount[word]||0)+1;});const repeatedWords=Object.entries(wordCount).filter(_ref=>{let[word,count]=_ref;return count>3;});if(repeatedWords.length>0){issues.push('Excessive word repetition');score-=30;}// Check for lack of specificity\nconst vaguePhrases=['something','things','stuff','anything','everything'];const vagueCount=vaguePhrases.reduce((count,phrase)=>count+(text.match(new RegExp(\"\\\\b\".concat(phrase,\"\\\\b\"),'g'))||[]).length,0);if(vagueCount>3){issues.push('Response lacks specific details');score-=15;}// Positive indicators\nconst positiveIndicators=[/\\b(example|for instance|specifically|traditionally|commonly|usually|typically)\\b/i,/\\b(in my region|in our area|locally|here we|we usually|in our culture)\\b/i,/\\b(such as|like|including|consists of|involves|includes)\\b/i];let positiveCount=0;positiveIndicators.forEach(pattern=>{if(pattern.test(text))positiveCount++;});if(positiveCount>0){score+=Math.min(positiveCount*8,20);}score=Math.max(0,Math.min(100,score));return{isLowQuality:score<30,issues,score,isNoneResponse,isGibberish};};export const analyzeUserPattern=responses=>{const warnings=[];let suspiciousPattern=false;if(responses.length<5){return{suspiciousPattern,warnings,noneResponseRate:0,gibberishResponseRate:0,fastResponseRate:0,issueType:null};}// Analyze response patterns\nlet noneCount=0;let gibberishCount=0;let fastResponseCount=0;responses.forEach(response=>{const analysis=analyzeResponseQuality(response.answer);if(analysis.isNoneResponse)noneCount++;if(analysis.isGibberish)gibberishCount++;console.log('Response time check:',{answer:response.answer.substring(0,20)+'...',timeSpent:response.timeSpent,isFast:response.timeSpent<8});if(response.timeSpent<8)fastResponseCount++;});const noneResponseRate=noneCount/responses.length*100;const gibberishResponseRate=gibberishCount/responses.length*100;const fastResponseRate=fastResponseCount/responses.length*100;console.log('Pattern analysis results:',{totalResponses:responses.length,noneCount,gibberishCount,fastResponseCount,noneResponseRate:noneResponseRate.toFixed(1),gibberishResponseRate:gibberishResponseRate.toFixed(1),fastResponseRate:fastResponseRate.toFixed(1)});let issueCount=0;let primaryIssue=null;if(noneResponseRate>=30){warnings.push(\"High rate of \\\"none\\\" responses (\".concat(noneResponseRate.toFixed(1),\"%)\"));suspiciousPattern=true;issueCount++;if(!primaryIssue)primaryIssue='none';}if(gibberishResponseRate>=30){warnings.push(\"High rate of gibberish responses (\".concat(gibberishResponseRate.toFixed(1),\"%)\"));suspiciousPattern=true;issueCount++;if(!primaryIssue)primaryIssue='gibberish';}if(fastResponseRate>=30){warnings.push(\"High rate of very quick responses (\".concat(fastResponseRate.toFixed(1),\"% completed in under 8 seconds)\"));suspiciousPattern=true;issueCount++;if(!primaryIssue)primaryIssue='speed';}// Check for similar responses\nconst answers=responses.map(r=>r.answer.toLowerCase().trim());const uniqueAnswers=new Set(answers);if(uniqueAnswers.size<answers.length*0.6){warnings.push('Many similar or identical responses');suspiciousPattern=true;issueCount++;if(!primaryIssue)primaryIssue='repetition';}// Check for overall quality decline\nconst recentResponses=responses.slice(-5);const recentQualityScores=recentResponses.map(r=>analyzeResponseQuality(r.answer).score);const avgRecentQuality=recentQualityScores.reduce((sum,score)=>sum+score,0)/recentQualityScores.length;if(avgRecentQuality<25){warnings.push('Overall response quality is very low');suspiciousPattern=true;issueCount++;if(!primaryIssue)primaryIssue='quality';}const issueType=issueCount>1?'multiple':primaryIssue;return{suspiciousPattern,warnings,noneResponseRate,gibberishResponseRate,fastResponseRate,issueType};};// NEW: Enhanced attention check generation with multiple correct answers\nexport const generateAttentionCheck=(currentCategory,currentTopic,userInfo)=>{const checks=[{question:'This survey is about cultural practices in which country? Please type the country name.',correctAnswers:['india','bharat'],type:'basic'}];// Add personal verification if userInfo available\nif(userInfo){checks.push({question:\"What region of India did you specify at the beginning of this survey? Please write the name of the region (North, South, East, West, or Central).\",correctAnswers:[userInfo.region.toLowerCase()],type:'personal'});}const randomCheck=checks[Math.floor(Math.random()*checks.length)];return{question:randomCheck.question,options:[],// Not used for text input\ncorrectAnswer:0,// Not used for text input\nexpectedAnswer:randomCheck.correctAnswers[0],// Primary expected answer for backward compatibility\nexpectedAnswers:randomCheck.correctAnswers,// NEW: Array of acceptable answers\ncurrentTopic,currentCategory,type:randomCheck.type};};// Utility functions\nexport const generateQuestionId=(categoryIndex,subcategoryIndex,topicIndex,questionIndex)=>{return\"\".concat(categoryIndex,\"-\").concat(subcategoryIndex,\"-\").concat(topicIndex,\"-\").concat(questionIndex);};export const formatTime=seconds=>{const mins=Math.floor(seconds/60);const secs=seconds%60;return\"\".concat(mins,\":\").concat(secs.toString().padStart(2,'0'));};export const debounce=(func,wait)=>{let timeout;return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}clearTimeout(timeout);timeout=setTimeout(()=>func.apply(null,args),wait);};};export const getEstimatedTimeRemaining=function(totalQuestions,completedQuestions){let averageTimePerQuestion=arguments.length>2&&arguments[2]!==undefined?arguments[2]:120;const remainingQuestions=totalQuestions-completedQuestions;const estimatedSeconds=remainingQuestions*averageTimePerQuestion;if(estimatedSeconds<3600){const minutes=Math.ceil(estimatedSeconds/60);return\"~\".concat(minutes,\" minute\").concat(minutes!==1?'s':'',\" remaining\");}else{const hours=Math.ceil(estimatedSeconds/3600);return\"~\".concat(hours,\" hour\").concat(hours!==1?'s':'',\" remaining\");}};","map":{"version":3,"names":["loadQuestionsData","console","log","response","fetch","ok","Error","concat","status","statusText","data","json","Array","isArray","length","totalQuestions","reduce","sum","cat","subcategories","subSum","sub","topics","topicSum","topic","questions","categories","totalSubcategories","totalTopics","error","validateAnswer","answer","trim","isValid","message","shouldShowAttentionCheck","questionCount","isDivisibleBy7","result","validateAttentionCheck","userAnswer","expectedAnswers","cleanAnswer","toLowerCase","replace","originalAnswer","some","acceptedAnswer","cleanAccepted","includes","analyzeResponseQuality","issues","score","isNoneResponse","isGibberish","text","nonePatterns","hasNoneResponse","pattern","test","push","gibberishPatterns","mashingPatterns","hasGibberish","hasMashing","words","split","filter","word","wordCount","forEach","repeatedWords","Object","entries","_ref","count","vaguePhrases","vagueCount","phrase","match","RegExp","positiveIndicators","positiveCount","Math","min","max","isLowQuality","analyzeUserPattern","responses","warnings","suspiciousPattern","noneResponseRate","gibberishResponseRate","fastResponseRate","issueType","noneCount","gibberishCount","fastResponseCount","analysis","substring","timeSpent","isFast","totalResponses","toFixed","issueCount","primaryIssue","answers","map","r","uniqueAnswers","Set","size","recentResponses","slice","recentQualityScores","avgRecentQuality","generateAttentionCheck","currentCategory","currentTopic","userInfo","checks","question","correctAnswers","type","region","randomCheck","floor","random","options","correctAnswer","expectedAnswer","generateQuestionId","categoryIndex","subcategoryIndex","topicIndex","questionIndex","formatTime","seconds","mins","secs","toString","padStart","debounce","func","wait","timeout","_len","arguments","args","_key","clearTimeout","setTimeout","apply","getEstimatedTimeRemaining","completedQuestions","averageTimePerQuestion","undefined","remainingQuestions","estimatedSeconds","minutes","ceil","hours"],"sources":["C:/Users/sangm/OneDrive - Brock University/CommonsenseForm/client/src/utils/helpers.ts"],"sourcesContent":["import { Category, AttentionCheck } from '../types/index.ts';\r\n\r\nexport const loadQuestionsData = async (): Promise<Category[]> => {\r\n  try {\r\n    console.log('Loading questions from public/questions.json...');\r\n    \r\n    const response = await fetch('/questions.json');\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to load questions: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data: Category[] = await response.json();\r\n    \r\n    // Validate the data structure\r\n    if (!Array.isArray(data) || data.length === 0) {\r\n      throw new Error('Questions data is not in the expected format');\r\n    }\r\n    \r\n    // Calculate totals for logging\r\n    const totalQuestions = data.reduce((sum, cat) => \r\n      sum + cat.subcategories.reduce((subSum, sub) => \r\n        subSum + sub.topics.reduce((topicSum, topic) => topicSum + topic.questions.length, 0), 0), 0);\r\n    \r\n    console.log('Questions loaded successfully:', {\r\n      categories: data.length,\r\n      totalSubcategories: data.reduce((sum, cat) => sum + cat.subcategories.length, 0),\r\n      totalTopics: data.reduce((sum, cat) => \r\n        sum + cat.subcategories.reduce((subSum, sub) => subSum + sub.topics.length, 0), 0),\r\n      totalQuestions\r\n    });\r\n    \r\n    return data;\r\n    \r\n  } catch (error) {\r\n    console.error('Error loading questions data:', error);\r\n    throw new Error('Failed to load questions data');\r\n  }\r\n};\r\n\r\nexport const validateAnswer = (answer: string): { isValid: boolean; message?: string } => {\r\n  if (!answer || answer.trim().length === 0) {\r\n    return { isValid: false, message: 'Please provide an answer or specify \"none\" if no answer exists' };\r\n  }\r\n  \r\n  if (answer.trim().length < 4) {\r\n    return { isValid: false, message: 'Please provide a more detailed answer (at least 4 characters) or specify \"none\"' };\r\n  }\r\n  \r\n  if (answer.length > 5000) {\r\n    return { isValid: false, message: 'Answer is too long (maximum 5000 characters)' };\r\n  }\r\n  \r\n  return { isValid: true };\r\n};\r\n\r\nexport const shouldShowAttentionCheck = (questionCount: number): boolean => {\r\n  console.log('Checking if should show attention check:', {\r\n    questionCount,\r\n    isDivisibleBy7: questionCount > 0 && questionCount % 7 === 0,\r\n    result: questionCount > 0 && questionCount % 7 === 0\r\n  });\r\n  \r\n  return questionCount > 0 && questionCount % 7 === 0;\r\n};\r\n\r\n// NEW: Improved attention check validation\r\nexport const validateAttentionCheck = (userAnswer: string, expectedAnswers: string[]): boolean => {\r\n  if (!userAnswer || typeof userAnswer !== 'string') {\r\n    console.log('Attention check failed: Empty or invalid answer');\r\n    return false;\r\n  }\r\n\r\n  // Clean and normalize the user's answer\r\n  const cleanAnswer = userAnswer\r\n    .toLowerCase()\r\n    .trim()\r\n    .replace(/[^\\w\\s]/g, '') // Remove punctuation\r\n    .replace(/\\s+/g, ' '); // Normalize whitespace\r\n\r\n  console.log('Validating attention check:', {\r\n    originalAnswer: userAnswer,\r\n    cleanAnswer: cleanAnswer,\r\n    expectedAnswers: expectedAnswers\r\n  });\r\n\r\n  // Check against all accepted answers\r\n  const isValid = expectedAnswers.some(acceptedAnswer => {\r\n    const cleanAccepted = acceptedAnswer.toLowerCase().trim();\r\n    \r\n    // Exact match\r\n    if (cleanAnswer === cleanAccepted) {\r\n      console.log('Attention check passed: Exact match');\r\n      return true;\r\n    }\r\n    \r\n    // Check if the answer contains the expected word (for cases like \"the sun is yellow\")\r\n    if (cleanAnswer.includes(cleanAccepted)) {\r\n      console.log('Attention check passed: Contains expected answer');\r\n      return true;\r\n    }\r\n    \r\n    // Check for common variations\r\n    if (cleanAccepted === 'yellow' && (cleanAnswer.includes('gold') || cleanAnswer === 'golden')) {\r\n      console.log('Attention check passed: Yellow variation');\r\n      return true;\r\n    }\r\n    \r\n    if (cleanAccepted === 'tuesday' && cleanAnswer === 'tue') {\r\n      console.log('Attention check passed: Tuesday abbreviation');\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  });\r\n\r\n  console.log('Attention check result:', isValid);\r\n  return isValid;\r\n};\r\n\r\n// Comprehensive quality analysis\r\n// Fixed version for helpers.ts\r\nexport const analyzeResponseQuality = (answer: string): {\r\n  isLowQuality: boolean;\r\n  issues: string[];\r\n  score: number;\r\n  isNoneResponse: boolean;\r\n  isGibberish: boolean;\r\n} => {\r\n  const issues: string[] = [];\r\n  let score = 100;\r\n  let isNoneResponse = false;\r\n  let isGibberish = false;\r\n\r\n  const text = answer.toLowerCase().trim();\r\n  \r\n  // Check for \"none\" type responses\r\n  const nonePatterns = [\r\n    /^(none|n\\/a|na|nothing|no|idk|i don't know|dk|dunno)$/i,\r\n    /^(none that i know|nothing that i know|no idea|not sure|dont know|don't know)$/i,\r\n    /^(same|similar|normal|usual|regular|typical|standard|common)$/i,\r\n    /^(not applicable|not available|no information|no data)$/i,\r\n  ];\r\n\r\n  // Check for none responses (only add message once)\r\n  const hasNoneResponse = nonePatterns.some(pattern => pattern.test(text));\r\n  if (hasNoneResponse) {\r\n    isNoneResponse = true;\r\n    issues.push('Generic \"none\" or non-informative response');\r\n    score -= 40;\r\n  }\r\n\r\n  // Check for gibberish patterns\r\n  const gibberishPatterns = [\r\n    /^[bcdfghjklmnpqrstvwxyz]{6,}$/i, // Too many consonants\r\n    /^[aeiou]{6,}$/i, // Too many vowels\r\n    /(.{3,})\\1{2,}/, // Repeated patterns (abcabc)\r\n    /^[^a-z\\s]*$/i, // No letters at all\r\n    /^[a-z]{8,}$/i, // Long strings without spaces\r\n  ];\r\n\r\n  // Keyboard mashing patterns\r\n  const mashingPatterns = [\r\n    /qwerty|asdf|zxcv|hjkl|yuiop/i,\r\n    /abcd|1234|test|xxx|yyy|zzz/i,\r\n    /(.)\\1{4,}/, // Same character repeated 5+ times\r\n  ];\r\n\r\n  // Check for gibberish (only add message once)\r\n  const hasGibberish = gibberishPatterns.some(pattern => pattern.test(text));\r\n  if (hasGibberish) {\r\n    isGibberish = true;\r\n    issues.push('Appears to be random characters or gibberish');\r\n    score -= 60;\r\n  }\r\n\r\n  // Check for keyboard mashing (only add message once)\r\n  const hasMashing = mashingPatterns.some(pattern => pattern.test(text));\r\n  if (hasMashing && !hasGibberish) { // Only add if not already marked as gibberish\r\n    isGibberish = true;\r\n    issues.push('Keyboard mashing or test input detected');\r\n    score -= 50;\r\n  }\r\n\r\n  // Check for excessive repetition of words\r\n  const words = text.split(/\\s+/).filter(word => word.length > 2);\r\n  const wordCount = {};\r\n  words.forEach(word => {\r\n    wordCount[word] = (wordCount[word] || 0) + 1;\r\n  });\r\n\r\n  const repeatedWords = Object.entries(wordCount).filter(([word, count]) => (count as number) > 3);\r\n  if (repeatedWords.length > 0) {\r\n    issues.push('Excessive word repetition');\r\n    score -= 30;\r\n  }\r\n\r\n  // Check for lack of specificity\r\n  const vaguePhrases = ['something', 'things', 'stuff', 'anything', 'everything'];\r\n  const vagueCount = vaguePhrases.reduce((count, phrase) => \r\n    count + (text.match(new RegExp(`\\\\b${phrase}\\\\b`, 'g')) || []).length, 0\r\n  );\r\n  \r\n  if (vagueCount > 3) {\r\n    issues.push('Response lacks specific details');\r\n    score -= 15;\r\n  }\r\n\r\n  // Positive indicators\r\n  const positiveIndicators = [\r\n    /\\b(example|for instance|specifically|traditionally|commonly|usually|typically)\\b/i,\r\n    /\\b(in my region|in our area|locally|here we|we usually|in our culture)\\b/i,\r\n    /\\b(such as|like|including|consists of|involves|includes)\\b/i,\r\n  ];\r\n\r\n  let positiveCount = 0;\r\n  positiveIndicators.forEach(pattern => {\r\n    if (pattern.test(text)) positiveCount++;\r\n  });\r\n\r\n  if (positiveCount > 0) {\r\n    score += Math.min(positiveCount * 8, 20);\r\n  }\r\n\r\n  score = Math.max(0, Math.min(100, score));\r\n  \r\n  return {\r\n    isLowQuality: score < 30,\r\n    issues,\r\n    score,\r\n    isNoneResponse,\r\n    isGibberish\r\n  };\r\n};\r\n\r\nexport const analyzeUserPattern = (responses: Array<{answer: string, timeSpent: number}>): {\r\n  suspiciousPattern: boolean;\r\n  warnings: string[];\r\n  noneResponseRate: number;\r\n  gibberishResponseRate: number;\r\n  fastResponseRate: number;\r\n  issueType: string | null;\r\n} => {\r\n  const warnings: string[] = [];\r\n  let suspiciousPattern = false;\r\n\r\n  if (responses.length < 5) {\r\n    return { \r\n      suspiciousPattern, \r\n      warnings, \r\n      noneResponseRate: 0,\r\n      gibberishResponseRate: 0,\r\n      fastResponseRate: 0,\r\n      issueType: null\r\n    };\r\n  }\r\n\r\n  // Analyze response patterns\r\n  let noneCount = 0;\r\n  let gibberishCount = 0;\r\n  let fastResponseCount = 0;\r\n\r\n  responses.forEach(response => {\r\n    const analysis = analyzeResponseQuality(response.answer);\r\n    \r\n    if (analysis.isNoneResponse) noneCount++;\r\n    if (analysis.isGibberish) gibberishCount++;\r\n    \r\n    console.log('Response time check:', {\r\n      answer: response.answer.substring(0, 20) + '...',\r\n      timeSpent: response.timeSpent,\r\n      isFast: response.timeSpent < 8\r\n    });\r\n    \r\n    if (response.timeSpent < 8) fastResponseCount++;\r\n  });\r\n\r\n  const noneResponseRate = (noneCount / responses.length) * 100;\r\n  const gibberishResponseRate = (gibberishCount / responses.length) * 100;\r\n  const fastResponseRate = (fastResponseCount / responses.length) * 100;\r\n\r\n  console.log('Pattern analysis results:', {\r\n    totalResponses: responses.length,\r\n    noneCount,\r\n    gibberishCount,\r\n    fastResponseCount,\r\n    noneResponseRate: noneResponseRate.toFixed(1),\r\n    gibberishResponseRate: gibberishResponseRate.toFixed(1),\r\n    fastResponseRate: fastResponseRate.toFixed(1)\r\n  });\r\n\r\n  let issueCount = 0;\r\n  let primaryIssue: string | null = null;\r\n\r\n  if (noneResponseRate >= 30) {\r\n    warnings.push(`High rate of \"none\" responses (${noneResponseRate.toFixed(1)}%)`);\r\n    suspiciousPattern = true;\r\n    issueCount++;\r\n    if (!primaryIssue) primaryIssue = 'none';\r\n  }\r\n\r\n  if (gibberishResponseRate >= 30) {\r\n    warnings.push(`High rate of gibberish responses (${gibberishResponseRate.toFixed(1)}%)`);\r\n    suspiciousPattern = true;\r\n    issueCount++;\r\n    if (!primaryIssue) primaryIssue = 'gibberish';\r\n  }\r\n\r\n  if (fastResponseRate >= 30) {\r\n    warnings.push(`High rate of very quick responses (${fastResponseRate.toFixed(1)}% completed in under 8 seconds)`);\r\n    suspiciousPattern = true;\r\n    issueCount++;\r\n    if (!primaryIssue) primaryIssue = 'speed';\r\n  }\r\n\r\n  // Check for similar responses\r\n  const answers = responses.map(r => r.answer.toLowerCase().trim());\r\n  const uniqueAnswers = new Set(answers);\r\n  if (uniqueAnswers.size < answers.length * 0.6) {\r\n    warnings.push('Many similar or identical responses');\r\n    suspiciousPattern = true;\r\n    issueCount++;\r\n    if (!primaryIssue) primaryIssue = 'repetition';\r\n  }\r\n\r\n  // Check for overall quality decline\r\n  const recentResponses = responses.slice(-5);\r\n  const recentQualityScores = recentResponses.map(r => analyzeResponseQuality(r.answer).score);\r\n  const avgRecentQuality = recentQualityScores.reduce((sum, score) => sum + score, 0) / recentQualityScores.length;\r\n  \r\n  if (avgRecentQuality < 25) {\r\n    warnings.push('Overall response quality is very low');\r\n    suspiciousPattern = true;\r\n    issueCount++;\r\n    if (!primaryIssue) primaryIssue = 'quality';\r\n  }\r\n\r\n  const issueType = issueCount > 1 ? 'multiple' : primaryIssue;\r\n\r\n  return { \r\n    suspiciousPattern, \r\n    warnings, \r\n    noneResponseRate,\r\n    gibberishResponseRate,\r\n    fastResponseRate,\r\n    issueType\r\n  };\r\n};\r\n\r\n// NEW: Enhanced attention check generation with multiple correct answers\r\nexport const generateAttentionCheck = (\r\n  currentCategory: string,\r\n  currentTopic: string,\r\n  userInfo?: { region: string; age: number }\r\n): AttentionCheck => {\r\n  const checks = [\r\n    {\r\n      question: 'This survey is about cultural practices in which country? Please type the country name.',\r\n      correctAnswers: ['india', 'bharat'],\r\n      type: 'basic'\r\n    },\r\n   \r\n  ];\r\n\r\n  // Add personal verification if userInfo available\r\n  if (userInfo) {\r\n    checks.push({\r\n      question: `What region of India did you specify at the beginning of this survey? Please write the name of the region (North, South, East, West, or Central).`,\r\n      correctAnswers: [userInfo.region.toLowerCase()],\r\n      type: 'personal'\r\n    });\r\n  }\r\n\r\n  \r\n  \r\n  const randomCheck = checks[Math.floor(Math.random() * checks.length)];\r\n  \r\n  return {\r\n    question: randomCheck.question,\r\n    options: [], // Not used for text input\r\n    correctAnswer: 0, // Not used for text input\r\n    expectedAnswer: randomCheck.correctAnswers[0], // Primary expected answer for backward compatibility\r\n    expectedAnswers: randomCheck.correctAnswers, // NEW: Array of acceptable answers\r\n    currentTopic,\r\n    currentCategory,\r\n    type: randomCheck.type\r\n  };\r\n};\r\n\r\n// Utility functions\r\nexport const generateQuestionId = (\r\n  categoryIndex: number,\r\n  subcategoryIndex: number,\r\n  topicIndex: number,\r\n  questionIndex: number\r\n): string => {\r\n  return `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\r\n};\r\n\r\nexport const formatTime = (seconds: number): string => {\r\n  const mins = Math.floor(seconds / 60);\r\n  const secs = seconds % 60;\r\n  return `${mins}:${secs.toString().padStart(2, '0')}`;\r\n};\r\n\r\nexport const debounce = <T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait: number\r\n): ((...args: Parameters<T>) => void) => {\r\n  let timeout: ReturnType<typeof setTimeout>;\r\n  \r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func.apply(null, args), wait);\r\n  };\r\n};\r\n\r\nexport const getEstimatedTimeRemaining = (\r\n  totalQuestions: number,\r\n  completedQuestions: number,\r\n  averageTimePerQuestion: number = 120\r\n): string => {\r\n  const remainingQuestions = totalQuestions - completedQuestions;\r\n  const estimatedSeconds = remainingQuestions * averageTimePerQuestion;\r\n  \r\n  if (estimatedSeconds < 3600) {\r\n    const minutes = Math.ceil(estimatedSeconds / 60);\r\n    return `~${minutes} minute${minutes !== 1 ? 's' : ''} remaining`;\r\n  } else {\r\n    const hours = Math.ceil(estimatedSeconds / 3600);\r\n    return `~${hours} hour${hours !== 1 ? 's' : ''} remaining`;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}