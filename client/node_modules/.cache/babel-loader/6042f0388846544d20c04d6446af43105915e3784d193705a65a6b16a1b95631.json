{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sangm\\\\OneDrive - Brock University\\\\CommonsenseForm\\\\client\\\\src\\\\context\\\\FormContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useCallback, useRef, useState } from 'react';\nimport { loadQuestionsData } from '../utils/helpers.ts';\nimport * as api from '../services/api.ts';\n\n// Timer constants - simplified\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TIMER_UPDATE_INTERVAL = 1000; // Update every second\n\nconst initialState = {\n  sessionId: null,\n  userInfo: null,\n  currentPosition: {\n    categoryIndex: 0,\n    subcategoryIndex: 0,\n    topicIndex: 0,\n    questionIndex: 0\n  },\n  responses: new Map(),\n  progress: {\n    currentCategory: 0,\n    currentSubcategory: 0,\n    currentTopic: 0,\n    currentQuestion: 0,\n    completedQuestions: 0,\n    totalQuestions: 0,\n    completedTopics: [],\n    attentionChecksPassed: 0,\n    attentionChecksFailed: 0\n  },\n  isLoading: false,\n  error: null,\n  questionsData: [],\n  startTime: 0,\n  lastSaveTime: 0,\n  isCompleted: false,\n  // Simplified timer state\n  surveyStartTime: 0,\n  surveyTimeElapsed: 0,\n  // Count up from 0\n  surveyExpired: false,\n  // Keep this false always now\n  showTimeWarning: false,\n  // Always false now\n  showTimeCritical: false,\n  // Always false now\n  // Attention check failure state\n  attentionCheckFailed: false,\n  // NEW: Timing state\n  timing: null\n};\nfunction formReducer(state, action) {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SET_SESSION_ID':\n      return {\n        ...state,\n        sessionId: action.payload\n      };\n    case 'SET_USER_INFO':\n      return {\n        ...state,\n        userInfo: action.payload\n      };\n    case 'SET_QUESTIONS_DATA':\n      return {\n        ...state,\n        questionsData: action.payload\n      };\n    case 'SET_CURRENT_POSITION':\n      return {\n        ...state,\n        currentPosition: action.payload\n      };\n    case 'ADD_RESPONSE':\n      const newResponses = new Map(state.responses);\n      newResponses.set(action.payload.questionId, action.payload);\n      return {\n        ...state,\n        responses: newResponses\n      };\n    case 'UPDATE_PROGRESS':\n      return {\n        ...state,\n        progress: {\n          ...state.progress,\n          ...action.payload\n        }\n      };\n    case 'SET_RESPONSES':\n      const responseMap = new Map();\n      action.payload.forEach(response => {\n        responseMap.set(response.questionId, response);\n      });\n      return {\n        ...state,\n        responses: responseMap\n      };\n    case 'SET_START_TIME':\n      return {\n        ...state,\n        startTime: action.payload\n      };\n    case 'SET_LAST_SAVE_TIME':\n      return {\n        ...state,\n        lastSaveTime: action.payload\n      };\n    case 'SET_COMPLETED':\n      return {\n        ...state,\n        isCompleted: action.payload\n      };\n    case 'RESET_FORM':\n      return {\n        ...initialState,\n        questionsData: state.questionsData\n      };\n    // Simplified timer cases\n    case 'START_SURVEY_TIMER':\n      return {\n        ...state,\n        surveyStartTime: Date.now(),\n        surveyTimeElapsed: 0,\n        showTimeWarning: false,\n        showTimeCritical: false,\n        surveyExpired: false\n      };\n    case 'UPDATE_TIMER':\n      return {\n        ...state,\n        surveyTimeElapsed: action.payload.timeElapsed\n      };\n    // Attention check failure case\n    case 'SET_ATTENTION_CHECK_FAILED':\n      return {\n        ...state,\n        attentionCheckFailed: action.payload\n      };\n    // NEW: Timing case\n    case 'SET_TIMING':\n      return {\n        ...state,\n        timing: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\n// Updated interface\n\nconst FormContext = /*#__PURE__*/createContext(undefined);\nexport function FormProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(formReducer, initialState);\n  const hasLoadedQuestions = useRef(false);\n  const isLoadingSession = useRef(false);\n  const [timerInterval, setTimerInterval] = useState(null);\n  const surveyStartTimeRef = useRef(0);\n\n  // Load questions data only once\n  useEffect(() => {\n    if (hasLoadedQuestions.current) return;\n    const loadData = async () => {\n      try {\n        hasLoadedQuestions.current = true;\n        dispatch({\n          type: 'SET_LOADING',\n          payload: true\n        });\n        dispatch({\n          type: 'SET_ERROR',\n          payload: null\n        });\n        console.log('FormContext: Loading questions data...');\n        const data = await loadQuestionsData();\n        console.log('FormContext: Questions loaded:', data.length, 'categories');\n        dispatch({\n          type: 'SET_QUESTIONS_DATA',\n          payload: data\n        });\n        const totalQuestions = getTotalQuestions(data);\n        console.log('FormContext: Total questions calculated:', totalQuestions);\n        dispatch({\n          type: 'UPDATE_PROGRESS',\n          payload: {\n            totalQuestions\n          }\n        });\n      } catch (error) {\n        console.error('FormContext: Error loading questions:', error);\n        dispatch({\n          type: 'SET_ERROR',\n          payload: 'Failed to load questions data. Please refresh the page.'\n        });\n        hasLoadedQuestions.current = false;\n      } finally {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }\n    };\n    loadData();\n  }, []);\n\n  // Calculate total questions\n  const getTotalQuestions = questionsData => {\n    return questionsData.reduce((total, category) => {\n      return total + category.subcategories.reduce((subTotal, subcategory) => {\n        return subTotal + subcategory.topics.reduce((topicTotal, topic) => {\n          return topicTotal + topic.questions.length;\n        }, 0);\n      }, 0);\n    }, 0);\n  };\n\n  // Simplified start timer function - counts UP\n  const startSurveyTimer = useCallback(() => {\n    const startTime = Date.now();\n    console.log('Starting survey timer at:', new Date(startTime).toISOString());\n    dispatch({\n      type: 'START_SURVEY_TIMER'\n    });\n    surveyStartTimeRef.current = startTime;\n\n    // Clear any existing timer\n    if (timerInterval) {\n      clearInterval(timerInterval);\n    }\n\n    // Start new timer that counts UP\n    const interval = setInterval(() => {\n      const now = Date.now();\n      const elapsed = now - surveyStartTimeRef.current;\n      dispatch({\n        type: 'UPDATE_TIMER',\n        payload: {\n          timeElapsed: elapsed\n        }\n      });\n    }, TIMER_UPDATE_INTERVAL);\n    setTimerInterval(interval);\n  }, [timerInterval]);\n\n  // Simplified resume timer function\n  const resumeSurveyTimer = useCallback(startTime => {\n    console.log('Resuming survey timer from:', new Date(startTime).toISOString());\n    surveyStartTimeRef.current = startTime;\n    const now = Date.now();\n    const elapsed = now - startTime;\n    dispatch({\n      type: 'UPDATE_TIMER',\n      payload: {\n        timeElapsed: elapsed\n      }\n    });\n\n    // Clear any existing timer\n    if (timerInterval) {\n      clearInterval(timerInterval);\n    }\n\n    // Start timer continuing from where it left off\n    const interval = setInterval(() => {\n      const now = Date.now();\n      const elapsed = now - surveyStartTimeRef.current;\n      dispatch({\n        type: 'UPDATE_TIMER',\n        payload: {\n          timeElapsed: elapsed\n        }\n      });\n    }, TIMER_UPDATE_INTERVAL);\n    setTimerInterval(interval);\n  }, [timerInterval]);\n\n  // Clean up timer on unmount\n  useEffect(() => {\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [timerInterval]);\n\n  // Simple format time function (shows elapsed time)\n  const formatTimeElapsed = useCallback(milliseconds => {\n    const totalSeconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  }, []);\n\n  // Attention check failure function\n  const setAttentionCheckFailed = useCallback(failed => {\n    dispatch({\n      type: 'SET_ATTENTION_CHECK_FAILED',\n      payload: failed\n    });\n  }, []);\n\n  // NEW: Timing function\n  const setTiming = useCallback(timing => {\n    dispatch({\n      type: 'SET_TIMING',\n      payload: timing\n    });\n  }, []);\n\n  // Create user session - UPDATED to handle timing\n  const createUserSession = useCallback(async userInfo => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      console.log('FormContext: Creating user session with:', userInfo);\n      const response = await api.createUser(userInfo);\n      dispatch({\n        type: 'SET_SESSION_ID',\n        payload: response.sessionId\n      });\n      dispatch({\n        type: 'SET_USER_INFO',\n        payload: userInfo\n      });\n\n      // NEW: Set timing if provided from server\n      if (response.startTime) {\n        const serverStartTime = new Date(response.startTime);\n        dispatch({\n          type: 'SET_TIMING',\n          payload: {\n            startedAt: serverStartTime,\n            completedAt: null,\n            totalTimeSeconds: null,\n            totalTimeFormatted: null\n          }\n        });\n        console.log('FormContext: Server timing initialized:', serverStartTime.toISOString());\n      }\n      const startTime = Date.now();\n      dispatch({\n        type: 'SET_START_TIME',\n        payload: startTime\n      });\n\n      // Store session ID and start time in localStorage\n      localStorage.setItem('culturalSurveySessionId', response.sessionId);\n      localStorage.setItem('culturalSurveyStartTime', startTime.toString());\n\n      // Start the survey timer\n      console.log('FormContext: Creating user session and starting timer');\n      startSurveyTimer();\n      console.log('FormContext: User session created successfully');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('FormContext: Error creating user session:', error);\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to create session';\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n      throw error;\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  }, [startSurveyTimer]);\n\n  // Rest of your existing functions remain the same...\n  const loadUserSession = useCallback(async sessionId => {\n    if (isLoadingSession.current) return;\n    try {\n      isLoadingSession.current = true;\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      console.log('FormContext: Loading user session...');\n      const user = await api.getUser(sessionId);\n      dispatch({\n        type: 'SET_SESSION_ID',\n        payload: sessionId\n      });\n      dispatch({\n        type: 'SET_USER_INFO',\n        payload: user.userInfo\n      });\n      dispatch({\n        type: 'SET_COMPLETED',\n        payload: user.isCompleted\n      });\n\n      // NEW: Load timing data if available\n      if (user.timing) {\n        dispatch({\n          type: 'SET_TIMING',\n          payload: {\n            startedAt: new Date(user.timing.startedAt),\n            completedAt: user.timing.completedAt ? new Date(user.timing.completedAt) : null,\n            totalTimeSeconds: user.timing.totalTimeSeconds,\n            totalTimeFormatted: user.timing.totalTimeFormatted\n          }\n        });\n        console.log('FormContext: Timing data loaded from user session');\n      }\n\n      // Load responses\n      console.log('FormContext: Loading user responses...');\n      const responses = await api.getUserResponses(sessionId);\n      console.log('FormContext: Responses loaded:', responses.length);\n      dispatch({\n        type: 'SET_RESPONSES',\n        payload: responses\n      });\n\n      // Recalculate total questions from current data\n      const totalQuestions = getTotalQuestions(state.questionsData);\n      const updatedProgress = {\n        ...user.progress,\n        totalQuestions,\n        completedQuestions: responses.length\n      };\n      dispatch({\n        type: 'UPDATE_PROGRESS',\n        payload: updatedProgress\n      });\n\n      // Find the correct starting position\n      const nextPosition = findNextUnansweredQuestion(responses, state.questionsData);\n      console.log('FormContext: Setting position to:', nextPosition);\n      dispatch({\n        type: 'SET_CURRENT_POSITION',\n        payload: nextPosition\n      });\n\n      // Resume timer if not completed\n      if (!user.isCompleted) {\n        const savedStartTime = localStorage.getItem('culturalSurveyStartTime');\n        if (savedStartTime) {\n          resumeSurveyTimer(parseInt(savedStartTime));\n        } else {\n          // If no start time found, start fresh timer\n          localStorage.setItem('culturalSurveyStartTime', Date.now().toString());\n          startSurveyTimer();\n        }\n      }\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to load user session'\n      });\n      throw error;\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      isLoadingSession.current = false;\n    }\n  }, [state.questionsData, resumeSurveyTimer, startSurveyTimer]);\n  const findNextUnansweredQuestion = useCallback((responses, questionsData) => {\n    const answeredQuestions = new Set(responses.map(r => r.questionId));\n    for (let categoryIndex = 0; categoryIndex < questionsData.length; categoryIndex++) {\n      const category = questionsData[categoryIndex];\n      for (let subcategoryIndex = 0; subcategoryIndex < category.subcategories.length; subcategoryIndex++) {\n        const subcategory = category.subcategories[subcategoryIndex];\n        for (let topicIndex = 0; topicIndex < subcategory.topics.length; topicIndex++) {\n          const topic = subcategory.topics[topicIndex];\n          for (let questionIndex = 0; questionIndex < topic.questions.length; questionIndex++) {\n            const questionId = `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\n            if (!answeredQuestions.has(questionId)) {\n              return {\n                categoryIndex,\n                subcategoryIndex,\n                topicIndex,\n                questionIndex\n              };\n            }\n          }\n        }\n      }\n    }\n    if (questionsData.length > 0) {\n      const lastCategory = questionsData[questionsData.length - 1];\n      const lastSubcategory = lastCategory.subcategories[lastCategory.subcategories.length - 1];\n      const lastTopic = lastSubcategory.topics[lastSubcategory.topics.length - 1];\n      return {\n        categoryIndex: questionsData.length - 1,\n        subcategoryIndex: lastCategory.subcategories.length - 1,\n        topicIndex: lastSubcategory.topics.length - 1,\n        questionIndex: lastTopic.questions.length - 1\n      };\n    }\n    return {\n      categoryIndex: 0,\n      subcategoryIndex: 0,\n      topicIndex: 0,\n      questionIndex: 0\n    };\n  }, []);\n  const saveResponse = useCallback(async response => {\n    try {\n      console.log('FormContext: Saving response:', response);\n      await api.saveResponse(response);\n      dispatch({\n        type: 'ADD_RESPONSE',\n        payload: response\n      });\n      dispatch({\n        type: 'SET_LAST_SAVE_TIME',\n        payload: Date.now()\n      });\n\n      // Only count non-attention check responses for progress\n      const wasNewResponse = !state.responses.has(response.questionId);\n      const isActualQuestion = !response.questionId.startsWith('ATTENTION_CHECK_');\n      if (wasNewResponse && isActualQuestion) {\n        const completedQuestions = Array.from(state.responses.keys()).filter(questionId => !questionId.startsWith('ATTENTION_CHECK_')).length + 1; // +1 for the response we just added\n\n        dispatch({\n          type: 'UPDATE_PROGRESS',\n          payload: {\n            completedQuestions\n          }\n        });\n      }\n    } catch (error) {\n      console.error('FormContext: Error saving response:', error);\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to save response'\n      });\n      throw error;\n    }\n  }, [state.responses]);\n  const navigateToPosition = useCallback(async (categoryIndex, subcategoryIndex, topicIndex, questionIndex) => {\n    const newPosition = {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex,\n      questionIndex\n    };\n    dispatch({\n      type: 'SET_CURRENT_POSITION',\n      payload: newPosition\n    });\n    if (state.sessionId) {\n      try {\n        await api.updateUserProgress(state.sessionId, {\n          currentCategory: categoryIndex,\n          currentSubcategory: subcategoryIndex,\n          currentTopic: topicIndex,\n          currentQuestion: questionIndex\n        });\n      } catch (error) {\n        console.error('Failed to save navigation progress:', error);\n      }\n    }\n  }, [state.sessionId]);\n  const getCurrentQuestionData = useCallback(() => {\n    const {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex,\n      questionIndex\n    } = state.currentPosition;\n    if (!state.questionsData[categoryIndex]) return null;\n    const category = state.questionsData[categoryIndex];\n    const subcategory = category.subcategories[subcategoryIndex];\n    const topic = subcategory === null || subcategory === void 0 ? void 0 : subcategory.topics[topicIndex];\n    const question = topic === null || topic === void 0 ? void 0 : topic.questions[questionIndex];\n    if (!question) return null;\n    return {\n      category: category.category,\n      subcategory: subcategory.subcategory,\n      topic: topic.topic,\n      question,\n      questionId: `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`\n    };\n  }, [state.currentPosition, state.questionsData]);\n  const getCurrentQuestion = useCallback(() => {\n    const data = getCurrentQuestionData();\n    return (data === null || data === void 0 ? void 0 : data.question) || null;\n  }, [getCurrentQuestionData]);\n  const navigateToNext = useCallback(async () => {\n    const {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex,\n      questionIndex\n    } = state.currentPosition;\n    const category = state.questionsData[categoryIndex];\n    if (!category) return;\n    const subcategory = category.subcategories[subcategoryIndex];\n    const topic = subcategory === null || subcategory === void 0 ? void 0 : subcategory.topics[topicIndex];\n    if (!topic) return;\n    let newPosition = {\n      ...state.currentPosition\n    };\n    if (questionIndex < topic.questions.length - 1) {\n      newPosition.questionIndex = questionIndex + 1;\n    } else if (topicIndex < subcategory.topics.length - 1) {\n      newPosition.topicIndex = topicIndex + 1;\n      newPosition.questionIndex = 0;\n    } else if (subcategoryIndex < category.subcategories.length - 1) {\n      newPosition.subcategoryIndex = subcategoryIndex + 1;\n      newPosition.topicIndex = 0;\n      newPosition.questionIndex = 0;\n    } else if (categoryIndex < state.questionsData.length - 1) {\n      newPosition.categoryIndex = categoryIndex + 1;\n      newPosition.subcategoryIndex = 0;\n      newPosition.topicIndex = 0;\n      newPosition.questionIndex = 0;\n    } else {\n      dispatch({\n        type: 'SET_COMPLETED',\n        payload: true\n      });\n      return;\n    }\n    dispatch({\n      type: 'SET_CURRENT_POSITION',\n      payload: newPosition\n    });\n    if (state.sessionId) {\n      try {\n        await api.updateUserProgress(state.sessionId, {\n          currentCategory: newPosition.categoryIndex,\n          currentSubcategory: newPosition.subcategoryIndex,\n          currentTopic: newPosition.topicIndex,\n          currentQuestion: newPosition.questionIndex\n        });\n      } catch (error) {\n        console.error('Failed to save progress:', error);\n      }\n    }\n  }, [state.currentPosition, state.questionsData, state.sessionId]);\n  const navigateToPrevious = useCallback(async () => {\n    const {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex,\n      questionIndex\n    } = state.currentPosition;\n    let newPosition = {\n      ...state.currentPosition\n    };\n    if (questionIndex > 0) {\n      newPosition.questionIndex = questionIndex - 1;\n    } else if (topicIndex > 0) {\n      const prevTopic = state.questionsData[categoryIndex].subcategories[subcategoryIndex].topics[topicIndex - 1];\n      newPosition.topicIndex = topicIndex - 1;\n      newPosition.questionIndex = prevTopic.questions.length - 1;\n    } else if (subcategoryIndex > 0) {\n      const prevSubcategory = state.questionsData[categoryIndex].subcategories[subcategoryIndex - 1];\n      const lastTopic = prevSubcategory.topics[prevSubcategory.topics.length - 1];\n      newPosition.subcategoryIndex = subcategoryIndex - 1;\n      newPosition.topicIndex = prevSubcategory.topics.length - 1;\n      newPosition.questionIndex = lastTopic.questions.length - 1;\n    } else if (categoryIndex > 0) {\n      const prevCategory = state.questionsData[categoryIndex - 1];\n      const lastSubcategory = prevCategory.subcategories[prevCategory.subcategories.length - 1];\n      const lastTopic = lastSubcategory.topics[lastSubcategory.topics.length - 1];\n      newPosition.categoryIndex = categoryIndex - 1;\n      newPosition.subcategoryIndex = prevCategory.subcategories.length - 1;\n      newPosition.topicIndex = lastSubcategory.topics.length - 1;\n      newPosition.questionIndex = lastTopic.questions.length - 1;\n    }\n    dispatch({\n      type: 'SET_CURRENT_POSITION',\n      payload: newPosition\n    });\n    if (state.sessionId) {\n      try {\n        await api.updateUserProgress(state.sessionId, {\n          currentCategory: newPosition.categoryIndex,\n          currentSubcategory: newPosition.subcategoryIndex,\n          currentTopic: newPosition.topicIndex,\n          currentQuestion: newPosition.questionIndex\n        });\n      } catch (error) {\n        console.error('Failed to save progress:', error);\n      }\n    }\n  }, [state.currentPosition, state.questionsData, state.sessionId]);\n  const calculateProgress = useCallback(() => {\n    const totalQuestions = state.progress.totalQuestions;\n    // Filter out attention check responses from the count\n    const completedQuestions = Array.from(state.responses.keys()).filter(questionId => !questionId.startsWith('ATTENTION_CHECK_')).length;\n    return totalQuestions > 0 ? completedQuestions / totalQuestions * 100 : 0;\n  }, [state.progress.totalQuestions, state.responses]);\n  const getTotalQuestionsInCurrentTopic = useCallback(() => {\n    var _state$questionsData$, _state$questionsData$2;\n    const {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex\n    } = state.currentPosition;\n    const topic = (_state$questionsData$ = state.questionsData[categoryIndex]) === null || _state$questionsData$ === void 0 ? void 0 : (_state$questionsData$2 = _state$questionsData$.subcategories[subcategoryIndex]) === null || _state$questionsData$2 === void 0 ? void 0 : _state$questionsData$2.topics[topicIndex];\n    return (topic === null || topic === void 0 ? void 0 : topic.questions.length) || 0;\n  }, [state.currentPosition, state.questionsData]);\n  const getCompletedQuestionsInCurrentTopic = useCallback(() => {\n    var _state$questionsData$3, _state$questionsData$4;\n    const {\n      categoryIndex,\n      subcategoryIndex,\n      topicIndex\n    } = state.currentPosition;\n    let completed = 0;\n    const topic = (_state$questionsData$3 = state.questionsData[categoryIndex]) === null || _state$questionsData$3 === void 0 ? void 0 : (_state$questionsData$4 = _state$questionsData$3.subcategories[subcategoryIndex]) === null || _state$questionsData$4 === void 0 ? void 0 : _state$questionsData$4.topics[topicIndex];\n    if (!topic) return 0;\n    topic.questions.forEach((_, questionIndex) => {\n      const questionId = `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\n      if (state.responses.has(questionId)) {\n        completed++;\n      }\n    });\n    return completed;\n  }, [state.currentPosition, state.questionsData, state.responses]);\n\n  // Reset session function\n  const resetSession = useCallback(() => {\n    localStorage.removeItem('culturalSurveySessionId');\n    localStorage.removeItem('culturalSurveyStartTime');\n    if (timerInterval) {\n      clearInterval(timerInterval);\n      setTimerInterval(null);\n    }\n    surveyStartTimeRef.current = 0;\n    dispatch({\n      type: 'RESET_FORM'\n    });\n  }, [timerInterval]);\n  const value = {\n    state,\n    dispatch,\n    createUserSession,\n    saveResponse,\n    navigateToNext,\n    navigateToPrevious,\n    calculateProgress,\n    getCurrentQuestion,\n    getCurrentQuestionData,\n    getTotalQuestionsInCurrentTopic,\n    getCompletedQuestionsInCurrentTopic,\n    loadUserSession,\n    navigateToPosition,\n    resetSession,\n    startSurveyTimer,\n    resumeSurveyTimer,\n    formatTimeElapsed,\n    setAttentionCheckFailed,\n    setTiming\n  };\n  return /*#__PURE__*/_jsxDEV(FormContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 705,\n    columnNumber: 5\n  }, this);\n}\n_s(FormProvider, \"jYCemIOzgXhA7Ujm8que1/xIvcw=\");\n_c = FormProvider;\nexport function useForm() {\n  _s2();\n  const context = useContext(FormContext);\n  if (context === undefined) {\n    throw new Error('useForm must be used within a FormProvider');\n  }\n  return context;\n}\n_s2(useForm, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"FormProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useCallback","useRef","useState","loadQuestionsData","api","jsxDEV","_jsxDEV","TIMER_UPDATE_INTERVAL","initialState","sessionId","userInfo","currentPosition","categoryIndex","subcategoryIndex","topicIndex","questionIndex","responses","Map","progress","currentCategory","currentSubcategory","currentTopic","currentQuestion","completedQuestions","totalQuestions","completedTopics","attentionChecksPassed","attentionChecksFailed","isLoading","error","questionsData","startTime","lastSaveTime","isCompleted","surveyStartTime","surveyTimeElapsed","surveyExpired","showTimeWarning","showTimeCritical","attentionCheckFailed","timing","formReducer","state","action","type","payload","newResponses","set","questionId","responseMap","forEach","response","Date","now","timeElapsed","FormContext","undefined","FormProvider","children","_s","dispatch","hasLoadedQuestions","isLoadingSession","timerInterval","setTimerInterval","surveyStartTimeRef","current","loadData","console","log","data","length","getTotalQuestions","reduce","total","category","subcategories","subTotal","subcategory","topics","topicTotal","topic","questions","startSurveyTimer","toISOString","clearInterval","interval","setInterval","elapsed","resumeSurveyTimer","formatTimeElapsed","milliseconds","totalSeconds","Math","floor","minutes","seconds","toString","padStart","setAttentionCheckFailed","failed","setTiming","createUserSession","createUser","serverStartTime","startedAt","completedAt","totalTimeSeconds","totalTimeFormatted","localStorage","setItem","_error$response","_error$response$data","errorMessage","loadUserSession","user","getUser","getUserResponses","updatedProgress","nextPosition","findNextUnansweredQuestion","savedStartTime","getItem","parseInt","answeredQuestions","Set","map","r","has","lastCategory","lastSubcategory","lastTopic","saveResponse","wasNewResponse","isActualQuestion","startsWith","Array","from","keys","filter","navigateToPosition","newPosition","updateUserProgress","getCurrentQuestionData","question","getCurrentQuestion","navigateToNext","navigateToPrevious","prevTopic","prevSubcategory","prevCategory","calculateProgress","getTotalQuestionsInCurrentTopic","_state$questionsData$","_state$questionsData$2","getCompletedQuestionsInCurrentTopic","_state$questionsData$3","_state$questionsData$4","completed","_","resetSession","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useForm","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/sangm/OneDrive - Brock University/CommonsenseForm/client/src/context/FormContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode, useCallback, useRef, useState } from 'react';\r\nimport { FormState, UserInfo, QuestionResponse, Category, Progress, SurveyTiming } from '../types/index.ts';\r\nimport { loadQuestionsData } from '../utils/helpers.ts';\r\nimport * as api from '../services/api.ts';\r\n\r\n// Timer constants - simplified\r\nconst TIMER_UPDATE_INTERVAL = 1000; // Update every second\r\n\r\ntype FormAction =\r\n  | { type: 'SET_LOADING'; payload: boolean }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'SET_SESSION_ID'; payload: string }\r\n  | { type: 'SET_USER_INFO'; payload: UserInfo }\r\n  | { type: 'SET_QUESTIONS_DATA'; payload: Category[] }\r\n  | { type: 'SET_CURRENT_POSITION'; payload: { categoryIndex: number; subcategoryIndex: number; topicIndex: number; questionIndex: number } }\r\n  | { type: 'ADD_RESPONSE'; payload: QuestionResponse }\r\n  | { type: 'UPDATE_PROGRESS'; payload: Partial<Progress> }\r\n  | { type: 'SET_RESPONSES'; payload: QuestionResponse[] }\r\n  | { type: 'SET_START_TIME'; payload: number }\r\n  | { type: 'SET_LAST_SAVE_TIME'; payload: number }\r\n  | { type: 'SET_COMPLETED'; payload: boolean }\r\n  | { type: 'RESET_FORM' }\r\n  // Simplified timer actions\r\n  | { type: 'START_SURVEY_TIMER' }\r\n  | { type: 'UPDATE_TIMER'; payload: { timeElapsed: number } }\r\n  // Attention check failure\r\n  | { type: 'SET_ATTENTION_CHECK_FAILED'; payload: boolean }\r\n  // NEW: Timing action\r\n  | { type: 'SET_TIMING'; payload: SurveyTiming | null };\r\n\r\nconst initialState: FormState = {\r\n  sessionId: null,\r\n  userInfo: null,\r\n  currentPosition: {\r\n    categoryIndex: 0,\r\n    subcategoryIndex: 0,\r\n    topicIndex: 0,\r\n    questionIndex: 0\r\n  },\r\n  responses: new Map(),\r\n  progress: {\r\n    currentCategory: 0,\r\n    currentSubcategory: 0,\r\n    currentTopic: 0,\r\n    currentQuestion: 0,\r\n    completedQuestions: 0,\r\n    totalQuestions: 0,\r\n    completedTopics: [],\r\n    attentionChecksPassed: 0,\r\n    attentionChecksFailed: 0\r\n  },\r\n  isLoading: false,\r\n  error: null,\r\n  questionsData: [],\r\n  startTime: 0,\r\n  lastSaveTime: 0,\r\n  isCompleted: false,\r\n  // Simplified timer state\r\n  surveyStartTime: 0,\r\n  surveyTimeElapsed: 0, // Count up from 0\r\n  surveyExpired: false, // Keep this false always now\r\n  showTimeWarning: false, // Always false now\r\n  showTimeCritical: false, // Always false now\r\n  // Attention check failure state\r\n  attentionCheckFailed: false,\r\n  // NEW: Timing state\r\n  timing: null,\r\n};\r\n\r\nfunction formReducer(state: FormState, action: FormAction): FormState {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    case 'SET_SESSION_ID':\r\n      return { ...state, sessionId: action.payload };\r\n    case 'SET_USER_INFO':\r\n      return { ...state, userInfo: action.payload };\r\n    case 'SET_QUESTIONS_DATA':\r\n      return { ...state, questionsData: action.payload };\r\n    case 'SET_CURRENT_POSITION':\r\n      return { ...state, currentPosition: action.payload };\r\n    case 'ADD_RESPONSE':\r\n      const newResponses = new Map(state.responses);\r\n      newResponses.set(action.payload.questionId, action.payload);\r\n      return { ...state, responses: newResponses };\r\n    case 'UPDATE_PROGRESS':\r\n      return { \r\n        ...state, \r\n        progress: { ...state.progress, ...action.payload }\r\n      };\r\n    case 'SET_RESPONSES':\r\n      const responseMap = new Map();\r\n      action.payload.forEach(response => {\r\n        responseMap.set(response.questionId, response);\r\n      });\r\n      return { ...state, responses: responseMap };\r\n    case 'SET_START_TIME':\r\n      return { ...state, startTime: action.payload };\r\n    case 'SET_LAST_SAVE_TIME':\r\n      return { ...state, lastSaveTime: action.payload };\r\n    case 'SET_COMPLETED':\r\n      return { ...state, isCompleted: action.payload };\r\n    case 'RESET_FORM':\r\n      return { ...initialState, questionsData: state.questionsData };\r\n    // Simplified timer cases\r\n    case 'START_SURVEY_TIMER':\r\n      return {\r\n        ...state,\r\n        surveyStartTime: Date.now(),\r\n        surveyTimeElapsed: 0,\r\n        showTimeWarning: false,\r\n        showTimeCritical: false,\r\n        surveyExpired: false\r\n      };\r\n    case 'UPDATE_TIMER':\r\n      return {\r\n        ...state,\r\n        surveyTimeElapsed: action.payload.timeElapsed\r\n      };\r\n    // Attention check failure case\r\n    case 'SET_ATTENTION_CHECK_FAILED':\r\n      return {\r\n        ...state,\r\n        attentionCheckFailed: action.payload\r\n      };\r\n    // NEW: Timing case\r\n    case 'SET_TIMING':\r\n      return { ...state, timing: action.payload };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Updated interface\r\ninterface FormContextType {\r\n  state: FormState;\r\n  dispatch: React.Dispatch<FormAction>;\r\n  createUserSession: (userInfo: UserInfo) => Promise<void>;\r\n  saveResponse: (response: QuestionResponse) => Promise<void>;\r\n  navigateToNext: () => void;\r\n  navigateToPrevious: () => void;\r\n  calculateProgress: () => number;\r\n  getCurrentQuestion: () => string | null;\r\n  getCurrentQuestionData: () => {\r\n    category: string;\r\n    subcategory: string;\r\n    topic: string;\r\n    question: string;\r\n    questionId: string;\r\n  } | null;\r\n  getTotalQuestionsInCurrentTopic: () => number;\r\n  getCompletedQuestionsInCurrentTopic: () => number;\r\n  loadUserSession: (sessionId: string) => Promise<void>;\r\n  navigateToPosition: (categoryIndex: number, subcategoryIndex: number, topicIndex: number, questionIndex: number) => Promise<void>;\r\n  resetSession: () => void;\r\n  // Simplified timer functions\r\n  startSurveyTimer: () => void;\r\n  resumeSurveyTimer: (startTime: number) => void;\r\n  formatTimeElapsed: (milliseconds: number) => string;\r\n  // Attention check failure function\r\n  setAttentionCheckFailed: (failed: boolean) => void;\r\n  // NEW: Timing function\r\n  setTiming: (timing: SurveyTiming | null) => void;\r\n}\r\n\r\nconst FormContext = createContext<FormContextType | undefined>(undefined);\r\n\r\nexport function FormProvider({ children }: { children: ReactNode }) {\r\n  const [state, dispatch] = useReducer(formReducer, initialState);\r\n  const hasLoadedQuestions = useRef(false);\r\n  const isLoadingSession = useRef(false);\r\n  const [timerInterval, setTimerInterval] = useState<ReturnType<typeof setInterval> | null>(null);\r\n  const surveyStartTimeRef = useRef<number>(0);\r\n\r\n  // Load questions data only once\r\n  useEffect(() => {\r\n    if (hasLoadedQuestions.current) return;\r\n    \r\n    const loadData = async () => {\r\n      try {\r\n        hasLoadedQuestions.current = true;\r\n        dispatch({ type: 'SET_LOADING', payload: true });\r\n        dispatch({ type: 'SET_ERROR', payload: null });\r\n        \r\n        console.log('FormContext: Loading questions data...');\r\n        const data = await loadQuestionsData();\r\n        console.log('FormContext: Questions loaded:', data.length, 'categories');\r\n        \r\n        dispatch({ type: 'SET_QUESTIONS_DATA', payload: data });\r\n        \r\n        const totalQuestions = getTotalQuestions(data);\r\n        console.log('FormContext: Total questions calculated:', totalQuestions);\r\n        \r\n        dispatch({ type: 'UPDATE_PROGRESS', payload: { totalQuestions } });\r\n        \r\n      } catch (error) {\r\n        console.error('FormContext: Error loading questions:', error);\r\n        dispatch({ type: 'SET_ERROR', payload: 'Failed to load questions data. Please refresh the page.' });\r\n        hasLoadedQuestions.current = false;\r\n      } finally {\r\n        dispatch({ type: 'SET_LOADING', payload: false });\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  // Calculate total questions\r\n  const getTotalQuestions = (questionsData: Category[]): number => {\r\n    return questionsData.reduce((total, category) => {\r\n      return total + category.subcategories.reduce((subTotal, subcategory) => {\r\n        return subTotal + subcategory.topics.reduce((topicTotal, topic) => {\r\n          return topicTotal + topic.questions.length;\r\n        }, 0);\r\n      }, 0);\r\n    }, 0);\r\n  };\r\n\r\n  // Simplified start timer function - counts UP\r\n  const startSurveyTimer = useCallback(() => {\r\n    const startTime = Date.now();\r\n    console.log('Starting survey timer at:', new Date(startTime).toISOString());\r\n    \r\n    dispatch({ type: 'START_SURVEY_TIMER' });\r\n    surveyStartTimeRef.current = startTime;\r\n    \r\n    // Clear any existing timer\r\n    if (timerInterval) {\r\n      clearInterval(timerInterval);\r\n    }\r\n\r\n    // Start new timer that counts UP\r\n    const interval = setInterval(() => {\r\n      const now = Date.now();\r\n      const elapsed = now - surveyStartTimeRef.current;\r\n      \r\n      dispatch({ \r\n        type: 'UPDATE_TIMER', \r\n        payload: { \r\n          timeElapsed: elapsed\r\n        } \r\n      });\r\n    }, TIMER_UPDATE_INTERVAL);\r\n\r\n    setTimerInterval(interval);\r\n  }, [timerInterval]);\r\n\r\n  // Simplified resume timer function\r\n  const resumeSurveyTimer = useCallback((startTime: number) => {\r\n    console.log('Resuming survey timer from:', new Date(startTime).toISOString());\r\n    \r\n    surveyStartTimeRef.current = startTime;\r\n    const now = Date.now();\r\n    const elapsed = now - startTime;\r\n\r\n    dispatch({\r\n      type: 'UPDATE_TIMER',\r\n      payload: {\r\n        timeElapsed: elapsed\r\n      }\r\n    });\r\n\r\n    // Clear any existing timer\r\n    if (timerInterval) {\r\n      clearInterval(timerInterval);\r\n    }\r\n\r\n    // Start timer continuing from where it left off\r\n    const interval = setInterval(() => {\r\n      const now = Date.now();\r\n      const elapsed = now - surveyStartTimeRef.current;\r\n      \r\n      dispatch({ \r\n        type: 'UPDATE_TIMER', \r\n        payload: { \r\n          timeElapsed: elapsed\r\n        } \r\n      });\r\n    }, TIMER_UPDATE_INTERVAL);\r\n\r\n    setTimerInterval(interval);\r\n  }, [timerInterval]);\r\n\r\n  // Clean up timer on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (timerInterval) {\r\n        clearInterval(timerInterval);\r\n      }\r\n    };\r\n  }, [timerInterval]);\r\n\r\n  // Simple format time function (shows elapsed time)\r\n  const formatTimeElapsed = useCallback((milliseconds: number): string => {\r\n    const totalSeconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(totalSeconds / 60);\r\n    const seconds = totalSeconds % 60;\r\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\r\n  }, []);\r\n\r\n  // Attention check failure function\r\n  const setAttentionCheckFailed = useCallback((failed: boolean) => {\r\n    dispatch({ type: 'SET_ATTENTION_CHECK_FAILED', payload: failed });\r\n  }, []);\r\n\r\n  // NEW: Timing function\r\n  const setTiming = useCallback((timing: SurveyTiming | null) => {\r\n    dispatch({ type: 'SET_TIMING', payload: timing });\r\n  }, []);\r\n\r\n  // Create user session - UPDATED to handle timing\r\n  const createUserSession = useCallback(async (userInfo: UserInfo) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      console.log('FormContext: Creating user session with:', userInfo);\r\n      \r\n      const response = await api.createUser(userInfo);\r\n      \r\n      dispatch({ type: 'SET_SESSION_ID', payload: response.sessionId });\r\n      dispatch({ type: 'SET_USER_INFO', payload: userInfo });\r\n      \r\n      // NEW: Set timing if provided from server\r\n      if (response.startTime) {\r\n        const serverStartTime = new Date(response.startTime);\r\n        dispatch({ type: 'SET_TIMING', payload: {\r\n          startedAt: serverStartTime,\r\n          completedAt: null,\r\n          totalTimeSeconds: null,\r\n          totalTimeFormatted: null\r\n        }});\r\n        console.log('FormContext: Server timing initialized:', serverStartTime.toISOString());\r\n      }\r\n      \r\n      const startTime = Date.now();\r\n      dispatch({ type: 'SET_START_TIME', payload: startTime });\r\n      \r\n      // Store session ID and start time in localStorage\r\n      localStorage.setItem('culturalSurveySessionId', response.sessionId);\r\n      localStorage.setItem('culturalSurveyStartTime', startTime.toString());\r\n      \r\n      // Start the survey timer\r\n      console.log('FormContext: Creating user session and starting timer');\r\n      startSurveyTimer();\r\n      \r\n      console.log('FormContext: User session created successfully');\r\n      \r\n    } catch (error: any) {\r\n      console.error('FormContext: Error creating user session:', error);\r\n      \r\n      const errorMessage = error.response?.data?.error || 'Failed to create session';\r\n      dispatch({ type: 'SET_ERROR', payload: errorMessage });\r\n      \r\n      throw error;\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  }, [startSurveyTimer]);\r\n\r\n  // Rest of your existing functions remain the same...\r\n  const loadUserSession = useCallback(async (sessionId: string) => {\r\n    if (isLoadingSession.current) return;\r\n    \r\n    try {\r\n      isLoadingSession.current = true;\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      \r\n      console.log('FormContext: Loading user session...');\r\n      const user = await api.getUser(sessionId);\r\n      \r\n      dispatch({ type: 'SET_SESSION_ID', payload: sessionId });\r\n      dispatch({ type: 'SET_USER_INFO', payload: user.userInfo });\r\n      dispatch({ type: 'SET_COMPLETED', payload: user.isCompleted });\r\n      \r\n      // NEW: Load timing data if available\r\n      if (user.timing) {\r\n        dispatch({ type: 'SET_TIMING', payload: {\r\n          startedAt: new Date(user.timing.startedAt),\r\n          completedAt: user.timing.completedAt ? new Date(user.timing.completedAt) : null,\r\n          totalTimeSeconds: user.timing.totalTimeSeconds,\r\n          totalTimeFormatted: user.timing.totalTimeFormatted\r\n        }});\r\n        console.log('FormContext: Timing data loaded from user session');\r\n      }\r\n      \r\n      // Load responses\r\n      console.log('FormContext: Loading user responses...');\r\n      const responses = await api.getUserResponses(sessionId);\r\n      console.log('FormContext: Responses loaded:', responses.length);\r\n      \r\n      dispatch({ type: 'SET_RESPONSES', payload: responses });\r\n      \r\n      // Recalculate total questions from current data\r\n      const totalQuestions = getTotalQuestions(state.questionsData);\r\n      \r\n      const updatedProgress = {\r\n        ...user.progress,\r\n        totalQuestions,\r\n        completedQuestions: responses.length\r\n      };\r\n      \r\n      dispatch({ type: 'UPDATE_PROGRESS', payload: updatedProgress });\r\n      \r\n      // Find the correct starting position\r\n      const nextPosition = findNextUnansweredQuestion(responses, state.questionsData);\r\n      console.log('FormContext: Setting position to:', nextPosition);\r\n      \r\n      dispatch({ type: 'SET_CURRENT_POSITION', payload: nextPosition });\r\n      \r\n      // Resume timer if not completed\r\n      if (!user.isCompleted) {\r\n        const savedStartTime = localStorage.getItem('culturalSurveyStartTime');\r\n        if (savedStartTime) {\r\n          resumeSurveyTimer(parseInt(savedStartTime));\r\n        } else {\r\n          // If no start time found, start fresh timer\r\n          localStorage.setItem('culturalSurveyStartTime', Date.now().toString());\r\n          startSurveyTimer();\r\n        }\r\n      }\r\n      \r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to load user session' });\r\n      throw error;\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      isLoadingSession.current = false;\r\n    }\r\n  }, [state.questionsData, resumeSurveyTimer, startSurveyTimer]);\r\n\r\n  const findNextUnansweredQuestion = useCallback((responses: QuestionResponse[], questionsData: Category[]) => {\r\n    const answeredQuestions = new Set(responses.map(r => r.questionId));\r\n    \r\n    for (let categoryIndex = 0; categoryIndex < questionsData.length; categoryIndex++) {\r\n      const category = questionsData[categoryIndex];\r\n      \r\n      for (let subcategoryIndex = 0; subcategoryIndex < category.subcategories.length; subcategoryIndex++) {\r\n        const subcategory = category.subcategories[subcategoryIndex];\r\n        \r\n        for (let topicIndex = 0; topicIndex < subcategory.topics.length; topicIndex++) {\r\n          const topic = subcategory.topics[topicIndex];\r\n          \r\n          for (let questionIndex = 0; questionIndex < topic.questions.length; questionIndex++) {\r\n            const questionId = `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\r\n            \r\n            if (!answeredQuestions.has(questionId)) {\r\n              return {\r\n                categoryIndex,\r\n                subcategoryIndex,\r\n                topicIndex,\r\n                questionIndex\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (questionsData.length > 0) {\r\n      const lastCategory = questionsData[questionsData.length - 1];\r\n      const lastSubcategory = lastCategory.subcategories[lastCategory.subcategories.length - 1];\r\n      const lastTopic = lastSubcategory.topics[lastSubcategory.topics.length - 1];\r\n      \r\n      return {\r\n        categoryIndex: questionsData.length - 1,\r\n        subcategoryIndex: lastCategory.subcategories.length - 1,\r\n        topicIndex: lastSubcategory.topics.length - 1,\r\n        questionIndex: lastTopic.questions.length - 1\r\n      };\r\n    }\r\n    \r\n    return { categoryIndex: 0, subcategoryIndex: 0, topicIndex: 0, questionIndex: 0 };\r\n  }, []);\r\n\r\n  const saveResponse = useCallback(async (response: QuestionResponse) => {\r\n  try {\r\n    console.log('FormContext: Saving response:', response);\r\n    await api.saveResponse(response);\r\n    dispatch({ type: 'ADD_RESPONSE', payload: response });\r\n    dispatch({ type: 'SET_LAST_SAVE_TIME', payload: Date.now() });\r\n    \r\n    // Only count non-attention check responses for progress\r\n    const wasNewResponse = !state.responses.has(response.questionId);\r\n    const isActualQuestion = !response.questionId.startsWith('ATTENTION_CHECK_');\r\n    \r\n    if (wasNewResponse && isActualQuestion) {\r\n      const completedQuestions = Array.from(state.responses.keys())\r\n        .filter(questionId => !questionId.startsWith('ATTENTION_CHECK_'))\r\n        .length + 1; // +1 for the response we just added\r\n      \r\n      dispatch({ type: 'UPDATE_PROGRESS', payload: { completedQuestions } });\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('FormContext: Error saving response:', error);\r\n    dispatch({ type: 'SET_ERROR', payload: 'Failed to save response' });\r\n    throw error;\r\n  }\r\n}, [state.responses]);\r\n\r\n  const navigateToPosition = useCallback(async (categoryIndex: number, subcategoryIndex: number, topicIndex: number, questionIndex: number) => {\r\n    const newPosition = { categoryIndex, subcategoryIndex, topicIndex, questionIndex };\r\n    dispatch({ type: 'SET_CURRENT_POSITION', payload: newPosition });\r\n\r\n    if (state.sessionId) {\r\n      try {\r\n        await api.updateUserProgress(state.sessionId, {\r\n          currentCategory: categoryIndex,\r\n          currentSubcategory: subcategoryIndex,\r\n          currentTopic: topicIndex,\r\n          currentQuestion: questionIndex\r\n        });\r\n      } catch (error) {\r\n        console.error('Failed to save navigation progress:', error);\r\n      }\r\n    }\r\n  }, [state.sessionId]);\r\n\r\n  const getCurrentQuestionData = useCallback(() => {\r\n    const { categoryIndex, subcategoryIndex, topicIndex, questionIndex } = state.currentPosition;\r\n    \r\n    if (!state.questionsData[categoryIndex]) return null;\r\n    \r\n    const category = state.questionsData[categoryIndex];\r\n    const subcategory = category.subcategories[subcategoryIndex];\r\n    const topic = subcategory?.topics[topicIndex];\r\n    const question = topic?.questions[questionIndex];\r\n    \r\n    if (!question) return null;\r\n    \r\n    return {\r\n      category: category.category,\r\n      subcategory: subcategory.subcategory,\r\n      topic: topic.topic,\r\n      question,\r\n      questionId: `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`\r\n    };\r\n  }, [state.currentPosition, state.questionsData]);\r\n\r\n  const getCurrentQuestion = useCallback(() => {\r\n    const data = getCurrentQuestionData();\r\n    return data?.question || null;\r\n  }, [getCurrentQuestionData]);\r\n\r\n  const navigateToNext = useCallback(async () => {\r\n    const { categoryIndex, subcategoryIndex, topicIndex, questionIndex } = state.currentPosition;\r\n    const category = state.questionsData[categoryIndex];\r\n    \r\n    if (!category) return;\r\n    \r\n    const subcategory = category.subcategories[subcategoryIndex];\r\n    const topic = subcategory?.topics[topicIndex];\r\n    \r\n    if (!topic) return;\r\n\r\n    let newPosition = { ...state.currentPosition };\r\n\r\n    if (questionIndex < topic.questions.length - 1) {\r\n      newPosition.questionIndex = questionIndex + 1;\r\n    } else if (topicIndex < subcategory.topics.length - 1) {\r\n      newPosition.topicIndex = topicIndex + 1;\r\n      newPosition.questionIndex = 0;\r\n    } else if (subcategoryIndex < category.subcategories.length - 1) {\r\n      newPosition.subcategoryIndex = subcategoryIndex + 1;\r\n      newPosition.topicIndex = 0;\r\n      newPosition.questionIndex = 0;\r\n    } else if (categoryIndex < state.questionsData.length - 1) {\r\n      newPosition.categoryIndex = categoryIndex + 1;\r\n      newPosition.subcategoryIndex = 0;\r\n      newPosition.topicIndex = 0;\r\n      newPosition.questionIndex = 0;\r\n    } else {\r\n      dispatch({ type: 'SET_COMPLETED', payload: true });\r\n      return;\r\n    }\r\n\r\n    dispatch({ type: 'SET_CURRENT_POSITION', payload: newPosition });\r\n\r\n    if (state.sessionId) {\r\n      try {\r\n        await api.updateUserProgress(state.sessionId, {\r\n          currentCategory: newPosition.categoryIndex,\r\n          currentSubcategory: newPosition.subcategoryIndex,\r\n          currentTopic: newPosition.topicIndex,\r\n          currentQuestion: newPosition.questionIndex\r\n        });\r\n      } catch (error) {\r\n        console.error('Failed to save progress:', error);\r\n      }\r\n    }\r\n  }, [state.currentPosition, state.questionsData, state.sessionId]);\r\n\r\n  const navigateToPrevious = useCallback(async () => {\r\n    const { categoryIndex, subcategoryIndex, topicIndex, questionIndex } = state.currentPosition;\r\n    \r\n    let newPosition = { ...state.currentPosition };\r\n\r\n    if (questionIndex > 0) {\r\n      newPosition.questionIndex = questionIndex - 1;\r\n    } else if (topicIndex > 0) {\r\n      const prevTopic = state.questionsData[categoryIndex].subcategories[subcategoryIndex].topics[topicIndex - 1];\r\n      newPosition.topicIndex = topicIndex - 1;\r\n      newPosition.questionIndex = prevTopic.questions.length - 1;\r\n    } else if (subcategoryIndex > 0) {\r\n      const prevSubcategory = state.questionsData[categoryIndex].subcategories[subcategoryIndex - 1];\r\n      const lastTopic = prevSubcategory.topics[prevSubcategory.topics.length - 1];\r\n      newPosition.subcategoryIndex = subcategoryIndex - 1;\r\n      newPosition.topicIndex = prevSubcategory.topics.length - 1;\r\n      newPosition.questionIndex = lastTopic.questions.length - 1;\r\n    } else if (categoryIndex > 0) {\r\n      const prevCategory = state.questionsData[categoryIndex - 1];\r\n      const lastSubcategory = prevCategory.subcategories[prevCategory.subcategories.length - 1];\r\n      const lastTopic = lastSubcategory.topics[lastSubcategory.topics.length - 1];\r\n      newPosition.categoryIndex = categoryIndex - 1;\r\n      newPosition.subcategoryIndex = prevCategory.subcategories.length - 1;\r\n      newPosition.topicIndex = lastSubcategory.topics.length - 1;\r\n      newPosition.questionIndex = lastTopic.questions.length - 1;\r\n    }\r\n\r\n    dispatch({ type: 'SET_CURRENT_POSITION', payload: newPosition });\r\n\r\n    if (state.sessionId) {\r\n      try {\r\n        await api.updateUserProgress(state.sessionId, {\r\n          currentCategory: newPosition.categoryIndex,\r\n          currentSubcategory: newPosition.subcategoryIndex,\r\n          currentTopic: newPosition.topicIndex,\r\n          currentQuestion: newPosition.questionIndex\r\n        });\r\n      } catch (error) {\r\n        console.error('Failed to save progress:', error);\r\n      }\r\n    }\r\n  }, [state.currentPosition, state.questionsData, state.sessionId]);\r\n\r\n  const calculateProgress = useCallback(() => {\r\n  const totalQuestions = state.progress.totalQuestions;\r\n  // Filter out attention check responses from the count\r\n  const completedQuestions = Array.from(state.responses.keys())\r\n    .filter(questionId => !questionId.startsWith('ATTENTION_CHECK_'))\r\n    .length;\r\n  return totalQuestions > 0 ? (completedQuestions / totalQuestions) * 100 : 0;\r\n}, [state.progress.totalQuestions, state.responses]);\r\n\r\n  const getTotalQuestionsInCurrentTopic = useCallback(() => {\r\n    const { categoryIndex, subcategoryIndex, topicIndex } = state.currentPosition;\r\n    const topic = state.questionsData[categoryIndex]?.subcategories[subcategoryIndex]?.topics[topicIndex];\r\n    return topic?.questions.length || 0;\r\n  }, [state.currentPosition, state.questionsData]);\r\n\r\n  const getCompletedQuestionsInCurrentTopic = useCallback(() => {\r\n    const { categoryIndex, subcategoryIndex, topicIndex } = state.currentPosition;\r\n    let completed = 0;\r\n    \r\n    const topic = state.questionsData[categoryIndex]?.subcategories[subcategoryIndex]?.topics[topicIndex];\r\n    if (!topic) return 0;\r\n    \r\n    topic.questions.forEach((_, questionIndex) => {\r\n      const questionId = `${categoryIndex}-${subcategoryIndex}-${topicIndex}-${questionIndex}`;\r\n      if (state.responses.has(questionId)) {\r\n        completed++;\r\n      }\r\n    });\r\n    \r\n    return completed;\r\n  }, [state.currentPosition, state.questionsData, state.responses]);\r\n\r\n  // Reset session function\r\n  const resetSession = useCallback(() => {\r\n    localStorage.removeItem('culturalSurveySessionId');\r\n    localStorage.removeItem('culturalSurveyStartTime');\r\n    if (timerInterval) {\r\n      clearInterval(timerInterval);\r\n      setTimerInterval(null);\r\n    }\r\n    surveyStartTimeRef.current = 0;\r\n    dispatch({ type: 'RESET_FORM' });\r\n  }, [timerInterval]);\r\n  \r\n  const value: FormContextType = {\r\n    state,\r\n    dispatch,\r\n    createUserSession,\r\n    saveResponse,\r\n    navigateToNext,\r\n    navigateToPrevious,\r\n    calculateProgress,\r\n    getCurrentQuestion,\r\n    getCurrentQuestionData,\r\n    getTotalQuestionsInCurrentTopic,\r\n    getCompletedQuestionsInCurrentTopic,\r\n    loadUserSession,\r\n    navigateToPosition,\r\n    resetSession,\r\n    startSurveyTimer,\r\n    resumeSurveyTimer,\r\n    formatTimeElapsed,\r\n    setAttentionCheckFailed,\r\n    setTiming,\r\n  };\r\n\r\n  return (\r\n    <FormContext.Provider value={value}>\r\n      {children}\r\n    </FormContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useForm() {\r\n  const context = useContext(FormContext);\r\n  if (context === undefined) {\r\n    throw new Error('useForm must be used within a FormProvider');\r\n  }\r\n  return context;\r\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,EAAaC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAEzH,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,OAAO,KAAKC,GAAG,MAAM,oBAAoB;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,qBAAqB,GAAG,IAAI,CAAC,CAAC;;AAwBpC,MAAMC,YAAuB,GAAG;EAC9BC,SAAS,EAAE,IAAI;EACfC,QAAQ,EAAE,IAAI;EACdC,eAAe,EAAE;IACfC,aAAa,EAAE,CAAC;IAChBC,gBAAgB,EAAE,CAAC;IACnBC,UAAU,EAAE,CAAC;IACbC,aAAa,EAAE;EACjB,CAAC;EACDC,SAAS,EAAE,IAAIC,GAAG,CAAC,CAAC;EACpBC,QAAQ,EAAE;IACRC,eAAe,EAAE,CAAC;IAClBC,kBAAkB,EAAE,CAAC;IACrBC,YAAY,EAAE,CAAC;IACfC,eAAe,EAAE,CAAC;IAClBC,kBAAkB,EAAE,CAAC;IACrBC,cAAc,EAAE,CAAC;IACjBC,eAAe,EAAE,EAAE;IACnBC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC;EACDC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EACXC,aAAa,EAAE,EAAE;EACjBC,SAAS,EAAE,CAAC;EACZC,YAAY,EAAE,CAAC;EACfC,WAAW,EAAE,KAAK;EAClB;EACAC,eAAe,EAAE,CAAC;EAClBC,iBAAiB,EAAE,CAAC;EAAE;EACtBC,aAAa,EAAE,KAAK;EAAE;EACtBC,eAAe,EAAE,KAAK;EAAE;EACxBC,gBAAgB,EAAE,KAAK;EAAE;EACzB;EACAC,oBAAoB,EAAE,KAAK;EAC3B;EACAC,MAAM,EAAE;AACV,CAAC;AAED,SAASC,WAAWA,CAACC,KAAgB,EAAEC,MAAkB,EAAa;EACpE,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,aAAa;MAChB,OAAO;QAAE,GAAGF,KAAK;QAAEd,SAAS,EAAEe,MAAM,CAACE;MAAQ,CAAC;IAChD,KAAK,WAAW;MACd,OAAO;QAAE,GAAGH,KAAK;QAAEb,KAAK,EAAEc,MAAM,CAACE;MAAQ,CAAC;IAC5C,KAAK,gBAAgB;MACnB,OAAO;QAAE,GAAGH,KAAK;QAAEjC,SAAS,EAAEkC,MAAM,CAACE;MAAQ,CAAC;IAChD,KAAK,eAAe;MAClB,OAAO;QAAE,GAAGH,KAAK;QAAEhC,QAAQ,EAAEiC,MAAM,CAACE;MAAQ,CAAC;IAC/C,KAAK,oBAAoB;MACvB,OAAO;QAAE,GAAGH,KAAK;QAAEZ,aAAa,EAAEa,MAAM,CAACE;MAAQ,CAAC;IACpD,KAAK,sBAAsB;MACzB,OAAO;QAAE,GAAGH,KAAK;QAAE/B,eAAe,EAAEgC,MAAM,CAACE;MAAQ,CAAC;IACtD,KAAK,cAAc;MACjB,MAAMC,YAAY,GAAG,IAAI7B,GAAG,CAACyB,KAAK,CAAC1B,SAAS,CAAC;MAC7C8B,YAAY,CAACC,GAAG,CAACJ,MAAM,CAACE,OAAO,CAACG,UAAU,EAAEL,MAAM,CAACE,OAAO,CAAC;MAC3D,OAAO;QAAE,GAAGH,KAAK;QAAE1B,SAAS,EAAE8B;MAAa,CAAC;IAC9C,KAAK,iBAAiB;MACpB,OAAO;QACL,GAAGJ,KAAK;QACRxB,QAAQ,EAAE;UAAE,GAAGwB,KAAK,CAACxB,QAAQ;UAAE,GAAGyB,MAAM,CAACE;QAAQ;MACnD,CAAC;IACH,KAAK,eAAe;MAClB,MAAMI,WAAW,GAAG,IAAIhC,GAAG,CAAC,CAAC;MAC7B0B,MAAM,CAACE,OAAO,CAACK,OAAO,CAACC,QAAQ,IAAI;QACjCF,WAAW,CAACF,GAAG,CAACI,QAAQ,CAACH,UAAU,EAAEG,QAAQ,CAAC;MAChD,CAAC,CAAC;MACF,OAAO;QAAE,GAAGT,KAAK;QAAE1B,SAAS,EAAEiC;MAAY,CAAC;IAC7C,KAAK,gBAAgB;MACnB,OAAO;QAAE,GAAGP,KAAK;QAAEX,SAAS,EAAEY,MAAM,CAACE;MAAQ,CAAC;IAChD,KAAK,oBAAoB;MACvB,OAAO;QAAE,GAAGH,KAAK;QAAEV,YAAY,EAAEW,MAAM,CAACE;MAAQ,CAAC;IACnD,KAAK,eAAe;MAClB,OAAO;QAAE,GAAGH,KAAK;QAAET,WAAW,EAAEU,MAAM,CAACE;MAAQ,CAAC;IAClD,KAAK,YAAY;MACf,OAAO;QAAE,GAAGrC,YAAY;QAAEsB,aAAa,EAAEY,KAAK,CAACZ;MAAc,CAAC;IAChE;IACA,KAAK,oBAAoB;MACvB,OAAO;QACL,GAAGY,KAAK;QACRR,eAAe,EAAEkB,IAAI,CAACC,GAAG,CAAC,CAAC;QAC3BlB,iBAAiB,EAAE,CAAC;QACpBE,eAAe,EAAE,KAAK;QACtBC,gBAAgB,EAAE,KAAK;QACvBF,aAAa,EAAE;MACjB,CAAC;IACH,KAAK,cAAc;MACjB,OAAO;QACL,GAAGM,KAAK;QACRP,iBAAiB,EAAEQ,MAAM,CAACE,OAAO,CAACS;MACpC,CAAC;IACH;IACA,KAAK,4BAA4B;MAC/B,OAAO;QACL,GAAGZ,KAAK;QACRH,oBAAoB,EAAEI,MAAM,CAACE;MAC/B,CAAC;IACH;IACA,KAAK,YAAY;MACf,OAAO;QAAE,GAAGH,KAAK;QAAEF,MAAM,EAAEG,MAAM,CAACE;MAAQ,CAAC;IAE7C;MACE,OAAOH,KAAK;EAChB;AACF;;AAEA;;AAgCA,MAAMa,WAAW,gBAAG3D,aAAa,CAA8B4D,SAAS,CAAC;AAEzE,OAAO,SAASC,YAAYA,CAAC;EAAEC;AAAkC,CAAC,EAAE;EAAAC,EAAA;EAClE,MAAM,CAACjB,KAAK,EAAEkB,QAAQ,CAAC,GAAG9D,UAAU,CAAC2C,WAAW,EAAEjC,YAAY,CAAC;EAC/D,MAAMqD,kBAAkB,GAAG5D,MAAM,CAAC,KAAK,CAAC;EACxC,MAAM6D,gBAAgB,GAAG7D,MAAM,CAAC,KAAK,CAAC;EACtC,MAAM,CAAC8D,aAAa,EAAEC,gBAAgB,CAAC,GAAG9D,QAAQ,CAAwC,IAAI,CAAC;EAC/F,MAAM+D,kBAAkB,GAAGhE,MAAM,CAAS,CAAC,CAAC;;EAE5C;EACAF,SAAS,CAAC,MAAM;IACd,IAAI8D,kBAAkB,CAACK,OAAO,EAAE;IAEhC,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACFN,kBAAkB,CAACK,OAAO,GAAG,IAAI;QACjCN,QAAQ,CAAC;UAAEhB,IAAI,EAAE,aAAa;UAAEC,OAAO,EAAE;QAAK,CAAC,CAAC;QAChDe,QAAQ,CAAC;UAAEhB,IAAI,EAAE,WAAW;UAAEC,OAAO,EAAE;QAAK,CAAC,CAAC;QAE9CuB,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;QACrD,MAAMC,IAAI,GAAG,MAAMnE,iBAAiB,CAAC,CAAC;QACtCiE,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEC,IAAI,CAACC,MAAM,EAAE,YAAY,CAAC;QAExEX,QAAQ,CAAC;UAAEhB,IAAI,EAAE,oBAAoB;UAAEC,OAAO,EAAEyB;QAAK,CAAC,CAAC;QAEvD,MAAM9C,cAAc,GAAGgD,iBAAiB,CAACF,IAAI,CAAC;QAC9CF,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAE7C,cAAc,CAAC;QAEvEoC,QAAQ,CAAC;UAAEhB,IAAI,EAAE,iBAAiB;UAAEC,OAAO,EAAE;YAAErB;UAAe;QAAE,CAAC,CAAC;MAEpE,CAAC,CAAC,OAAOK,KAAK,EAAE;QACduC,OAAO,CAACvC,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;QAC7D+B,QAAQ,CAAC;UAAEhB,IAAI,EAAE,WAAW;UAAEC,OAAO,EAAE;QAA0D,CAAC,CAAC;QACnGgB,kBAAkB,CAACK,OAAO,GAAG,KAAK;MACpC,CAAC,SAAS;QACRN,QAAQ,CAAC;UAAEhB,IAAI,EAAE,aAAa;UAAEC,OAAO,EAAE;QAAM,CAAC,CAAC;MACnD;IACF,CAAC;IAEDsB,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,iBAAiB,GAAI1C,aAAyB,IAAa;IAC/D,OAAOA,aAAa,CAAC2C,MAAM,CAAC,CAACC,KAAK,EAAEC,QAAQ,KAAK;MAC/C,OAAOD,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAACH,MAAM,CAAC,CAACI,QAAQ,EAAEC,WAAW,KAAK;QACtE,OAAOD,QAAQ,GAAGC,WAAW,CAACC,MAAM,CAACN,MAAM,CAAC,CAACO,UAAU,EAAEC,KAAK,KAAK;UACjE,OAAOD,UAAU,GAAGC,KAAK,CAACC,SAAS,CAACX,MAAM;QAC5C,CAAC,EAAE,CAAC,CAAC;MACP,CAAC,EAAE,CAAC,CAAC;IACP,CAAC,EAAE,CAAC,CAAC;EACP,CAAC;;EAED;EACA,MAAMY,gBAAgB,GAAGnF,WAAW,CAAC,MAAM;IACzC,MAAM+B,SAAS,GAAGqB,IAAI,CAACC,GAAG,CAAC,CAAC;IAC5Be,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE,IAAIjB,IAAI,CAACrB,SAAS,CAAC,CAACqD,WAAW,CAAC,CAAC,CAAC;IAE3ExB,QAAQ,CAAC;MAAEhB,IAAI,EAAE;IAAqB,CAAC,CAAC;IACxCqB,kBAAkB,CAACC,OAAO,GAAGnC,SAAS;;IAEtC;IACA,IAAIgC,aAAa,EAAE;MACjBsB,aAAa,CAACtB,aAAa,CAAC;IAC9B;;IAEA;IACA,MAAMuB,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjC,MAAMlC,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;MACtB,MAAMmC,OAAO,GAAGnC,GAAG,GAAGY,kBAAkB,CAACC,OAAO;MAEhDN,QAAQ,CAAC;QACPhB,IAAI,EAAE,cAAc;QACpBC,OAAO,EAAE;UACPS,WAAW,EAAEkC;QACf;MACF,CAAC,CAAC;IACJ,CAAC,EAAEjF,qBAAqB,CAAC;IAEzByD,gBAAgB,CAACsB,QAAQ,CAAC;EAC5B,CAAC,EAAE,CAACvB,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAM0B,iBAAiB,GAAGzF,WAAW,CAAE+B,SAAiB,IAAK;IAC3DqC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE,IAAIjB,IAAI,CAACrB,SAAS,CAAC,CAACqD,WAAW,CAAC,CAAC,CAAC;IAE7EnB,kBAAkB,CAACC,OAAO,GAAGnC,SAAS;IACtC,MAAMsB,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;IACtB,MAAMmC,OAAO,GAAGnC,GAAG,GAAGtB,SAAS;IAE/B6B,QAAQ,CAAC;MACPhB,IAAI,EAAE,cAAc;MACpBC,OAAO,EAAE;QACPS,WAAW,EAAEkC;MACf;IACF,CAAC,CAAC;;IAEF;IACA,IAAIzB,aAAa,EAAE;MACjBsB,aAAa,CAACtB,aAAa,CAAC;IAC9B;;IAEA;IACA,MAAMuB,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjC,MAAMlC,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;MACtB,MAAMmC,OAAO,GAAGnC,GAAG,GAAGY,kBAAkB,CAACC,OAAO;MAEhDN,QAAQ,CAAC;QACPhB,IAAI,EAAE,cAAc;QACpBC,OAAO,EAAE;UACPS,WAAW,EAAEkC;QACf;MACF,CAAC,CAAC;IACJ,CAAC,EAAEjF,qBAAqB,CAAC;IAEzByD,gBAAgB,CAACsB,QAAQ,CAAC;EAC5B,CAAC,EAAE,CAACvB,aAAa,CAAC,CAAC;;EAEnB;EACAhE,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIgE,aAAa,EAAE;QACjBsB,aAAa,CAACtB,aAAa,CAAC;MAC9B;IACF,CAAC;EACH,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAM2B,iBAAiB,GAAG1F,WAAW,CAAE2F,YAAoB,IAAa;IACtE,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,GAAG,IAAI,CAAC;IACpD,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACF,YAAY,GAAG,EAAE,CAAC;IAC7C,MAAMI,OAAO,GAAGJ,YAAY,GAAG,EAAE;IACjC,OAAO,GAAGG,OAAO,IAAIC,OAAO,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EAC5D,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,uBAAuB,GAAGnG,WAAW,CAAEoG,MAAe,IAAK;IAC/DxC,QAAQ,CAAC;MAAEhB,IAAI,EAAE,4BAA4B;MAAEC,OAAO,EAAEuD;IAAO,CAAC,CAAC;EACnE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,SAAS,GAAGrG,WAAW,CAAEwC,MAA2B,IAAK;IAC7DoB,QAAQ,CAAC;MAAEhB,IAAI,EAAE,YAAY;MAAEC,OAAO,EAAEL;IAAO,CAAC,CAAC;EACnD,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM8D,iBAAiB,GAAGtG,WAAW,CAAC,MAAOU,QAAkB,IAAK;IAClE,IAAI;MACFkD,QAAQ,CAAC;QAAEhB,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;MAChDuB,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAE3D,QAAQ,CAAC;MAEjE,MAAMyC,QAAQ,GAAG,MAAM/C,GAAG,CAACmG,UAAU,CAAC7F,QAAQ,CAAC;MAE/CkD,QAAQ,CAAC;QAAEhB,IAAI,EAAE,gBAAgB;QAAEC,OAAO,EAAEM,QAAQ,CAAC1C;MAAU,CAAC,CAAC;MACjEmD,QAAQ,CAAC;QAAEhB,IAAI,EAAE,eAAe;QAAEC,OAAO,EAAEnC;MAAS,CAAC,CAAC;;MAEtD;MACA,IAAIyC,QAAQ,CAACpB,SAAS,EAAE;QACtB,MAAMyE,eAAe,GAAG,IAAIpD,IAAI,CAACD,QAAQ,CAACpB,SAAS,CAAC;QACpD6B,QAAQ,CAAC;UAAEhB,IAAI,EAAE,YAAY;UAAEC,OAAO,EAAE;YACtC4D,SAAS,EAAED,eAAe;YAC1BE,WAAW,EAAE,IAAI;YACjBC,gBAAgB,EAAE,IAAI;YACtBC,kBAAkB,EAAE;UACtB;QAAC,CAAC,CAAC;QACHxC,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEmC,eAAe,CAACpB,WAAW,CAAC,CAAC,CAAC;MACvF;MAEA,MAAMrD,SAAS,GAAGqB,IAAI,CAACC,GAAG,CAAC,CAAC;MAC5BO,QAAQ,CAAC;QAAEhB,IAAI,EAAE,gBAAgB;QAAEC,OAAO,EAAEd;MAAU,CAAC,CAAC;;MAExD;MACA8E,YAAY,CAACC,OAAO,CAAC,yBAAyB,EAAE3D,QAAQ,CAAC1C,SAAS,CAAC;MACnEoG,YAAY,CAACC,OAAO,CAAC,yBAAyB,EAAE/E,SAAS,CAACkE,QAAQ,CAAC,CAAC,CAAC;;MAErE;MACA7B,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;MACpEc,gBAAgB,CAAC,CAAC;MAElBf,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;IAE/D,CAAC,CAAC,OAAOxC,KAAU,EAAE;MAAA,IAAAkF,eAAA,EAAAC,oBAAA;MACnB5C,OAAO,CAACvC,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MAEjE,MAAMoF,YAAY,GAAG,EAAAF,eAAA,GAAAlF,KAAK,CAACsB,QAAQ,cAAA4D,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBzC,IAAI,cAAA0C,oBAAA,uBAApBA,oBAAA,CAAsBnF,KAAK,KAAI,0BAA0B;MAC9E+B,QAAQ,CAAC;QAAEhB,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAEoE;MAAa,CAAC,CAAC;MAEtD,MAAMpF,KAAK;IACb,CAAC,SAAS;MACR+B,QAAQ,CAAC;QAAEhB,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAE;MAAM,CAAC,CAAC;IACnD;EACF,CAAC,EAAE,CAACsC,gBAAgB,CAAC,CAAC;;EAEtB;EACA,MAAM+B,eAAe,GAAGlH,WAAW,CAAC,MAAOS,SAAiB,IAAK;IAC/D,IAAIqD,gBAAgB,CAACI,OAAO,EAAE;IAE9B,IAAI;MACFJ,gBAAgB,CAACI,OAAO,GAAG,IAAI;MAC/BN,QAAQ,CAAC;QAAEhB,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;MAEhDuB,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnD,MAAM8C,IAAI,GAAG,MAAM/G,GAAG,CAACgH,OAAO,CAAC3G,SAAS,CAAC;MAEzCmD,QAAQ,CAAC;QAAEhB,IAAI,EAAE,gBAAgB;QAAEC,OAAO,EAAEpC;MAAU,CAAC,CAAC;MACxDmD,QAAQ,CAAC;QAAEhB,IAAI,EAAE,eAAe;QAAEC,OAAO,EAAEsE,IAAI,CAACzG;MAAS,CAAC,CAAC;MAC3DkD,QAAQ,CAAC;QAAEhB,IAAI,EAAE,eAAe;QAAEC,OAAO,EAAEsE,IAAI,CAAClF;MAAY,CAAC,CAAC;;MAE9D;MACA,IAAIkF,IAAI,CAAC3E,MAAM,EAAE;QACfoB,QAAQ,CAAC;UAAEhB,IAAI,EAAE,YAAY;UAAEC,OAAO,EAAE;YACtC4D,SAAS,EAAE,IAAIrD,IAAI,CAAC+D,IAAI,CAAC3E,MAAM,CAACiE,SAAS,CAAC;YAC1CC,WAAW,EAAES,IAAI,CAAC3E,MAAM,CAACkE,WAAW,GAAG,IAAItD,IAAI,CAAC+D,IAAI,CAAC3E,MAAM,CAACkE,WAAW,CAAC,GAAG,IAAI;YAC/EC,gBAAgB,EAAEQ,IAAI,CAAC3E,MAAM,CAACmE,gBAAgB;YAC9CC,kBAAkB,EAAEO,IAAI,CAAC3E,MAAM,CAACoE;UAClC;QAAC,CAAC,CAAC;QACHxC,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;MAClE;;MAEA;MACAD,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;MACrD,MAAMrD,SAAS,GAAG,MAAMZ,GAAG,CAACiH,gBAAgB,CAAC5G,SAAS,CAAC;MACvD2D,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAErD,SAAS,CAACuD,MAAM,CAAC;MAE/DX,QAAQ,CAAC;QAAEhB,IAAI,EAAE,eAAe;QAAEC,OAAO,EAAE7B;MAAU,CAAC,CAAC;;MAEvD;MACA,MAAMQ,cAAc,GAAGgD,iBAAiB,CAAC9B,KAAK,CAACZ,aAAa,CAAC;MAE7D,MAAMwF,eAAe,GAAG;QACtB,GAAGH,IAAI,CAACjG,QAAQ;QAChBM,cAAc;QACdD,kBAAkB,EAAEP,SAAS,CAACuD;MAChC,CAAC;MAEDX,QAAQ,CAAC;QAAEhB,IAAI,EAAE,iBAAiB;QAAEC,OAAO,EAAEyE;MAAgB,CAAC,CAAC;;MAE/D;MACA,MAAMC,YAAY,GAAGC,0BAA0B,CAACxG,SAAS,EAAE0B,KAAK,CAACZ,aAAa,CAAC;MAC/EsC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEkD,YAAY,CAAC;MAE9D3D,QAAQ,CAAC;QAAEhB,IAAI,EAAE,sBAAsB;QAAEC,OAAO,EAAE0E;MAAa,CAAC,CAAC;;MAEjE;MACA,IAAI,CAACJ,IAAI,CAAClF,WAAW,EAAE;QACrB,MAAMwF,cAAc,GAAGZ,YAAY,CAACa,OAAO,CAAC,yBAAyB,CAAC;QACtE,IAAID,cAAc,EAAE;UAClBhC,iBAAiB,CAACkC,QAAQ,CAACF,cAAc,CAAC,CAAC;QAC7C,CAAC,MAAM;UACL;UACAZ,YAAY,CAACC,OAAO,CAAC,yBAAyB,EAAE1D,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC4C,QAAQ,CAAC,CAAC,CAAC;UACtEd,gBAAgB,CAAC,CAAC;QACpB;MACF;IAEF,CAAC,CAAC,OAAOtD,KAAK,EAAE;MACd+B,QAAQ,CAAC;QAAEhB,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAE;MAA8B,CAAC,CAAC;MACvE,MAAMhB,KAAK;IACb,CAAC,SAAS;MACR+B,QAAQ,CAAC;QAAEhB,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAE;MAAM,CAAC,CAAC;MACjDiB,gBAAgB,CAACI,OAAO,GAAG,KAAK;IAClC;EACF,CAAC,EAAE,CAACxB,KAAK,CAACZ,aAAa,EAAE2D,iBAAiB,EAAEN,gBAAgB,CAAC,CAAC;EAE9D,MAAMqC,0BAA0B,GAAGxH,WAAW,CAAC,CAACgB,SAA6B,EAAEc,aAAyB,KAAK;IAC3G,MAAM8F,iBAAiB,GAAG,IAAIC,GAAG,CAAC7G,SAAS,CAAC8G,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC/E,UAAU,CAAC,CAAC;IAEnE,KAAK,IAAIpC,aAAa,GAAG,CAAC,EAAEA,aAAa,GAAGkB,aAAa,CAACyC,MAAM,EAAE3D,aAAa,EAAE,EAAE;MACjF,MAAM+D,QAAQ,GAAG7C,aAAa,CAAClB,aAAa,CAAC;MAE7C,KAAK,IAAIC,gBAAgB,GAAG,CAAC,EAAEA,gBAAgB,GAAG8D,QAAQ,CAACC,aAAa,CAACL,MAAM,EAAE1D,gBAAgB,EAAE,EAAE;QACnG,MAAMiE,WAAW,GAAGH,QAAQ,CAACC,aAAa,CAAC/D,gBAAgB,CAAC;QAE5D,KAAK,IAAIC,UAAU,GAAG,CAAC,EAAEA,UAAU,GAAGgE,WAAW,CAACC,MAAM,CAACR,MAAM,EAAEzD,UAAU,EAAE,EAAE;UAC7E,MAAMmE,KAAK,GAAGH,WAAW,CAACC,MAAM,CAACjE,UAAU,CAAC;UAE5C,KAAK,IAAIC,aAAa,GAAG,CAAC,EAAEA,aAAa,GAAGkE,KAAK,CAACC,SAAS,CAACX,MAAM,EAAExD,aAAa,EAAE,EAAE;YACnF,MAAMiC,UAAU,GAAG,GAAGpC,aAAa,IAAIC,gBAAgB,IAAIC,UAAU,IAAIC,aAAa,EAAE;YAExF,IAAI,CAAC6G,iBAAiB,CAACI,GAAG,CAAChF,UAAU,CAAC,EAAE;cACtC,OAAO;gBACLpC,aAAa;gBACbC,gBAAgB;gBAChBC,UAAU;gBACVC;cACF,CAAC;YACH;UACF;QACF;MACF;IACF;IAEA,IAAIe,aAAa,CAACyC,MAAM,GAAG,CAAC,EAAE;MAC5B,MAAM0D,YAAY,GAAGnG,aAAa,CAACA,aAAa,CAACyC,MAAM,GAAG,CAAC,CAAC;MAC5D,MAAM2D,eAAe,GAAGD,YAAY,CAACrD,aAAa,CAACqD,YAAY,CAACrD,aAAa,CAACL,MAAM,GAAG,CAAC,CAAC;MACzF,MAAM4D,SAAS,GAAGD,eAAe,CAACnD,MAAM,CAACmD,eAAe,CAACnD,MAAM,CAACR,MAAM,GAAG,CAAC,CAAC;MAE3E,OAAO;QACL3D,aAAa,EAAEkB,aAAa,CAACyC,MAAM,GAAG,CAAC;QACvC1D,gBAAgB,EAAEoH,YAAY,CAACrD,aAAa,CAACL,MAAM,GAAG,CAAC;QACvDzD,UAAU,EAAEoH,eAAe,CAACnD,MAAM,CAACR,MAAM,GAAG,CAAC;QAC7CxD,aAAa,EAAEoH,SAAS,CAACjD,SAAS,CAACX,MAAM,GAAG;MAC9C,CAAC;IACH;IAEA,OAAO;MAAE3D,aAAa,EAAE,CAAC;MAAEC,gBAAgB,EAAE,CAAC;MAAEC,UAAU,EAAE,CAAC;MAAEC,aAAa,EAAE;IAAE,CAAC;EACnF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMqH,YAAY,GAAGpI,WAAW,CAAC,MAAOmD,QAA0B,IAAK;IACvE,IAAI;MACFiB,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAElB,QAAQ,CAAC;MACtD,MAAM/C,GAAG,CAACgI,YAAY,CAACjF,QAAQ,CAAC;MAChCS,QAAQ,CAAC;QAAEhB,IAAI,EAAE,cAAc;QAAEC,OAAO,EAAEM;MAAS,CAAC,CAAC;MACrDS,QAAQ,CAAC;QAAEhB,IAAI,EAAE,oBAAoB;QAAEC,OAAO,EAAEO,IAAI,CAACC,GAAG,CAAC;MAAE,CAAC,CAAC;;MAE7D;MACA,MAAMgF,cAAc,GAAG,CAAC3F,KAAK,CAAC1B,SAAS,CAACgH,GAAG,CAAC7E,QAAQ,CAACH,UAAU,CAAC;MAChE,MAAMsF,gBAAgB,GAAG,CAACnF,QAAQ,CAACH,UAAU,CAACuF,UAAU,CAAC,kBAAkB,CAAC;MAE5E,IAAIF,cAAc,IAAIC,gBAAgB,EAAE;QACtC,MAAM/G,kBAAkB,GAAGiH,KAAK,CAACC,IAAI,CAAC/F,KAAK,CAAC1B,SAAS,CAAC0H,IAAI,CAAC,CAAC,CAAC,CAC1DC,MAAM,CAAC3F,UAAU,IAAI,CAACA,UAAU,CAACuF,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAChEhE,MAAM,GAAG,CAAC,CAAC,CAAC;;QAEfX,QAAQ,CAAC;UAAEhB,IAAI,EAAE,iBAAiB;UAAEC,OAAO,EAAE;YAAEtB;UAAmB;QAAE,CAAC,CAAC;MACxE;IAEF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACduC,OAAO,CAACvC,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D+B,QAAQ,CAAC;QAAEhB,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAE;MAA0B,CAAC,CAAC;MACnE,MAAMhB,KAAK;IACb;EACF,CAAC,EAAE,CAACa,KAAK,CAAC1B,SAAS,CAAC,CAAC;EAEnB,MAAM4H,kBAAkB,GAAG5I,WAAW,CAAC,OAAOY,aAAqB,EAAEC,gBAAwB,EAAEC,UAAkB,EAAEC,aAAqB,KAAK;IAC3I,MAAM8H,WAAW,GAAG;MAAEjI,aAAa;MAAEC,gBAAgB;MAAEC,UAAU;MAAEC;IAAc,CAAC;IAClF6C,QAAQ,CAAC;MAAEhB,IAAI,EAAE,sBAAsB;MAAEC,OAAO,EAAEgG;IAAY,CAAC,CAAC;IAEhE,IAAInG,KAAK,CAACjC,SAAS,EAAE;MACnB,IAAI;QACF,MAAML,GAAG,CAAC0I,kBAAkB,CAACpG,KAAK,CAACjC,SAAS,EAAE;UAC5CU,eAAe,EAAEP,aAAa;UAC9BQ,kBAAkB,EAAEP,gBAAgB;UACpCQ,YAAY,EAAEP,UAAU;UACxBQ,eAAe,EAAEP;QACnB,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOc,KAAK,EAAE;QACduC,OAAO,CAACvC,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D;IACF;EACF,CAAC,EAAE,CAACa,KAAK,CAACjC,SAAS,CAAC,CAAC;EAErB,MAAMsI,sBAAsB,GAAG/I,WAAW,CAAC,MAAM;IAC/C,MAAM;MAAEY,aAAa;MAAEC,gBAAgB;MAAEC,UAAU;MAAEC;IAAc,CAAC,GAAG2B,KAAK,CAAC/B,eAAe;IAE5F,IAAI,CAAC+B,KAAK,CAACZ,aAAa,CAAClB,aAAa,CAAC,EAAE,OAAO,IAAI;IAEpD,MAAM+D,QAAQ,GAAGjC,KAAK,CAACZ,aAAa,CAAClB,aAAa,CAAC;IACnD,MAAMkE,WAAW,GAAGH,QAAQ,CAACC,aAAa,CAAC/D,gBAAgB,CAAC;IAC5D,MAAMoE,KAAK,GAAGH,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEC,MAAM,CAACjE,UAAU,CAAC;IAC7C,MAAMkI,QAAQ,GAAG/D,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,SAAS,CAACnE,aAAa,CAAC;IAEhD,IAAI,CAACiI,QAAQ,EAAE,OAAO,IAAI;IAE1B,OAAO;MACLrE,QAAQ,EAAEA,QAAQ,CAACA,QAAQ;MAC3BG,WAAW,EAAEA,WAAW,CAACA,WAAW;MACpCG,KAAK,EAAEA,KAAK,CAACA,KAAK;MAClB+D,QAAQ;MACRhG,UAAU,EAAE,GAAGpC,aAAa,IAAIC,gBAAgB,IAAIC,UAAU,IAAIC,aAAa;IACjF,CAAC;EACH,CAAC,EAAE,CAAC2B,KAAK,CAAC/B,eAAe,EAAE+B,KAAK,CAACZ,aAAa,CAAC,CAAC;EAEhD,MAAMmH,kBAAkB,GAAGjJ,WAAW,CAAC,MAAM;IAC3C,MAAMsE,IAAI,GAAGyE,sBAAsB,CAAC,CAAC;IACrC,OAAO,CAAAzE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE0E,QAAQ,KAAI,IAAI;EAC/B,CAAC,EAAE,CAACD,sBAAsB,CAAC,CAAC;EAE5B,MAAMG,cAAc,GAAGlJ,WAAW,CAAC,YAAY;IAC7C,MAAM;MAAEY,aAAa;MAAEC,gBAAgB;MAAEC,UAAU;MAAEC;IAAc,CAAC,GAAG2B,KAAK,CAAC/B,eAAe;IAC5F,MAAMgE,QAAQ,GAAGjC,KAAK,CAACZ,aAAa,CAAClB,aAAa,CAAC;IAEnD,IAAI,CAAC+D,QAAQ,EAAE;IAEf,MAAMG,WAAW,GAAGH,QAAQ,CAACC,aAAa,CAAC/D,gBAAgB,CAAC;IAC5D,MAAMoE,KAAK,GAAGH,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEC,MAAM,CAACjE,UAAU,CAAC;IAE7C,IAAI,CAACmE,KAAK,EAAE;IAEZ,IAAI4D,WAAW,GAAG;MAAE,GAAGnG,KAAK,CAAC/B;IAAgB,CAAC;IAE9C,IAAII,aAAa,GAAGkE,KAAK,CAACC,SAAS,CAACX,MAAM,GAAG,CAAC,EAAE;MAC9CsE,WAAW,CAAC9H,aAAa,GAAGA,aAAa,GAAG,CAAC;IAC/C,CAAC,MAAM,IAAID,UAAU,GAAGgE,WAAW,CAACC,MAAM,CAACR,MAAM,GAAG,CAAC,EAAE;MACrDsE,WAAW,CAAC/H,UAAU,GAAGA,UAAU,GAAG,CAAC;MACvC+H,WAAW,CAAC9H,aAAa,GAAG,CAAC;IAC/B,CAAC,MAAM,IAAIF,gBAAgB,GAAG8D,QAAQ,CAACC,aAAa,CAACL,MAAM,GAAG,CAAC,EAAE;MAC/DsE,WAAW,CAAChI,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC;MACnDgI,WAAW,CAAC/H,UAAU,GAAG,CAAC;MAC1B+H,WAAW,CAAC9H,aAAa,GAAG,CAAC;IAC/B,CAAC,MAAM,IAAIH,aAAa,GAAG8B,KAAK,CAACZ,aAAa,CAACyC,MAAM,GAAG,CAAC,EAAE;MACzDsE,WAAW,CAACjI,aAAa,GAAGA,aAAa,GAAG,CAAC;MAC7CiI,WAAW,CAAChI,gBAAgB,GAAG,CAAC;MAChCgI,WAAW,CAAC/H,UAAU,GAAG,CAAC;MAC1B+H,WAAW,CAAC9H,aAAa,GAAG,CAAC;IAC/B,CAAC,MAAM;MACL6C,QAAQ,CAAC;QAAEhB,IAAI,EAAE,eAAe;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;MAClD;IACF;IAEAe,QAAQ,CAAC;MAAEhB,IAAI,EAAE,sBAAsB;MAAEC,OAAO,EAAEgG;IAAY,CAAC,CAAC;IAEhE,IAAInG,KAAK,CAACjC,SAAS,EAAE;MACnB,IAAI;QACF,MAAML,GAAG,CAAC0I,kBAAkB,CAACpG,KAAK,CAACjC,SAAS,EAAE;UAC5CU,eAAe,EAAE0H,WAAW,CAACjI,aAAa;UAC1CQ,kBAAkB,EAAEyH,WAAW,CAAChI,gBAAgB;UAChDQ,YAAY,EAAEwH,WAAW,CAAC/H,UAAU;UACpCQ,eAAe,EAAEuH,WAAW,CAAC9H;QAC/B,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOc,KAAK,EAAE;QACduC,OAAO,CAACvC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF;EACF,CAAC,EAAE,CAACa,KAAK,CAAC/B,eAAe,EAAE+B,KAAK,CAACZ,aAAa,EAAEY,KAAK,CAACjC,SAAS,CAAC,CAAC;EAEjE,MAAM0I,kBAAkB,GAAGnJ,WAAW,CAAC,YAAY;IACjD,MAAM;MAAEY,aAAa;MAAEC,gBAAgB;MAAEC,UAAU;MAAEC;IAAc,CAAC,GAAG2B,KAAK,CAAC/B,eAAe;IAE5F,IAAIkI,WAAW,GAAG;MAAE,GAAGnG,KAAK,CAAC/B;IAAgB,CAAC;IAE9C,IAAII,aAAa,GAAG,CAAC,EAAE;MACrB8H,WAAW,CAAC9H,aAAa,GAAGA,aAAa,GAAG,CAAC;IAC/C,CAAC,MAAM,IAAID,UAAU,GAAG,CAAC,EAAE;MACzB,MAAMsI,SAAS,GAAG1G,KAAK,CAACZ,aAAa,CAAClB,aAAa,CAAC,CAACgE,aAAa,CAAC/D,gBAAgB,CAAC,CAACkE,MAAM,CAACjE,UAAU,GAAG,CAAC,CAAC;MAC3G+H,WAAW,CAAC/H,UAAU,GAAGA,UAAU,GAAG,CAAC;MACvC+H,WAAW,CAAC9H,aAAa,GAAGqI,SAAS,CAAClE,SAAS,CAACX,MAAM,GAAG,CAAC;IAC5D,CAAC,MAAM,IAAI1D,gBAAgB,GAAG,CAAC,EAAE;MAC/B,MAAMwI,eAAe,GAAG3G,KAAK,CAACZ,aAAa,CAAClB,aAAa,CAAC,CAACgE,aAAa,CAAC/D,gBAAgB,GAAG,CAAC,CAAC;MAC9F,MAAMsH,SAAS,GAAGkB,eAAe,CAACtE,MAAM,CAACsE,eAAe,CAACtE,MAAM,CAACR,MAAM,GAAG,CAAC,CAAC;MAC3EsE,WAAW,CAAChI,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC;MACnDgI,WAAW,CAAC/H,UAAU,GAAGuI,eAAe,CAACtE,MAAM,CAACR,MAAM,GAAG,CAAC;MAC1DsE,WAAW,CAAC9H,aAAa,GAAGoH,SAAS,CAACjD,SAAS,CAACX,MAAM,GAAG,CAAC;IAC5D,CAAC,MAAM,IAAI3D,aAAa,GAAG,CAAC,EAAE;MAC5B,MAAM0I,YAAY,GAAG5G,KAAK,CAACZ,aAAa,CAAClB,aAAa,GAAG,CAAC,CAAC;MAC3D,MAAMsH,eAAe,GAAGoB,YAAY,CAAC1E,aAAa,CAAC0E,YAAY,CAAC1E,aAAa,CAACL,MAAM,GAAG,CAAC,CAAC;MACzF,MAAM4D,SAAS,GAAGD,eAAe,CAACnD,MAAM,CAACmD,eAAe,CAACnD,MAAM,CAACR,MAAM,GAAG,CAAC,CAAC;MAC3EsE,WAAW,CAACjI,aAAa,GAAGA,aAAa,GAAG,CAAC;MAC7CiI,WAAW,CAAChI,gBAAgB,GAAGyI,YAAY,CAAC1E,aAAa,CAACL,MAAM,GAAG,CAAC;MACpEsE,WAAW,CAAC/H,UAAU,GAAGoH,eAAe,CAACnD,MAAM,CAACR,MAAM,GAAG,CAAC;MAC1DsE,WAAW,CAAC9H,aAAa,GAAGoH,SAAS,CAACjD,SAAS,CAACX,MAAM,GAAG,CAAC;IAC5D;IAEAX,QAAQ,CAAC;MAAEhB,IAAI,EAAE,sBAAsB;MAAEC,OAAO,EAAEgG;IAAY,CAAC,CAAC;IAEhE,IAAInG,KAAK,CAACjC,SAAS,EAAE;MACnB,IAAI;QACF,MAAML,GAAG,CAAC0I,kBAAkB,CAACpG,KAAK,CAACjC,SAAS,EAAE;UAC5CU,eAAe,EAAE0H,WAAW,CAACjI,aAAa;UAC1CQ,kBAAkB,EAAEyH,WAAW,CAAChI,gBAAgB;UAChDQ,YAAY,EAAEwH,WAAW,CAAC/H,UAAU;UACpCQ,eAAe,EAAEuH,WAAW,CAAC9H;QAC/B,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOc,KAAK,EAAE;QACduC,OAAO,CAACvC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF;EACF,CAAC,EAAE,CAACa,KAAK,CAAC/B,eAAe,EAAE+B,KAAK,CAACZ,aAAa,EAAEY,KAAK,CAACjC,SAAS,CAAC,CAAC;EAEjE,MAAM8I,iBAAiB,GAAGvJ,WAAW,CAAC,MAAM;IAC5C,MAAMwB,cAAc,GAAGkB,KAAK,CAACxB,QAAQ,CAACM,cAAc;IACpD;IACA,MAAMD,kBAAkB,GAAGiH,KAAK,CAACC,IAAI,CAAC/F,KAAK,CAAC1B,SAAS,CAAC0H,IAAI,CAAC,CAAC,CAAC,CAC1DC,MAAM,CAAC3F,UAAU,IAAI,CAACA,UAAU,CAACuF,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAChEhE,MAAM;IACT,OAAO/C,cAAc,GAAG,CAAC,GAAID,kBAAkB,GAAGC,cAAc,GAAI,GAAG,GAAG,CAAC;EAC7E,CAAC,EAAE,CAACkB,KAAK,CAACxB,QAAQ,CAACM,cAAc,EAAEkB,KAAK,CAAC1B,SAAS,CAAC,CAAC;EAElD,MAAMwI,+BAA+B,GAAGxJ,WAAW,CAAC,MAAM;IAAA,IAAAyJ,qBAAA,EAAAC,sBAAA;IACxD,MAAM;MAAE9I,aAAa;MAAEC,gBAAgB;MAAEC;IAAW,CAAC,GAAG4B,KAAK,CAAC/B,eAAe;IAC7E,MAAMsE,KAAK,IAAAwE,qBAAA,GAAG/G,KAAK,CAACZ,aAAa,CAAClB,aAAa,CAAC,cAAA6I,qBAAA,wBAAAC,sBAAA,GAAlCD,qBAAA,CAAoC7E,aAAa,CAAC/D,gBAAgB,CAAC,cAAA6I,sBAAA,uBAAnEA,sBAAA,CAAqE3E,MAAM,CAACjE,UAAU,CAAC;IACrG,OAAO,CAAAmE,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,SAAS,CAACX,MAAM,KAAI,CAAC;EACrC,CAAC,EAAE,CAAC7B,KAAK,CAAC/B,eAAe,EAAE+B,KAAK,CAACZ,aAAa,CAAC,CAAC;EAEhD,MAAM6H,mCAAmC,GAAG3J,WAAW,CAAC,MAAM;IAAA,IAAA4J,sBAAA,EAAAC,sBAAA;IAC5D,MAAM;MAAEjJ,aAAa;MAAEC,gBAAgB;MAAEC;IAAW,CAAC,GAAG4B,KAAK,CAAC/B,eAAe;IAC7E,IAAImJ,SAAS,GAAG,CAAC;IAEjB,MAAM7E,KAAK,IAAA2E,sBAAA,GAAGlH,KAAK,CAACZ,aAAa,CAAClB,aAAa,CAAC,cAAAgJ,sBAAA,wBAAAC,sBAAA,GAAlCD,sBAAA,CAAoChF,aAAa,CAAC/D,gBAAgB,CAAC,cAAAgJ,sBAAA,uBAAnEA,sBAAA,CAAqE9E,MAAM,CAACjE,UAAU,CAAC;IACrG,IAAI,CAACmE,KAAK,EAAE,OAAO,CAAC;IAEpBA,KAAK,CAACC,SAAS,CAAChC,OAAO,CAAC,CAAC6G,CAAC,EAAEhJ,aAAa,KAAK;MAC5C,MAAMiC,UAAU,GAAG,GAAGpC,aAAa,IAAIC,gBAAgB,IAAIC,UAAU,IAAIC,aAAa,EAAE;MACxF,IAAI2B,KAAK,CAAC1B,SAAS,CAACgH,GAAG,CAAChF,UAAU,CAAC,EAAE;QACnC8G,SAAS,EAAE;MACb;IACF,CAAC,CAAC;IAEF,OAAOA,SAAS;EAClB,CAAC,EAAE,CAACpH,KAAK,CAAC/B,eAAe,EAAE+B,KAAK,CAACZ,aAAa,EAAEY,KAAK,CAAC1B,SAAS,CAAC,CAAC;;EAEjE;EACA,MAAMgJ,YAAY,GAAGhK,WAAW,CAAC,MAAM;IACrC6G,YAAY,CAACoD,UAAU,CAAC,yBAAyB,CAAC;IAClDpD,YAAY,CAACoD,UAAU,CAAC,yBAAyB,CAAC;IAClD,IAAIlG,aAAa,EAAE;MACjBsB,aAAa,CAACtB,aAAa,CAAC;MAC5BC,gBAAgB,CAAC,IAAI,CAAC;IACxB;IACAC,kBAAkB,CAACC,OAAO,GAAG,CAAC;IAC9BN,QAAQ,CAAC;MAAEhB,IAAI,EAAE;IAAa,CAAC,CAAC;EAClC,CAAC,EAAE,CAACmB,aAAa,CAAC,CAAC;EAEnB,MAAMmG,KAAsB,GAAG;IAC7BxH,KAAK;IACLkB,QAAQ;IACR0C,iBAAiB;IACjB8B,YAAY;IACZc,cAAc;IACdC,kBAAkB;IAClBI,iBAAiB;IACjBN,kBAAkB;IAClBF,sBAAsB;IACtBS,+BAA+B;IAC/BG,mCAAmC;IACnCzC,eAAe;IACf0B,kBAAkB;IAClBoB,YAAY;IACZ7E,gBAAgB;IAChBM,iBAAiB;IACjBC,iBAAiB;IACjBS,uBAAuB;IACvBE;EACF,CAAC;EAED,oBACE/F,OAAA,CAACiD,WAAW,CAAC4G,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAxG,QAAA,EAChCA;EAAQ;IAAA0G,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAAC5G,EAAA,CA1hBeF,YAAY;AAAA+G,EAAA,GAAZ/G,YAAY;AA4hB5B,OAAO,SAASgH,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACxB,MAAMC,OAAO,GAAG9K,UAAU,CAAC0D,WAAW,CAAC;EACvC,IAAIoH,OAAO,KAAKnH,SAAS,EAAE;IACzB,MAAM,IAAIoH,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB;AAACD,GAAA,CANeD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}