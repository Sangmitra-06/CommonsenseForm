{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sangm\\\\OneDrive - Brock University\\\\CommonsenseForm\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { FormProvider, useForm } from './context/FormContext.tsx';\nimport IntroductionWelcome from './components/IntroductionWelcome.tsx';\nimport IntroductionStructure from './components/IntroductionStructure.tsx';\nimport UserInfo from './components/UserInfo.tsx';\nimport QuestionForm from './components/QuestionForm.tsx';\nimport CompletionPage from './components/CompletionPage.tsx';\nimport SurveyExpired from './components/SurveyExpired.tsx';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AppContent() {\n  _s();\n  const {\n    state,\n    createUserSession,\n    loadUserSession\n  } = useForm();\n  const [currentStage, setCurrentStage] = useState('welcome');\n  const [isInitializing, setIsInitializing] = useState(true);\n  const [hasCheckedSession, setHasCheckedSession] = useState(false);\n  const [hasExistingSession, setHasExistingSession] = useState(false);\n  const [existingSessionId, setExistingSessionId] = useState(null);\n\n  // Wait for questions data to load\n  useEffect(() => {\n    if (state.questionsData.length > 0 && !hasCheckedSession && !state.isLoading) {\n      const checkExistingSession = async () => {\n        console.log('App: Checking for existing session...');\n        const savedSessionId = localStorage.getItem('culturalSurveySessionId');\n        if (savedSessionId) {\n          try {\n            const response = await fetch(`http://localhost:5000/api/users/${savedSessionId}`);\n            if (response.ok) {\n              const userData = await response.json();\n              console.log('App: Found existing session');\n              if (userData.isCompleted) {\n                localStorage.removeItem('culturalSurveySessionId');\n                localStorage.removeItem('culturalSurveyStartTime');\n                setHasExistingSession(false);\n              } else {\n                // Check if session has expired\n                const savedStartTime = localStorage.getItem('culturalSurveyStartTime');\n                if (savedStartTime) {\n                  const elapsed = Date.now() - parseInt(savedStartTime);\n                  const timeLimit = 15 * 60 * 1000; // 15 minutes\n\n                  if (elapsed >= timeLimit) {\n                    console.log('Existing session has expired');\n                    localStorage.removeItem('culturalSurveySessionId');\n                    localStorage.removeItem('culturalSurveyStartTime');\n                    setHasExistingSession(false);\n                  } else {\n                    setHasExistingSession(true);\n                    setExistingSessionId(savedSessionId);\n                  }\n                } else {\n                  // No start time found, treat as expired\n                  localStorage.removeItem('culturalSurveySessionId');\n                  setHasExistingSession(false);\n                }\n              }\n            } else {\n              localStorage.removeItem('culturalSurveySessionId');\n              localStorage.removeItem('culturalSurveyStartTime');\n              setHasExistingSession(false);\n            }\n          } catch (error) {\n            console.error('Error checking existing session:', error);\n            localStorage.removeItem('culturalSurveySessionId');\n            localStorage.removeItem('culturalSurveyStartTime');\n            setHasExistingSession(false);\n          }\n        }\n        setHasCheckedSession(true);\n        setIsInitializing(false);\n      };\n      checkExistingSession();\n    }\n  }, [state.questionsData.length, state.isLoading, hasCheckedSession]);\n\n  // Add this useEffect to handle page reloads\n  useEffect(() => {\n    const handleBeforeUnload = e => {\n      // Show warning if survey is in progress\n      if (state.sessionId && !state.isCompleted && !state.surveyExpired) {\n        e.preventDefault();\n        e.returnValue = 'Your survey progress will be lost. Are you sure you want to leave?';\n        return 'Your survey progress will be lost. Are you sure you want to leave?';\n      }\n    };\n    const handleUnload = () => {\n      // Clear session data on page unload\n      if (state.sessionId && !state.isCompleted) {\n        localStorage.removeItem('culturalSurveySessionId');\n        localStorage.removeItem('culturalSurveyStartTime');\n      }\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    window.addEventListener('unload', handleUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n      window.removeEventListener('unload', handleUnload);\n    };\n  }, [state.sessionId, state.isCompleted, state.surveyExpired]);\n\n  // Modified session checking logic\n  useEffect(() => {\n    if (state.questionsData.length > 0 && !hasCheckedSession && !state.isLoading) {\n      const checkExistingSession = async () => {\n        console.log('App: Checking for existing session...');\n        const savedSessionId = localStorage.getItem('culturalSurveySessionId');\n        const savedStartTime = localStorage.getItem('culturalSurveyStartTime');\n\n        // For one-sitting surveys, always clear old sessions\n        if (savedSessionId || savedStartTime) {\n          console.log('App: Clearing previous session (one-sitting requirement)');\n          localStorage.removeItem('culturalSurveySessionId');\n          localStorage.removeItem('culturalSurveyStartTime');\n          setHasExistingSession(false);\n        }\n        setHasCheckedSession(true);\n        setIsInitializing(false);\n      };\n      checkExistingSession();\n    }\n  }, [state.questionsData.length, state.isLoading, hasCheckedSession]);\n\n  // Update stage based on form state\n  useEffect(() => {\n    if (!hasCheckedSession) return;\n    if (state.surveyExpired) {\n      setCurrentStage('expired');\n    } else if (state.isCompleted) {\n      setCurrentStage('completed');\n    } else if (state.sessionId && state.userInfo) {\n      setCurrentStage('questions');\n    }\n  }, [state.surveyExpired, state.isCompleted, state.sessionId, state.userInfo, hasCheckedSession]);\n  const handleWelcomeContinue = () => {\n    setCurrentStage('structure');\n  };\n  const handleStartNewSurvey = () => {\n    if (hasExistingSession) {\n      localStorage.removeItem('culturalSurveySessionId');\n      localStorage.removeItem('culturalSurveyStartTime');\n      setHasExistingSession(false);\n      setExistingSessionId(null);\n    }\n    setCurrentStage('userInfo');\n  };\n  const handleResumeSurvey = async () => {\n    if (existingSessionId) {\n      try {\n        console.log('Resuming survey with session:', existingSessionId);\n        await loadUserSession(existingSessionId);\n        setCurrentStage('questions');\n      } catch (error) {\n        console.error('Failed to resume session:', error);\n        localStorage.removeItem('culturalSurveySessionId');\n        localStorage.removeItem('culturalSurveyStartTime');\n        setHasExistingSession(false);\n        setExistingSessionId(null);\n        alert('Unable to resume previous session. Starting fresh.');\n        setCurrentStage('userInfo');\n      }\n    }\n  };\n  const handleUserInfoSubmit = async userInfo => {\n    try {\n      await createUserSession(userInfo);\n      setCurrentStage('questions');\n    } catch (error) {\n      console.error('Failed to create user session:', error);\n    }\n  };\n  if (isInitializing || state.questionsData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-gray-100 flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600\",\n          children: state.questionsData.length === 0 ? 'Loading survey questions...' : 'Checking for existing survey...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-500 mt-2\",\n          children: [\"Questions loaded: \", state.questionsData.length, \" categories\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this);\n  }\n  if (state.error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-red-50 flex items-center justify-center p-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-md mx-auto bg-white rounded-lg shadow-lg p-6 text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-red-600 text-4xl mb-4\",\n          children: \"\\u26A0\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold text-red-800 mb-2\",\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-red-600 mb-4\",\n          children: state.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => window.location.reload(),\n          className: \"bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\",\n          children: \"Reload Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this);\n  }\n  switch (currentStage) {\n    case 'welcome':\n      return /*#__PURE__*/_jsxDEV(IntroductionWelcome, {\n        onContinue: handleWelcomeContinue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 14\n      }, this);\n    case 'structure':\n      return /*#__PURE__*/_jsxDEV(IntroductionStructure, {\n        onStartNew: handleStartNewSurvey,\n        onResume: handleResumeSurvey,\n        hasExistingSession: hasExistingSession\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this);\n    case 'userInfo':\n      return /*#__PURE__*/_jsxDEV(UserInfo, {\n        onSubmit: handleUserInfoSubmit,\n        isLoading: state.isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 14\n      }, this);\n    case 'questions':\n      return /*#__PURE__*/_jsxDEV(QuestionForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 14\n      }, this);\n    case 'completed':\n      return /*#__PURE__*/_jsxDEV(CompletionPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 14\n      }, this);\n    case 'expired':\n      return /*#__PURE__*/_jsxDEV(SurveyExpired, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 14\n      }, this);\n    default:\n      return /*#__PURE__*/_jsxDEV(IntroductionWelcome, {\n        onContinue: handleWelcomeContinue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 14\n      }, this);\n  }\n}\n_s(AppContent, \"Bhuh1MA6hXtbpW1+fmJ6S5i/REY=\", false, function () {\n  return [useForm];\n});\n_c = AppContent;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(FormProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(AppContent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","FormProvider","useForm","IntroductionWelcome","IntroductionStructure","UserInfo","QuestionForm","CompletionPage","SurveyExpired","jsxDEV","_jsxDEV","AppContent","_s","state","createUserSession","loadUserSession","currentStage","setCurrentStage","isInitializing","setIsInitializing","hasCheckedSession","setHasCheckedSession","hasExistingSession","setHasExistingSession","existingSessionId","setExistingSessionId","questionsData","length","isLoading","checkExistingSession","console","log","savedSessionId","localStorage","getItem","response","fetch","ok","userData","json","isCompleted","removeItem","savedStartTime","elapsed","Date","now","parseInt","timeLimit","error","handleBeforeUnload","e","sessionId","surveyExpired","preventDefault","returnValue","handleUnload","window","addEventListener","removeEventListener","userInfo","handleWelcomeContinue","handleStartNewSurvey","handleResumeSurvey","alert","handleUserInfoSubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","location","reload","onContinue","onStartNew","onResume","onSubmit","_c","App","_c2","$RefreshReg$"],"sources":["C:/Users/sangm/OneDrive - Brock University/CommonsenseForm/client/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { FormProvider, useForm } from './context/FormContext.tsx';\r\nimport IntroductionWelcome from './components/IntroductionWelcome.tsx';\r\nimport IntroductionStructure from './components/IntroductionStructure.tsx';\r\nimport UserInfo from './components/UserInfo.tsx';\r\nimport QuestionForm from './components/QuestionForm.tsx';\r\nimport CompletionPage from './components/CompletionPage.tsx';\r\nimport SurveyExpired from './components/SurveyExpired.tsx';\r\nimport './App.css';\r\n\r\ntype AppStage = 'welcome' | 'structure' | 'userInfo' | 'questions' | 'completed' | 'expired';\r\n\r\nfunction AppContent() {\r\n  const { state, createUserSession, loadUserSession } = useForm();\r\n  const [currentStage, setCurrentStage] = useState<AppStage>('welcome');\r\n  const [isInitializing, setIsInitializing] = useState(true);\r\n  const [hasCheckedSession, setHasCheckedSession] = useState(false);\r\n  const [hasExistingSession, setHasExistingSession] = useState(false);\r\n  const [existingSessionId, setExistingSessionId] = useState<string | null>(null);\r\n\r\n  // Wait for questions data to load\r\n  useEffect(() => {\r\n    if (state.questionsData.length > 0 && !hasCheckedSession && !state.isLoading) {\r\n      const checkExistingSession = async () => {\r\n        console.log('App: Checking for existing session...');\r\n        const savedSessionId = localStorage.getItem('culturalSurveySessionId');\r\n        \r\n        if (savedSessionId) {\r\n          try {\r\n            const response = await fetch(`http://localhost:5000/api/users/${savedSessionId}`);\r\n            if (response.ok) {\r\n              const userData = await response.json();\r\n              console.log('App: Found existing session');\r\n              \r\n              if (userData.isCompleted) {\r\n                localStorage.removeItem('culturalSurveySessionId');\r\n                localStorage.removeItem('culturalSurveyStartTime');\r\n                setHasExistingSession(false);\r\n              } else {\r\n                // Check if session has expired\r\n                const savedStartTime = localStorage.getItem('culturalSurveyStartTime');\r\n                if (savedStartTime) {\r\n                  const elapsed = Date.now() - parseInt(savedStartTime);\r\n                  const timeLimit = 15 * 60 * 1000; // 15 minutes\r\n                  \r\n                  if (elapsed >= timeLimit) {\r\n                    console.log('Existing session has expired');\r\n                    localStorage.removeItem('culturalSurveySessionId');\r\n                    localStorage.removeItem('culturalSurveyStartTime');\r\n                    setHasExistingSession(false);\r\n                  } else {\r\n                    setHasExistingSession(true);\r\n                    setExistingSessionId(savedSessionId);\r\n                  }\r\n                } else {\r\n                  // No start time found, treat as expired\r\n                  localStorage.removeItem('culturalSurveySessionId');\r\n                  setHasExistingSession(false);\r\n                }\r\n              }\r\n            } else {\r\n              localStorage.removeItem('culturalSurveySessionId');\r\n              localStorage.removeItem('culturalSurveyStartTime');\r\n              setHasExistingSession(false);\r\n            }\r\n          } catch (error) {\r\n            console.error('Error checking existing session:', error);\r\n            localStorage.removeItem('culturalSurveySessionId');\r\n            localStorage.removeItem('culturalSurveyStartTime');\r\n            setHasExistingSession(false);\r\n          }\r\n        }\r\n        \r\n        setHasCheckedSession(true);\r\n        setIsInitializing(false);\r\n      };\r\n\r\n      checkExistingSession();\r\n    }\r\n  }, [state.questionsData.length, state.isLoading, hasCheckedSession]);\r\n\r\n  // Add this useEffect to handle page reloads\r\n  useEffect(() => {\r\n    const handleBeforeUnload = (e: BeforeUnloadEvent) => {\r\n      // Show warning if survey is in progress\r\n      if (state.sessionId && !state.isCompleted && !state.surveyExpired) {\r\n        e.preventDefault();\r\n        e.returnValue = 'Your survey progress will be lost. Are you sure you want to leave?';\r\n        return 'Your survey progress will be lost. Are you sure you want to leave?';\r\n      }\r\n    };\r\n\r\n    const handleUnload = () => {\r\n      // Clear session data on page unload\r\n      if (state.sessionId && !state.isCompleted) {\r\n        localStorage.removeItem('culturalSurveySessionId');\r\n        localStorage.removeItem('culturalSurveyStartTime');\r\n      }\r\n    };\r\n\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    window.addEventListener('unload', handleUnload);\r\n\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n      window.removeEventListener('unload', handleUnload);\r\n    };\r\n  }, [state.sessionId, state.isCompleted, state.surveyExpired]);\r\n\r\n  // Modified session checking logic\r\n  useEffect(() => {\r\n    if (state.questionsData.length > 0 && !hasCheckedSession && !state.isLoading) {\r\n      const checkExistingSession = async () => {\r\n        console.log('App: Checking for existing session...');\r\n        const savedSessionId = localStorage.getItem('culturalSurveySessionId');\r\n        const savedStartTime = localStorage.getItem('culturalSurveyStartTime');\r\n        \r\n        // For one-sitting surveys, always clear old sessions\r\n        if (savedSessionId || savedStartTime) {\r\n          console.log('App: Clearing previous session (one-sitting requirement)');\r\n          localStorage.removeItem('culturalSurveySessionId');\r\n          localStorage.removeItem('culturalSurveyStartTime');\r\n          setHasExistingSession(false);\r\n        }\r\n        \r\n        setHasCheckedSession(true);\r\n        setIsInitializing(false);\r\n      };\r\n\r\n      checkExistingSession();\r\n    }\r\n  }, [state.questionsData.length, state.isLoading, hasCheckedSession]);\r\n\r\n  // Update stage based on form state\r\n  useEffect(() => {\r\n    if (!hasCheckedSession) return;\r\n    \r\n    if (state.surveyExpired) {\r\n      setCurrentStage('expired');\r\n    } else if (state.isCompleted) {\r\n      setCurrentStage('completed');\r\n    } else if (state.sessionId && state.userInfo) {\r\n      setCurrentStage('questions');\r\n    }\r\n  }, [state.surveyExpired, state.isCompleted, state.sessionId, state.userInfo, hasCheckedSession]);\r\n\r\n  const handleWelcomeContinue = () => {\r\n    setCurrentStage('structure');\r\n  };\r\n\r\n  const handleStartNewSurvey = () => {\r\n    if (hasExistingSession) {\r\n      localStorage.removeItem('culturalSurveySessionId');\r\n      localStorage.removeItem('culturalSurveyStartTime');\r\n      setHasExistingSession(false);\r\n      setExistingSessionId(null);\r\n    }\r\n    setCurrentStage('userInfo');\r\n  };\r\n\r\n  const handleResumeSurvey = async () => {\r\n    if (existingSessionId) {\r\n      try {\r\n        console.log('Resuming survey with session:', existingSessionId);\r\n        await loadUserSession(existingSessionId);\r\n        setCurrentStage('questions');\r\n      } catch (error) {\r\n        console.error('Failed to resume session:', error);\r\n        localStorage.removeItem('culturalSurveySessionId');\r\n        localStorage.removeItem('culturalSurveyStartTime');\r\n        setHasExistingSession(false);\r\n        setExistingSessionId(null);\r\n        alert('Unable to resume previous session. Starting fresh.');\r\n        setCurrentStage('userInfo');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUserInfoSubmit = async (userInfo: any) => {\r\n    try {\r\n      await createUserSession(userInfo);\r\n      setCurrentStage('questions');\r\n    } catch (error) {\r\n      console.error('Failed to create user session:', error);\r\n    }\r\n  };\r\n\r\n  if (isInitializing || state.questionsData.length === 0) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-100 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600\">\r\n            {state.questionsData.length === 0 ? 'Loading survey questions...' : 'Checking for existing survey...'}\r\n          </p>\r\n          <p className=\"text-sm text-gray-500 mt-2\">\r\n            Questions loaded: {state.questionsData.length} categories\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (state.error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-red-50 flex items-center justify-center p-4\">\r\n        <div className=\"max-w-md mx-auto bg-white rounded-lg shadow-lg p-6 text-center\">\r\n          <div className=\"text-red-600 text-4xl mb-4\">⚠️</div>\r\n          <h2 className=\"text-xl font-bold text-red-800 mb-2\">Error</h2>\r\n          <p className=\"text-red-600 mb-4\">{state.error}</p>\r\n          <button\r\n            onClick={() => window.location.reload()}\r\n            className=\"bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\"\r\n          >\r\n            Reload Page\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  switch (currentStage) {\r\n    case 'welcome':\r\n      return <IntroductionWelcome onContinue={handleWelcomeContinue} />;\r\n    case 'structure':\r\n      return (\r\n        <IntroductionStructure \r\n          onStartNew={handleStartNewSurvey}\r\n          onResume={handleResumeSurvey}\r\n          hasExistingSession={hasExistingSession}\r\n        />\r\n      );\r\n    case 'userInfo':\r\n      return <UserInfo onSubmit={handleUserInfoSubmit} isLoading={state.isLoading} />;\r\n    case 'questions':\r\n      return <QuestionForm />;\r\n    case 'completed':\r\n      return <CompletionPage />;\r\n    case 'expired':\r\n      return <SurveyExpired />;\r\n    default:\r\n      return <IntroductionWelcome onContinue={handleWelcomeContinue} />;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <FormProvider>\r\n      <div className=\"App\">\r\n        <AppContent />\r\n      </div>\r\n    </FormProvider>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}